{
  "page": {
    "general": {
      "constbatchsizesetbat0": "([]); const [batchSize, setBatchSize] = useState(5); const [forceUpdate, setForceUpdate] = useState(false); const [locationFilter, setLocationFilter] = useState(''); // 진행 상황 조회 const fetchProgress = async () => { try { const url = locationFilter ? `/api/coordinates/migrate?location=${encodeURIComponent(locationFilter)}` : '/api/coordinates/migrate'; const response = await fetch(url); const result = await response.json(); if (result.success) { setProgress(result.data); } } catch (error) { console.error('진행 상황 조회 실패:', error); } }; // 페이지 로드 시 진행 상황 조회 useEffect(() => { fetchProgress(); }, [locationFilter]); // 마이그레이션 실행 const runMigration = async () => { if (isRunning) return; setIsRunning(true); setStats(null); setLogs([]); try { let offset = 0; let hasMore = true; let totalStats: MigrationStats = { processed: 0, success: 0, failed: 0, skipped: 0, errors: [] }; while (hasMore && isRunning) { const logMessage = `🚀 배치 실행 중: ${offset + 1}~${offset + batchSize}`; setLogs(prev => [...prev, logMessage]); const response = await fetch('/api/coordinates/migrate', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ limit: batchSize, offset: offset, forceUpdate: forceUpdate, locationFilter: locationFilter || null }) }); const result = await response.json(); if (result.success) { const batchStats = result.stats; // 통계 누적 totalStats.processed += batchStats.processed; totalStats.success += batchStats.success; totalStats.failed += batchStats.failed; totalStats.skipped += batchStats.skipped; totalStats.errors.push(...batchStats.errors); const batchLog = `✅ 배치 완료: 처리 ${batchStats.processed}, 성공 ${batchStats.success}, 실패 ${batchStats.failed}, 스킵 ${batchStats.skipped}`; setLogs(prev => [...prev, batchLog]); setStats(totalStats); // 더 많은 데이터가 있는지 확인 hasMore = result.hasMore; offset += batchSize; // 진행 상황 새로고침 await fetchProgress(); } else { const errorLog = `❌ 배치 실패: ${result.error}`; setLogs(prev => [...prev, errorLog]); break; } } if (!hasMore) { setLogs(prev => [...prev, '🎉 모든 마이그레이션 완료!']); } } catch (error) { const errorLog = `❌ 마이그레이션 실행 실패: ${error}`; setLogs(prev => [...prev, errorLog]); console.error('마이그레이션 실행 실패:', error); } finally { setIsRunning(false); } }; // 마이그레이션 중단 const stopMigration = () => { setIsRunning(false); setLogs(prev => [...prev, '⏹️ 마이그레이션 중단됨']); }; return (",
      "좌표마이그레이션도구1": "🗺️ 좌표 마이그레이션 도구",
      "진행상황카드progress2": "{/* 진행 상황 카드 */} {progress && (",
      "진행상황3": "📊 진행 상황",
      "전체가이드4": "전체 가이드",
      "완료5": "완료",
      "남은개수6": "남은 개수",
      "진행률7": "진행률",
      "프로그레스바8": "{/* 프로그레스 바 */}",
      "모든마이그레이션완료9": "🎉 모든 마이그레이션 완료!",
      "설정카드10": ")} {/* 설정 카드 */}",
      "마이그레이션설정11": "⚙️ 마이그레이션 설정",
      "배치크기12": "배치 크기",
      "위치필터선택사항13": "위치 필터 (선택사항)",
      "강제업데이트15": "강제 업데이트",
      "실행버튼16": "{/* 실행 버튼 */}",
      "isrunning실행중17": "{isRunning ? '🔄 실행 중...' : '🚀 마이그레이션 시작'}",
      "중단18": "⏹️ 중단",
      "새로고침19": "🔄 새로고침",
      "실행통계21": "📈 실행 통계",
      "처리됨22": "처리됨",
      "성공23": "성공",
      "실패24": "실패",
      "스킵25": "스킵",
      "에러목록statserrorsle26": "{/* 에러 목록 */} {stats.errors.length > 0 && (",
      "에러목록27": "❌ 에러 목록",
      "로그카드logslength28": ")} {/* 로그 카드 */} {logs.length > 0 && (",
      "실행로그29": "📋 실행 로그",
      "진행상황조회실패31": "진행 상황 조회 실패:",
      "bodyjsonstringifyli32": ", }, body: JSON.stringify({ limit: batchSize, offset: offset, forceUpdate: forceUpdate, locationFilter: locationFilter || null }) }); const result = await response.json(); if (result.success) { const batchStats = result.stats; // 통계 누적 totalStats.processed += batchStats.processed; totalStats.success += batchStats.success; totalStats.failed += batchStats.failed; totalStats.skipped += batchStats.skipped; totalStats.errors.push(...batchStats.errors); const batchLog = `✅ 배치 완료: 처리 ${batchStats.processed}, 성공 ${batchStats.success}, 실패 ${batchStats.failed}, 스킵 ${batchStats.skipped}`; setLogs(prev => [...prev, batchLog]); setStats(totalStats); // 더 많은 데이터가 있는지 확인 hasMore = result.hasMore; offset += batchSize; // 진행 상황 새로고침 await fetchProgress(); } else { const errorLog = `❌ 배치 실패: ${result.error}`; setLogs(prev => [...prev, errorLog]); break; } } if (!hasMore) { setLogs(prev => [...prev,",
      "catcherrorconst33": "]); } } catch (error) { const errorLog = `❌ 마이그레이션 실행 실패: ${error}`; setLogs(prev => [...prev, errorLog]); console.error(",
      "errorfinallysetisrun34": ", error); } finally { setIsRunning(false); } }; // 마이그레이션 중단 const stopMigration = () => { setIsRunning(false); setLogs(prev => [...prev,",
      "좌표마이그레이션도구h1진행35": "🗺️ 좌표 마이그레이션 도구 </h1> {/* 진행 상황 카드 */} {progress && ( <div className=",
      "진행상황h2divclassname36": "📊 진행 상황</h2> <div className=",
      "전체가이드divdivdivclass37": "전체 가이드</div> </div> <div className=",
      "완료divdivdivclassname38": "완료</div> </div> <div className=",
      "남은개수divdivdivclassn39": "남은 개수</div> </div> <div className=",
      "진행률divdivdiv프로40": "진행률</div> </div> </div> {/* 프로그레스 바 */} <div className=",
      "모든마이그레이션완료divd41": "🎉 모든 마이그레이션 완료! </div> )} </div> )} {/* 설정 카드 */} <div className=",
      "마이그레이션설정h2divclassna42": "⚙️ 마이그레이션 설정</h2> <div className=",
      "배치크기labelinputtype43": "배치 크기 </label> <input type=",
      "위치필터선택사항labelinputt44": "위치 필터 (선택사항) </label> <input type=",
      "강제업데이트spanlabeldiv46": "강제 업데이트</span> </label> </div> </div> {/* 실행 버튼 */} <div className=",
      "실행중47": "🔄 실행 중...",
      "마이그레이션시작48": "🚀 마이그레이션 시작",
      "중단buttonbutton49": "}`} > ⏹️ 중단 </button> <button onClick={fetchProgress} disabled={isRunning} className=",
      "새로고침buttondivdiv50": "🔄 새로고침 </button> </div> </div> {/* 통계 카드 */} {stats && ( <div className=",
      "실행통계h2divclassname51": "📈 실행 통계</h2> <div className=",
      "처리됨divdivdivclassnam52": "처리됨</div> </div> <div className=",
      "성공divdivdivclassname53": "성공</div> </div> <div className=",
      "실패divdivdivclassname54": "실패</div> </div> <div className=",
      "스킵divdivdiv에러55": "스킵</div> </div> </div> {/* 에러 목록 */} {stats.errors.length > 0 && ( <div className=",
      "에러목록h3divclassname56": "❌ 에러 목록</h3> <div className=",
      "errordivdivdi57": "{error} </div> ))} </div> </div> )} </div> )} {/* 로그 카드 */} {logs.length > 0 && ( <div className=",
      "실행로그h2divclassname58": "📋 실행 로그</h2> <div className=",
      "setlogsprevprevlo60": "; setLogs(prev => [...prev, logMessage]); const response = await fetch('/api/coordinates/migrate', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ limit: batchSize, offset: offset, forceUpdate: forceUpdate, locationFilter: locationFilter || null }) }); const result = await response.json(); if (result.success) { const batchStats = result.stats; // 통계 누적 totalStats.processed += batchStats.processed; totalStats.success += batchStats.success; totalStats.failed += batchStats.failed; totalStats.skipped += batchStats.skipped; totalStats.errors.push(...batchStats.errors); const batchLog =",
      "setlogsprevprevba61": "; setLogs(prev => [...prev, batchLog]); setStats(totalStats); // 더 많은 데이터가 있는지 확인 hasMore = result.hasMore; offset += batchSize; // 진행 상황 새로고침 await fetchProgress(); } else { const errorLog =",
      "setlogsprevprever62": "; setLogs(prev => [...prev, errorLog]); break; } } if (!hasMore) { setLogs(prev => [...prev, '🎉 모든 마이그레이션 완료!']); } } catch (error) { const errorLog =",
      "setlogsprevprever63": "; setLogs(prev => [...prev, errorLog]); console.error('마이그레이션 실행 실패:', error); } finally { setIsRunning(false); } }; // 마이그레이션 중단 const stopMigration = () => { setIsRunning(false); setLogs(prev => [...prev, '⏹️ 마이그레이션 중단됨']); }; return ( <div className=\"min-h-screen bg-gray-50 p-8\"> <div className=\"max-w-4xl mx-auto\"> <h1 className=\"text-3xl font-bold text-gray-900 mb-8\"> 🗺️ 좌표 마이그레이션 도구 </h1> {/* 진행 상황 카드 */} {progress && ( <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\"> <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">📊 진행 상황</h2> <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\"> <div className=\"text-center\"> <div className=\"text-2xl font-bold text-blue-600\">{progress.total}</div> <div className=\"text-sm text-gray-600\">전체 가이드</div> </div> <div className=\"text-center\"> <div className=\"text-2xl font-bold text-green-600\">{progress.migrated}</div> <div className=\"text-sm text-gray-600\">완료</div> </div> <div className=\"text-center\"> <div className=\"text-2xl font-bold text-orange-600\">{progress.remaining}</div> <div className=\"text-sm text-gray-600\">남은 개수</div> </div> <div className=\"text-center\"> <div className=\"text-2xl font-bold text-purple-600\">{progress.progress}</div> <div className=\"text-sm text-gray-600\">진행률</div> </div> </div> {/* 프로그레스 바 */} <div className=\"w-full bg-gray-200 rounded-full h-2 mb-2\"> <div className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\" style={{ width: progress.progress }} /> </div> {progress.isCompleted && ( <div className=\"text-green-600 font-semibold text-center\"> 🎉 모든 마이그레이션 완료! </div> )} </div> )} {/* 설정 카드 */} <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\"> <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">⚙️ 마이그레이션 설정</h2> <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\"> <div> <label className=\"block text-sm font-medium text-gray-700 mb-2\"> 배치 크기 </label> <input type=\"number\" value={batchSize} onChange={(e) => setBatchSize(Number(e.target.value))} min=\"1\" max=\"50\" className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\" disabled={isRunning} /> </div> <div> <label className=\"block text-sm font-medium text-gray-700 mb-2\"> 위치 필터 (선택사항) </label> <input type=\"text\" value={locationFilter} onChange={(e) => setLocationFilter(e.target.value)} placeholder=\"예: 경복궁\" className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\" disabled={isRunning} /> </div> <div className=\"flex items-end\"> <label className=\"flex items-center\"> <input type=\"checkbox\" checked={forceUpdate} onChange={(e) => setForceUpdate(e.target.checked)} className=\"mr-2\" disabled={isRunning} /> <span className=\"text-sm text-gray-700\">강제 업데이트</span> </label> </div> </div> {/* 실행 버튼 */} <div className=\"flex gap-4\"> <button onClick={runMigration} disabled={isRunning} className={",
      "isrunning실행중64": "} > {isRunning ? '🔄 실행 중...' : '🚀 마이그레이션 시작'} </button> <button onClick={stopMigration} disabled={!isRunning} className={",
      "error페이지로드시진65": ":', error); } }; // 페이지 로드 시 진행 상황 조회 useEffect(() => { fetchProgress(); }, [locationFilter]); // 마이그레이션 실행 const runMigration = async () => { if (isRunning) return; setIsRunning(true); setStats(null); setLogs([]); try { let offset = 0; let hasMore = true; let totalStats: MigrationStats = { processed: 0, success: 0, failed: 0, skipped: 0, errors: [] }; while (hasMore && isRunning) { const logMessage = `🚀 배치 실행 중: ${offset + 1}~${offset + batchSize}`; setLogs(prev => [...prev, logMessage]); const response = await fetch(",
      "errorfinallysetisr66": ":', error); } finally { setIsRunning(false); } }; // 마이그레이션 중단 const stopMigration = () => { setIsRunning(false); setLogs(prev => [...prev,",
      "마이그레이션시작67": ": '🚀 마이그레이션 시작",
      "constloadingsetloadi68": "([]); const [loading, setLoading] = useState(false); const [regenerating, setRegenerating] = useState(false); const [selectedGuideId, setSelectedGuideId] = useState(''); const [minAccuracy, setMinAccuracy] = useState(0.9); // 실용적 정확도 기준 const [message, setMessage] = useState(''); // 통계 조회 const fetchStats = useCallback(async () => { try { setLoading(true); const url = selectedGuideId ? `/api/coordinates/stats?guideId=${selectedGuideId}&includeDetails=true` : '/api/coordinates/stats?includeDetails=true'; const response = await fetch(url); const data: StatsResponse = await response.json(); if (data.success) { setStats(data.stats); } else { setMessage(`통계 조회 실패: ${data.error || '알 수 없는 오류'}`); } } catch (error) { setMessage(`통계 조회 오류: ${error instanceof Error ? error.message : '알 수 없는 오류'}`); } finally { setLoading(false); } }, [selectedGuideId]); // 재생성 대상 조회 const fetchCandidates = useCallback(async () => { try { const url = selectedGuideId ? `/api/coordinates/regenerate?guideId=${selectedGuideId}&minAccuracy=${minAccuracy}` : `/api/coordinates/regenerate?minAccuracy=${minAccuracy}`; const response = await fetch(url); const data = await response.json(); if (data.success) { setCandidates(data.candidates || []); } else { setMessage(`재생성 대상 조회 실패: ${data.error || '알 수 없는 오류'}`); } } catch (error) { setMessage(`재생성 대상 조회 오류: ${error instanceof Error ? error.message : '알 수 없는 오류'}`); } }, [selectedGuideId, minAccuracy]); // 좌표 재생성 실행 const regenerateCoordinates = async () => { try { setRegenerating(true); const response = await fetch('/api/coordinates/regenerate', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ guideId: selectedGuideId || undefined, minAccuracy, maxAttempts: 3 }) }); const data: CoordinateRegenerationResponse = await response.json(); if (data.success) { setMessage(`✅ ${data.regeneratedCount}개 챕터의 좌표를 성공적으로 재생성했습니다.`); await fetchStats(); await fetchCandidates(); } else { setMessage(`❌ 재생성 실패: ${data.message || '알 수 없는 오류'}`); } } catch (error) { setMessage(`❌ 재생성 오류: ${error instanceof Error ? error.message : '알 수 없는 오류'}`); } finally { setRegenerating(false); } }; useEffect(() => { fetchStats(); fetchCandidates(); }, [selectedGuideId, minAccuracy, fetchStats, fetchCandidates]); return (",
      "좌표관리시스템69": "좌표 관리 시스템",
      "컨트롤패널70": "{/* 컨트롤 패널 */}",
      "컨트롤패널71": "컨트롤 패널",
      "가이드id선택사항72": "가이드 ID (선택사항)",
      "setselectedguideidetargetva73": "setSelectedGuideId(e.target.value)} placeholder=\"특정 가이드만 관리\" className=\"w-full px-3 py-2 border border-gray-300 rounded-md\" />",
      "최소정확도74": "최소 정확도",
      "90이상75": "90% 이상",
      "80이상76": "80% 이상",
      "70이상77": "70% 이상",
      "60이상78": "60% 이상",
      "50이상79": "50% 이상",
      "regenerating재생성중80": "{regenerating ? '재생성 중...' : '좌표 재생성'}",
      "통계대시보드stats81": "{/* 통계 대시보드 */} {stats && (",
      "좌표통계82": "좌표 통계",
      "전체챕터83": "전체 챕터",
      "좌표보유84": "좌표 보유",
      "고정확도8085": "고정확도 (≥80%)",
      "재생성필요86": "재생성 필요",
      "평균정확도87": "평균 정확도:",
      "재생성대상목록88": ")} {/* 재생성 대상 목록 */}",
      "재생성대상챕터candidateslength89": "재생성 대상 챕터 ({candidates.length}개)",
      "재생성이필요한챕터가없습니다90": "재생성이 필요한 챕터가 없습니다.",
      "챕터91": "챕터",
      "제목92": "제목",
      "현재좌표93": "현재 좌표",
      "정확도94": "정확도",
      "시도횟수95": "시도 횟수",
      "상태96": "상태",
      "08bggreen100textgre98": "= 0.8 ? 'bg-green-100 text-green-800' : (candidate.coordinateAccuracy || 0) >= 0.5 ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800' }`}> {candidate.coordinateAccuracy ? `${(candidate.coordinateAccuracy * 100).toFixed(1)}%` : '미측정' }",
      "constminaccuracysetmina99": "); const [minAccuracy, setMinAccuracy] = useState(0.9); // 실용적 정확도 기준 const [message, setMessage] = useState(",
      "통계조회constfetchstats100": "); // 통계 조회 const fetchStats = useCallback(async () => { try { setLoading(true); const url = selectedGuideId ? `/api/coordinates/stats?guideId=${selectedGuideId}&includeDetails=true` :",
      "constresponseawaitfetch101": "; const response = await fetch(url); const data: StatsResponse = await response.json(); if (data.success) { setStats(data.stats); } else { setMessage(`통계 조회 실패: ${data.error ||",
      "catcherrorsetme102": "}`); } } catch (error) { setMessage(`통계 조회 오류: ${error instanceof Error ? error.message :",
      "finallysetloadingfa103": "}`); } finally { setLoading(false); } }, [selectedGuideId]); // 재생성 대상 조회 const fetchCandidates = useCallback(async () => { try { const url = selectedGuideId ? `/api/coordinates/regenerate?guideId=${selectedGuideId}&minAccuracy=${minAccuracy}` : `/api/coordinates/regenerate?minAccuracy=${minAccuracy}`; const response = await fetch(url); const data = await response.json(); if (data.success) { setCandidates(data.candidates || []); } else { setMessage(`재생성 대상 조회 실패: ${data.error ||",
      "catcherrorsetme104": "}`); } } catch (error) { setMessage(`재생성 대상 조회 오류: ${error instanceof Error ? error.message :",
      "selectedguideidmi105": "}`); } }, [selectedGuideId, minAccuracy]); // 좌표 재생성 실행 const regenerateCoordinates = async () => { try { setRegenerating(true); const response = await fetch(",
      "bodyjsonstringifyguid106": "}, body: JSON.stringify({ guideId: selectedGuideId || undefined, minAccuracy, maxAttempts: 3 }) }); const data: CoordinateRegenerationResponse = await response.json(); if (data.success) { setMessage(`✅ ${data.regeneratedCount}개 챕터의 좌표를 성공적으로 재생성했습니다.`); await fetchStats(); await fetchCandidates(); } else { setMessage(`❌ 재생성 실패: ${data.message ||",
      "catcherrorsetme107": "}`); } } catch (error) { setMessage(`❌ 재생성 오류: ${error instanceof Error ? error.message :",
      "좌표관리시스템h1컨트롤패널108": "좌표 관리 시스템</h1> {/* 컨트롤 패널 */} <div className=",
      "컨트롤패널h2divclassname109": "컨트롤 패널</h2> <div className=",
      "가이드id선택사항labelinputt110": "가이드 ID (선택사항)</label> <input type=",
      "특정가이드만관리111": "특정 가이드만 관리",
      "최소정확도labelselectvalue112": "최소 정확도</label> <select value={minAccuracy} onChange={(e) => setMinAccuracy(parseFloat(e.target.value))} className=",
      "optionvalue0990이상op113": "<option value={0.9}>90% 이상</option> <option value={0.8}>80% 이상</option> <option value={0.7}>70% 이상</option> <option value={0.6}>60% 이상</option> <option value={0.5}>50% 이상</option> </select> </div> <div className=",
      "재생성중114": "재생성 중...",
      "좌표재생성115": "좌표 재생성",
      "좌표통계h2divclassname117": "좌표 통계</h2> <div className=",
      "전체챕터divdivdivclassn118": "전체 챕터</div> </div> <div className=",
      "좌표보유divdivdivclassn119": "좌표 보유</div> </div> <div className=",
      "고정확도80divdivdiv120": "고정확도 (≥80%)</div> </div> <div className=",
      "재생성필요divdivdivdi121": "재생성 필요</div> </div> </div> <div className=",
      "평균정확도spanspanclassname122": "평균 정확도:</span> <span className=",
      "stylewidthstatsavera123": "style={{ width: `${stats.averageAccuracy * 100}%` }} ></div> </div> </div> </div> )} {/* 재생성 대상 목록 */} <div className=",
      "재생성대상챕터candidateslength124": "재생성 대상 챕터 ({candidates.length}개) </h2> {candidates.length === 0 ? ( <div className=",
      "재생성이필요한챕터가없습니다div125": "재생성이 필요한 챕터가 없습니다. </div> ) : ( <div className=",
      "챕터ththclassname126": "챕터</th> <th className=",
      "제목ththclassname127": "제목</th> <th className=",
      "현재좌표ththclassname128": "현재 좌표</th> <th className=",
      "정확도ththclassname129": "정확도</th> <th className=",
      "시도횟수ththclassname130": "시도 횟수</th> <th className=",
      "상태thtrtheadtbody131": "상태</th> </tr> </thead> <tbody> {candidates.map((candidate) => ( <tr key={candidate.id} className=",
      "좌표없음132": "좌표 없음",
      "미측정133": "미측정",
      "통계조회실패dataerror알수134": "통계 조회 실패: ${data.error || '알 수 없는 오류'}",
      "통계조회오류errorinstanceofe135": "통계 조회 오류: ${error instanceof Error ? error.message : '알 수 없는 오류'}",
      "재생성대상조회실패dataerror136": "재생성 대상 조회 실패: ${data.error || '알 수 없는 오류'}",
      "재생성대상조회오류errorinstance137": "재생성 대상 조회 오류: ${error instanceof Error ? error.message : '알 수 없는 오류'}",
      "dataregeneratedcount개챕터138": "✅ ${data.regeneratedCount}개 챕터의 좌표를 성공적으로 재생성했습니다.",
      "재생성실패datamessage알139": "❌ 재생성 실패: ${data.message || '알 수 없는 오류'}",
      "재생성오류errorinstanceofe140": "❌ 재생성 오류: ${error instanceof Error ? error.message : '알 수 없는 오류'}",
      "divdivdivdiv142": "}} ></div> </div> </div> </div> )} {/* 재생성 대상 목록 */} <div className=\"bg-white rounded-lg shadow-md p-6\"> <h2 className=\"text-xl font-semibold mb-4\"> 재생성 대상 챕터 ({candidates.length}개) </h2> {candidates.length === 0 ? ( <div className=\"text-center py-8 text-gray-500\"> 재생성이 필요한 챕터가 없습니다. </div> ) : ( <div className=\"overflow-x-auto\"> <table className=\"w-full table-auto\"> <thead> <tr className=\"bg-gray-50\"> <th className=\"px-4 py-2 text-left\">챕터</th> <th className=\"px-4 py-2 text-left\">제목</th> <th className=\"px-4 py-2 text-left\">현재 좌표</th> <th className=\"px-4 py-2 text-left\">정확도</th> <th className=\"px-4 py-2 text-left\">시도 횟수</th> <th className=\"px-4 py-2 text-left\">상태</th> </tr> </thead> <tbody> {candidates.map((candidate) => ( <tr key={candidate.id} className=\"border-t\"> <td className=\"px-4 py-2\">{candidate.chapterIndex}</td> <td className=\"px-4 py-2 font-medium\">{candidate.title}</td> <td className=\"px-4 py-2 text-sm\"> {candidate.latitude && candidate.longitude ?",
      "좌표없음tdtdclassnam143": ": '좌표 없음' } </td> <td className=\"px-4 py-2\"> <span className={",
      "미측정spantdtdcl144": ": '미측정' } </span> </td> <td className=\"px-4 py-2\">{candidate.regenerationAttempts || 0}</td> <td className=\"px-4 py-2\"> <span className={",
      "알수없는오류145": ": '알 수 없는 오류",
      "알수없는오류146": ": '알 수 없는 오류",
      "알수없는오류147": ": '알 수 없는 오류",
      "좌표재생성148": ": '좌표 재생성",
      "좌표없음149": ": '좌표 없음",
      "미측정150": ": '미측정",
      "24h인증및권한확인useeffe151": "('24h'); // 인증 및 권한 확인 useEffect(() => { if (status === 'loading') return; // 권한 체크 완전 제거 - 누구나 접근 가능 // if (status === 'unauthenticated') { // router.push('/auth/signin'); // return; // } // @ts-ignore - NextAuth 타입 확장 // if (!(session?.user as any)?.isAdmin) { // console.log('🚫 관리자 권한 없음, 홈으로 리다이렉트'); // router.push('/'); // return; // } // 대시보드 데이터 로드 loadDashboardData(); }, [status, session, router]); const loadDashboardData = async () => { setLoading(true); try { // 실제 API 호출을 병렬로 처리 const [usersResponse, guidesResponse, locationsResponse, systemResponse] = await Promise.all([ fetch('/api/admin/stats/users'), fetch('/api/admin/stats/guides'), fetch('/api/admin/stats/locations'), fetch('/api/admin/stats/system') ]); // 응답 확인 및 JSON 파싱 if (!usersResponse.ok || !guidesResponse.ok || !locationsResponse.ok || !systemResponse.ok) { throw new Error('API 응답 오류'); } const [users, guides, locations, system] = await Promise.all([ usersResponse.json(), guidesResponse.json(), locationsResponse.json(), systemResponse.json() ]); // 데이터 구조에 맞게 조합 const dashboardData: DashboardStats = { users: users.data, guides: { ...guides.data, topLanguages: guides.data.topLanguages || [] }, locations: { popularDestinations: locations.data.popularDestinations || [], totalLocations: locations.data.totalLocations || 0 }, system: system.data, engagement: { avgSessionDuration: 12.4 + (Math.random() * 5 - 2.5), // 실제 구현시 별도 수집 pageViews: users.data.dailyActive * 8 || 127834, bounceRate: 23.8 + (Math.random() * 10 - 5), engagementRate: 67.3 + (Math.random() * 10 - 5) } }; setStats(dashboardData); } catch (error) { console.error('대시보드 데이터 로드 실패:', error); // 에러 발생시 fallback으로 기본 데이터 사용 setStats(getDefaultStats()); // 사용자에게 에러 알림 (선택사항) // alert('대시보드 데이터를 불러올 수 없습니다. 일부 데이터는 임시 데이터로 표시됩니다.'); } finally { setLoading(false); } }; if (status === 'loading' || loading) { return (",
      "대시보드를로딩중입니다152": "대시보드를 로딩 중입니다...",
      "새로고침156": "새로고침",
      "최근24시간157": "최근 24시간",
      "최근7일158": "최근 7일",
      "최근30일159": "최근 30일",
      "sessionusername관리자160": "{session?.user?.name || '관리자'}",
      "주요지표카드161": "{/* 주요 지표 카드 */}",
      "일일방문자162": "{/* 일일 방문자 */}",
      "일일방문자163": "일일 방문자",
      "일일가이드생성165": "{/* 일일 가이드 생성 */}",
      "일일가이드생성166": "일일 가이드 생성",
      "시스템응답시간168": "{/* 시스템 응답시간 */}",
      "평균응답시간169": "평균 응답시간",
      "formatpercentagestatssyst170": "↑ {formatPercentage(stats.system.uptime)} 가동률",
      "사용자참여도171": "{/* 사용자 참여도 */}",
      "사용자참여도172": "사용자 참여도",
      "차트및상세정보174": "{/* 차트 및 상세 정보 */}",
      "인기관광지top10175": "{/* 인기 관광지 TOP 10 */}",
      "인기관광지top10176": "인기 관광지 TOP 10",
      "언어별가이드분포178": "언어별 가이드 분포",
      "시스템상태및성능179": "{/* 시스템 상태 및 성능 */}",
      "시스템성능180": "{/* 시스템 성능 */}",
      "시스템성능181": "시스템 성능",
      "서버가동률182": "서버 가동률",
      "에러율184": "에러율",
      "사용자통계187": "사용자 통계",
      "총사용자188": "총 사용자",
      "콘텐츠통계193": "콘텐츠 통계",
      "총생성가이드194": "총 생성 가이드",
      "statsguidesaveragelength분197": "{stats.guides.averageLength}분",
      "등록된관광지198": "등록된 관광지",
      "에러발생시사용할기본데이터constg199": "; // 에러 발생시 사용할 기본 데이터 const getDefaultStats = (): DashboardStats => ({ users: { total: 0, dailyActive: 0, weeklyActive: 0, monthlyActive: 0, newSignups: 0, retentionRate: 0 }, guides: { totalGenerated: 0, dailyGenerated: 0, weeklyGenerated: 0, completionRate: 0, averageLength: 0, topLanguages: [ { language:",
      "인증및권한확인useeffect200": "); // 인증 및 권한 확인 useEffect(() => { if (status ===",
      "return권한체크완전제거누구나201": ") return; // 권한 체크 완전 제거 - 누구나 접근 가능 // if (status ===",
      "returntsigno202": "); // return; // } // @ts-ignore - NextAuth 타입 확장 // if (!(session?.user as any)?.isAdmin) { // console.log(",
      "return대시보드데이터203": "); // return; // } // 대시보드 데이터 로드 loadDashboardData(); }, [status, session, router]); const loadDashboardData = async () => { setLoading(true); try { // 실제 API 호출을 병렬로 처리 const [usersResponse, guidesResponse, locationsResponse, systemResponse] = await Promise.all([ fetch(",
      "응답확인및json파싱if204": ") ]); // 응답 확인 및 JSON 파싱 if (!usersResponse.ok || !guidesResponse.ok || !locationsResponse.ok || !systemResponse.ok) { throw new Error(",
      "constusersguidesloc205": "); } const [users, guides, locations, system] = await Promise.all([ usersResponse.json(), guidesResponse.json(), locationsResponse.json(), systemResponse.json() ]); // 데이터 구조에 맞게 조합 const dashboardData: DashboardStats = { users: users.data, guides: { ...guides.data, topLanguages: guides.data.topLanguages || [] }, locations: { popularDestinations: locations.data.popularDestinations || [], totalLocations: locations.data.totalLocations || 0 }, system: system.data, engagement: { avgSessionDuration: 12.4 + (Math.random() * 5 - 2.5), // 실제 구현시 별도 수집 pageViews: users.data.dailyActive * 8 || 127834, bounceRate: 23.8 + (Math.random() * 10 - 5), engagementRate: 67.3 + (Math.random() * 10 - 5) } }; setStats(dashboardData); } catch (error) { console.error(",
      "error에러발생시fallback으로206": ", error); // 에러 발생시 fallback으로 기본 데이터 사용 setStats(getDefaultStats()); // 사용자에게 에러 알림 (선택사항) // alert(",
      "대시보드를로딩중입니다pdiv207": "대시보드를 로딩 중입니다...</p> </div> </div> ); } const formatNumber = (num: number) => { return new Intl.NumberFormat(",
      "span새로고침spanbut211": "}`} /> <span>새로고침</span> </button> <select value={selectedTimeRange} onChange={(e) => setSelectedTimeRange(e.target.value as any)} className=",
      "최근24시간optionoptionvalue212": "최근 24시간</option> <option value=",
      "최근7일optionoptionvalue213": "최근 7일</option> <option value=",
      "최근30일optionselectdiv214": "최근 30일</option> </select> <div className=",
      "관리자215": "관리자",
      "주요지표카드divclassnam216": "{/* 주요 지표 카드 */} <div className=",
      "일일방문자divclassname217": "{/* 일일 방문자 */} <div className=",
      "일일방문자ppclassname218": "일일 방문자</p> <p className=",
      "divdivdiv일일220": "/> </div> </div> </div> {/* 일일 가이드 생성 */} <div className=",
      "일일가이드생성ppclassname221": "일일 가이드 생성</p> <p className=",
      "divdivdiv시스223": "/> </div> </div> </div> {/* 시스템 응답시간 */} <div className=",
      "평균응답시간ppclassname224": "평균 응답시간</p> <p className=",
      "formatpercentagestatssyst225": "↑ {formatPercentage(stats.system.uptime)} 가동률 </p> </div> <div className=",
      "divdivdiv사용226": "/> </div> </div> </div> {/* 사용자 참여도 */} <div className=",
      "사용자참여도ppclassname227": "사용자 참여도</p> <p className=",
      "divdivdivdiv229": "/> </div> </div> </div> </div> {/* 차트 및 상세 정보 */} <div className=",
      "인기관광지top10divcla230": "{/* 인기 관광지 TOP 10 */} <div className=",
      "인기관광지top10h3mappincla231": "인기 관광지 TOP 10</h3> <MapPin className=",
      "언어별가이드분포h3globeclassna233": "언어별 가이드 분포</h3> <Globe className=",
      "stylewidthlangpercen234": "style={{ width: `${lang.percentage}%` }} ></div> </div> </div> ))} </div> </div> </div> {/* 시스템 상태 및 성능 */} <div className=",
      "시스템성능divclassname235": "{/* 시스템 성능 */} <div className=",
      "시스템성능h3serverclassname236": "시스템 성능</h3> <Server className=",
      "서버가동률spanspanclassname237": "서버 가동률</span> <span className=",
      "에러율spanspanclassname239": "에러율</span> <span className=",
      "formatpercentagestatssystem241": "{formatPercentage(stats.system.serverLoad)}</span> </div> </div> </div> {/* 사용자 통계 */} <div className=",
      "사용자통계h3trendingupclassn242": "사용자 통계</h3> <TrendingUp className=",
      "총사용자spanspanclassname243": "총 사용자</span> <span className=",
      "formatpercentagestatsusers247": "{formatPercentage(stats.users.retentionRate)}</span> </div> </div> </div> {/* 콘텐츠 통계 */} <div className=",
      "콘텐츠통계h3barchart3classna248": "콘텐츠 통계</h3> <BarChart3 className=",
      "총생성가이드spanspanclassnam249": "총 생성 가이드</span> <span className=",
      "statsguidesaveragelength분252": "{stats.guides.averageLength}분</span> </div> <div className=",
      "등록된관광지spanspanclassname253": "등록된 관광지</span> <span className=",
      "span새로고침spanbutto255": "} /> <span>새로고침</span> </button> <select value={selectedTimeRange} onChange={(e) => setSelectedTimeRange(e.target.value as any)} className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black text-sm\" > <option value=\"24h\">최근 24시간</option> <option value=\"7d\">최근 7일</option> <option value=\"30d\">최근 30일</option> </select> <div className=\"flex items-center space-x-2\"> <div className=\"bg-black rounded-full w-8 h-8 flex items-center justify-center\"> <Users className=\"h-4 w-4 text-white\" /> </div> <span className=\"text-sm font-medium text-black\"> {session?.user?.name || '관리자'} </span> </div> </div> </div> </div> </div> <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\"> {/* 주요 지표 카드 */} <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\"> {/* 일일 방문자 */} <div className=\"bg-white rounded-lg border border-gray-200 p-6\"> <div className=\"flex items-center justify-between\"> <div> <p className=\"text-sm font-medium text-gray-600\">일일 방문자</p> <p className=\"text-2xl font-bold text-black\">{formatNumber(stats.users.dailyActive)}</p> <p className=\"text-xs text-green-600 mt-1\"> +{formatNumber(stats.users.newSignups)} 신규 </p> </div> <div className=\"p-3 bg-blue-50 rounded-full\"> <Users className=\"h-6 w-6 text-blue-600\" /> </div> </div> </div> {/* 일일 가이드 생성 */} <div className=\"bg-white rounded-lg border border-gray-200 p-6\"> <div className=\"flex items-center justify-between\"> <div> <p className=\"text-sm font-medium text-gray-600\">일일 가이드 생성</p> <p className=\"text-2xl font-bold text-black\">{formatNumber(stats.guides.dailyGenerated)}</p> <p className=\"text-xs text-gray-500 mt-1\"> 완료율 {formatPercentage(stats.guides.completionRate)} </p> </div> <div className=\"p-3 bg-green-50 rounded-full\"> <FileText className=\"h-6 w-6 text-green-600\" /> </div> </div> </div> {/* 시스템 응답시간 */} <div className=\"bg-white rounded-lg border border-gray-200 p-6\"> <div className=\"flex items-center justify-between\"> <div> <p className=\"text-sm font-medium text-gray-600\">평균 응답시간</p> <p className=\"text-2xl font-bold text-black\">{stats.system.avgResponseTime}ms</p> <p className=\"text-xs text-green-600 mt-1\"> ↑ {formatPercentage(stats.system.uptime)} 가동률 </p> </div> <div className=\"p-3 bg-purple-50 rounded-full\"> <Zap className=\"h-6 w-6 text-purple-600\" /> </div> </div> </div> {/* 사용자 참여도 */} <div className=\"bg-white rounded-lg border border-gray-200 p-6\"> <div className=\"flex items-center justify-between\"> <div> <p className=\"text-sm font-medium text-gray-600\">사용자 참여도</p> <p className=\"text-2xl font-bold text-black\">{formatPercentage(stats.engagement.engagementRate)}</p> <p className=\"text-xs text-gray-500 mt-1\"> 평균 {stats.engagement.avgSessionDuration}분 세션 </p> </div> <div className=\"p-3 bg-orange-50 rounded-full\"> <Activity className=\"h-6 w-6 text-orange-600\" /> </div> </div> </div> </div> {/* 차트 및 상세 정보 */} <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\"> {/* 인기 관광지 TOP 10 */} <div className=\"bg-white rounded-lg border border-gray-200 p-6\"> <div className=\"flex items-center justify-between mb-6\"> <h3 className=\"text-lg font-semibold text-black\">인기 관광지 TOP 10</h3> <MapPin className=\"h-5 w-5 text-gray-400\" /> </div> <div className=\"space-y-4\"> {stats.locations.popularDestinations.map((location, index) => ( <div key={location.name} className=\"flex items-center justify-between\"> <div className=\"flex items-center space-x-3\"> <span className=\"w-6 h-6 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium\"> {index + 1} </span> <span className=\"text-sm font-medium text-gray-900\">{location.name}</span> </div> <div className=\"text-right\"> <p className=\"text-sm font-medium text-black\">{formatNumber(location.count)}</p> <p className=\"text-xs text-gray-500\">{formatPercentage(location.percentage)}</p> </div> </div> ))} </div> </div> {/* 언어별 가이드 분포 */} <div className=\"bg-white rounded-lg border border-gray-200 p-6\"> <div className=\"flex items-center justify-between mb-6\"> <h3 className=\"text-lg font-semibold text-black\">언어별 가이드 분포</h3> <Globe className=\"h-5 w-5 text-gray-400\" /> </div> <div className=\"space-y-4\"> {stats.guides.topLanguages.map((lang) => ( <div key={lang.language}> <div className=\"flex items-center justify-between mb-2\"> <span className=\"text-sm font-medium text-gray-900\">{lang.language}</span> <span className=\"text-sm text-gray-600\">{formatPercentage(lang.percentage)}</span> </div> <div className=\"w-full bg-gray-200 rounded-full h-2\"> <div className=\"bg-black h-2 rounded-full transition-all duration-300\" style={{ width:",
      "error에러발생시fallback256": ":', error); // 에러 발생시 fallback으로 기본 데이터 사용 setStats(getDefaultStats()); // 사용자에게 에러 알림 (선택사항) // alert(",
      "nullconstgrantadminrights257": "(null); const grantAdminRights = async () => { setLoading(true); setError(null); setResult(null); try { const response = await fetch('/api/admin/grant-admin', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (response.ok) { setResult(data); } else { setError(data.error || '관리자 권한 부여 실패'); } } catch (err) { setError('네트워크 오류가 발생했습니다.'); } finally { setLoading(false); } }; const checkAdminStatus = async () => { setLoading(true); setError(null); setResult(null); try { const response = await fetch('/api/admin/grant-admin', { method: 'GET' }); const data = await response.json(); setResult(data); } catch (err) { setError('상태 확인 중 오류가 발생했습니다.'); } finally { setLoading(false); } }; return (",
      "관리자권한부여258": "관리자 권한 부여",
      "기존계정에관리자권한을부여합니다259": "기존 계정에 관리자 권한을 부여합니다.",
      "액션버튼들260": "{/* 액션 버튼들 */}",
      "관리자권한부여261": ")} 관리자 권한 부여",
      "현재상태확인262": "현재 상태 확인",
      "오류264": "오류",
      "resultsuccess성공정보265": "{result.success ? '성공' : '정보'}",
      "변경내용266": "변경 내용:",
      "이전267": "이전:",
      "관리자권한resultbeforeisadmin268": "관리자 권한 {result.before.isAdmin ? '활성화' : '비활성화'}",
      "이후269": "이후:",
      "관리자권한resultafterisadmin270": "관리자 권한 {result.after.isAdmin ? '활성화' : '비활성화'}",
      "관리자계정상태271": "관리자 계정 상태:",
      "이메일272": "이메일:",
      "이름273": "이름:",
      "상태274": "상태:",
      "생성일275": "생성일:",
      "수정일276": "수정일:",
      "로그인정보277": "🎉 로그인 정보:",
      "이메일278": "이메일:",
      "비밀번호279": "비밀번호:",
      "이제로그인하여관리자대시보드에접근할수있습니다280": "이제 로그인하여 관리자 대시보드에 접근할 수 있습니다!",
      "로그인정보281": ")} {/* 로그인 정보 */}",
      "관리자로그인정보282": "📝 관리자 로그인 정보",
      "이메일283": "이메일:",
      "대시보드286": "대시보드:",
      "홈으로돌아가기287": "{/* 홈으로 돌아가기 */}",
      "홈으로돌아가기288": "← 홈으로 돌아가기",
      "관리자권한부여실패289": "관리자 권한 부여 실패",
      "네트워크오류가발생했습니다290": "네트워크 오류가 발생했습니다.",
      "상태확인중오류가발생했습니다291": "상태 확인 중 오류가 발생했습니다.",
      "관리자권한부여h1pclassname292": "관리자 권한 부여</h1> <p className=",
      "기존계정에관리자권한을부여합니다pdi293": "기존 계정에 관리자 권한을 부여합니다.</p> </div> {/* 액션 버튼들 */} <div className=",
      "관리자권한부여buttonbut294": "/> )} 관리자 권한 부여 </button> <button onClick={checkAdminStatus} disabled={loading} className=",
      "현재상태확인buttondiv295": "현재 상태 확인 </button> </div> {/* 결과 표시 */} {error && ( <div className=",
      "오류spandivpclassname296": "오류</span> </div> <p className=",
      "성공297": "성공",
      "정보298": "정보",
      "변경내용h4divclassname299": "변경 내용:</h4> <div className=",
      "이전span관리자권한resultbefo300": "이전:</span> 관리자 권한 {result.before.isAdmin ?",
      "비활성화301": "비활성화",
      "이후span관리자권한resultafte302": "이후:</span> 관리자 권한 {result.after.isAdmin ?",
      "비활성화303": "비활성화",
      "관리자계정상태h4divclassname304": "관리자 계정 상태:</h4> <div className=",
      "이메일spanresultadminstat305": "이메일:</span> {result.admin_status.email}</p> <p><span className=",
      "이름spanresultadminstatu306": "이름:</span> {result.admin_status.name}</p> <p><span className=",
      "상태spanresultadminstatu307": "상태:</span> {result.admin_status.status}</p> <p><span className=",
      "생성일spannewdateresulta308": "생성일:</span> {new Date(result.admin_status.created).toLocaleString(",
      "수정일spannewdateresulta309": "수정일:</span> {new Date(result.admin_status.updated).toLocaleString(",
      "로그인정보h4divclassname310": "🎉 로그인 정보:</h4> <div className=",
      "이메일spanresultlogininfo311": "이메일:</span> {result.login_info.email}</p> <p><span className=",
      "비밀번호spanresultlogininf312": "비밀번호:</span> {result.login_info.password}</p> <p className=",
      "이제로그인하여관리자대시보드에접근할수있습니다313": "이제 로그인하여 관리자 대시보드에 접근할 수 있습니다!</p> </div> </div> )} </div> )} {/* 로그인 정보 */} <div className=",
      "관리자로그인정보h3divclassn314": "📝 관리자 로그인 정보</h3> <div className=",
      "이메일spannaviadminnavidoce315": "이메일:</span> naviadmin@navidocent.com</p> <p><span className=",
      "대시보드spanahref318": "대시보드:</span> <a href=",
      "admindashboardapd319": "/admin/dashboard </a> </p> </div> </div> {/* 홈으로 돌아가기 */} <div className=",
      "resultsuccess성공정320": "}> {result.success ? '성공' : '정보'} </span> </div> <p className={",
      "정보321": ": '정보",
      "비활성화322": ": '비활성화",
      "비활성화323": ": '비활성화",
      "nullconstchecksessionstat324": "(null); const checkSessionStatus = async () => { setLoading(true); setError(null); setResult(null); try { const response = await fetch('/api/admin/refresh-session', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (response.ok) { setResult(data); } else { setError(data.error || '세션 확인 실패'); } } catch (err) { setError('네트워크 오류가 발생했습니다.'); } finally { setLoading(false); } }; const forceLogout = async () => { setLoading(true); try { // 클라이언트 사이드 완전 정리 localStorage.clear(); sessionStorage.clear(); // NextAuth signOut await signOut({ callbackUrl: '/auth/signin', redirect: true }); } catch (error) { console.error('로그아웃 중 오류:', error); // 강제 리다이렉트 window.location.href = '/auth/signin'; } finally { setLoading(false); } }; if (status === 'loading') { return (",
      "세션갱신도구325": "세션 갱신 도구",
      "관리자권한변경후세션을갱신합니다326": "관리자 권한 변경 후 세션을 갱신합니다.",
      "현재세션정보session327": "{/* 현재 세션 정보 */} {session && (",
      "현재세션정보328": "현재 세션 정보:",
      "이메일329": "이메일:",
      "이름330": "이름:",
      "관리자권한331": "관리자 권한:",
      "sessionuserasanyisadmi332": "{(session.user as any)?.isAdmin ? '활성화' : '비활성화'}",
      "액션버튼들333": ")} {/* 액션 버튼들 */}",
      "세션상태확인334": ")} 세션 상태 확인",
      "완전로그아웃및재로그인335": ")} 완전 로그아웃 및 재로그인",
      "오류337": "오류",
      "세션상태분석338": "세션 상태 분석",
      "현재세션339": "현재 세션:",
      "이메일340": "이메일:",
      "관리자권한341": "관리자 권한:",
      "resultcurrentsessionisadmi342": "{result.current_session.isAdmin ? '활성화' : '비활성화'}",
      "데이터베이스343": "데이터베이스:",
      "이메일344": "이메일:",
      "관리자권한345": "관리자 권한:",
      "resultdatabaseuserisadmin346": "{result.database_user.isAdmin ? '활성화' : '비활성화'}",
      "재로그인필요347": "⚠️ 재로그인 필요",
      "세션과데이터베이스의권한정보가다릅니다348": "세션과 데이터베이스의 권한 정보가 다릅니다.",
      "안내349": ")} {/* 안내 */}",
      "문제해결단계350": "📝 문제 해결 단계",
      "1ldquo세션상태확인rdquo버튼으로351": "1. &ldquo;세션 상태 확인&rdquo; 버튼으로 현재 상태 확인",
      "2재로그인이필요하다면ldquo완전로그아웃352": "2. 재로그인이 필요하다면 &ldquo;완전 로그아웃 및 재로그인&rdquo; 클릭",
      "3로그인페이지에서다시로그인353": "3. 로그인 페이지에서 다시 로그인",
      "4마이페이지에서관리자버튼확인354": "4. 마이페이지에서 관리자 버튼 확인",
      "홈으로돌아가기355": "{/* 홈으로 돌아가기 */}",
      "홈으로돌아가기356": "← 홈으로 돌아가기",
      "세션확인실패357": "세션 확인 실패",
      "네트워크오류가발생했습니다358": "네트워크 오류가 발생했습니다.",
      "로그아웃중오류359": "로그아웃 중 오류:",
      "세션갱신도구h1pclassname360": "세션 갱신 도구</h1> <p className=",
      "관리자권한변경후세션을갱신합니다pd361": "관리자 권한 변경 후 세션을 갱신합니다.</p> </div> {/* 현재 세션 정보 */} {session && ( <div className=",
      "현재세션정보h3divclassname362": "현재 세션 정보:</h3> <div className=",
      "이메일spansessionuserema363": "이메일:</span> {session.user?.email}</p> <p><span className=",
      "이름spansessionusername364": "이름:</span> {session.user?.name}</p> <p><span className=",
      "관리자권한spanspanclassname365": "관리자 권한:</span> <span className={`ml-1 px-2 py-1 rounded-full text-xs font-medium ${ (session.user as any)?.isAdmin ?",
      "활성화366": "활성화",
      "비활성화367": "비활성화",
      "세션상태확인buttonbutt368": "/> )} 세션 상태 확인 </button> <button onClick={forceLogout} disabled={loading} className=",
      "완전로그아웃및재로그인button369": "/> )} 완전 로그아웃 및 재로그인 </button> </div> {/* 결과 표시 */} {error && ( <div className=",
      "오류spandivpclassname370": "오류</span> </div> <p className=",
      "세션상태분석spandiv371": "}`}> 세션 상태 분석 </span> </div> <p className={`mb-3 ${ result.success ?",
      "현재세션h4divclassname372": "현재 세션:</h4> <div className=",
      "이메일spanresultcurrentse373": "이메일:</span> {result.current_session.email}</p> <p><span className=",
      "관리자권한spanspanclassname374": "관리자 권한:</span> <span className={`ml-1 px-2 py-1 rounded-full text-xs font-medium ${ result.current_session.isAdmin ?",
      "활성화375": "활성화",
      "비활성화376": "비활성화",
      "데이터베이스h4divclassname377": "데이터베이스:</h4> <div className=",
      "이메일spanresultdatabaseu378": "이메일:</span> {result.database_user.email}</p> <p><span className=",
      "관리자권한spanspanclassname379": "관리자 권한:</span> <span className={`ml-1 px-2 py-1 rounded-full text-xs font-medium ${ result.database_user.isAdmin ?",
      "활성화380": "활성화",
      "비활성화381": "비활성화",
      "재로그인필요h4pclassname382": "⚠️ 재로그인 필요</h4> <p className=",
      "세션과데이터베이스의권한정보가다릅니다p383": "세션과 데이터베이스의 권한 정보가 다릅니다.</p> {result.instructions && ( <ol className=",
      "resultinstructionsmapinst384": "{result.instructions.map((instruction: string, index: number) => ( <li key={index}>{instruction}</li> ))} </ol> )} </div> )} </div> )} </div> )} {/* 안내 */} <div className=",
      "문제해결단계h3olclassname385": "📝 문제 해결 단계</h3> <ol className=",
      "li1ldquo세션상태확인rdquo386": "<li>1. &ldquo;세션 상태 확인&rdquo; 버튼으로 현재 상태 확인</li> <li>2. 재로그인이 필요하다면 &ldquo;완전 로그아웃 및 재로그인&rdquo; 클릭</li> <li>3. 로그인 페이지에서 다시 로그인</li> <li>4. 마이페이지에서 관리자 버튼 확인</li> </ol> </div> {/* 홈으로 돌아가기 */} <div className=",
      "sessionuserasanyisa387": "}> {(session.user as any)?.isAdmin ? '활성화' : '비활성화'} </span> </p> </div> </div> )} {/* 액션 버튼들 */} <div className=\"flex flex-col space-y-4 mb-8\"> <button onClick={checkSessionStatus} disabled={loading} className=\"w-full bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\" > {loading ? ( <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div> ) : ( <Info className=\"h-5 w-5 mr-2\" /> )} 세션 상태 확인 </button> <button onClick={forceLogout} disabled={loading} className=\"w-full bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\" > {loading ? ( <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div> ) : ( <LogOut className=\"h-5 w-5 mr-2\" /> )} 완전 로그아웃 및 재로그인 </button> </div> {/* 결과 표시 */} {error && ( <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg\"> <div className=\"flex items-center\"> <AlertCircle className=\"h-5 w-5 text-red-500 mr-2\" /> <span className=\"text-red-700 font-medium\">오류</span> </div> <p className=\"text-red-600 mt-1\">{error}</p> </div> )} {result && ( <div className={",
      "세션상태분석spandivp388": "}> 세션 상태 분석 </span> </div> <p className={",
      "resultmessagepresu389": "}> {result.message} </p> {result.current_session && result.database_user && ( <div className=\"space-y-3\"> <div className=\"bg-white p-3 rounded border\"> <h4 className=\"font-medium text-gray-900 mb-2\">현재 세션:</h4> <div className=\"text-sm space-y-1\"> <p><span className=\"font-medium\">이메일:</span> {result.current_session.email}</p> <p><span className=\"font-medium\">관리자 권한:</span> <span className={",
      "resultcurrentsessionisa390": "}> {result.current_session.isAdmin ? '활성화' : '비활성화'} </span> </p> </div> </div> <div className=\"bg-white p-3 rounded border\"> <h4 className=\"font-medium text-gray-900 mb-2\">데이터베이스:</h4> <div className=\"text-sm space-y-1\"> <p><span className=\"font-medium\">이메일:</span> {result.database_user.email}</p> <p><span className=\"font-medium\">관리자 권한:</span> <span className={",
      "error강제리다이렉트window391": ":', error); // 강제 리다이렉트 window.location.href =",
      "비활성화392": ": '비활성화",
      "비활성화393": ": '비활성화",
      "비활성화394": ": '비활성화",
      "nullconsttestadminsetup395": "(null); const testAdminSetup = async () => { setLoading(true); setError(null); setResult(null); try { const response = await fetch('/api/admin/setup', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (response.ok) { setResult(data); } else { setError(data.message || '관리자 계정 설정 실패'); } } catch (err) { setError('네트워크 오류가 발생했습니다.'); } finally { setLoading(false); } }; const checkAdminStatus = async () => { setLoading(true); setError(null); setResult(null); try { const response = await fetch('/api/admin/setup', { method: 'GET' }); const data = await response.json(); setResult(data); } catch (err) { setError('상태 확인 중 오류가 발생했습니다.'); } finally { setLoading(false); } }; return (",
      "관리자계정설정테스트396": "관리자 계정 설정 테스트",
      "관리자계정을생성하고상태를확인할수있습니다397": "관리자 계정을 생성하고 상태를 확인할 수 있습니다.",
      "액션버튼들398": "{/* 액션 버튼들 */}",
      "관리자계정생성업데이트399": ")} 관리자 계정 생성/업데이트",
      "상태확인400": "상태 확인",
      "오류402": "오류",
      "resultsuccess성공정보403": "{result.success ? '성공' : '정보'}",
      "관리자정보404": "관리자 정보:",
      "이메일405": "이메일:",
      "이름406": "이름:",
      "관리자권한407": "관리자 권한:",
      "resultadminisadmin활성화408": "{result.admin.isAdmin ? '활성화' : '비활성화'}",
      "상태정보409": "상태 정보:",
      "계정존재410": "계정 존재:",
      "resultexists예아니오411": "{result.exists ? '예' : '아니오'}",
      "관리자권한412": "관리자 권한:",
      "resultisadmin활성화비활성413": "{result.isAdmin ? '활성화' : '비활성화'}",
      "로그인정보414": ")} {/* 로그인 정보 */}",
      "관리자로그인정보415": "📝 관리자 로그인 정보",
      "이메일416": "이메일:",
      "홈으로돌아가기419": "{/* 홈으로 돌아가기 */}",
      "홈으로돌아가기420": "← 홈으로 돌아가기",
      "관리자계정설정실패421": "관리자 계정 설정 실패",
      "네트워크오류가발생했습니다422": "네트워크 오류가 발생했습니다.",
      "상태확인중오류가발생했습니다423": "상태 확인 중 오류가 발생했습니다.",
      "관리자계정설정테스트h1pclassnam424": "관리자 계정 설정 테스트</h1> <p className=",
      "관리자계정을생성하고상태를확인할수있습니다425": "관리자 계정을 생성하고 상태를 확인할 수 있습니다.</p> </div> {/* 액션 버튼들 */} <div className=",
      "관리자계정생성업데이트button426": "/> )} 관리자 계정 생성/업데이트 </button> <button onClick={checkAdminStatus} disabled={loading} className=",
      "상태확인buttondiv결과427": "상태 확인 </button> </div> {/* 결과 표시 */} {error && ( <div className=",
      "오류spandivpclassname428": "오류</span> </div> <p className=",
      "성공429": "성공",
      "정보430": "정보",
      "관리자정보h4divclassname431": "관리자 정보:</h4> <div className=",
      "이메일spanresultadminemai432": "이메일:</span> {result.admin.email}</p> <p><span className=",
      "이름spanresultadminname433": "이름:</span> {result.admin.name}</p> <p><span className=",
      "관리자권한spanspanclassname434": "관리자 권한:</span> <span className={`ml-1 px-2 py-1 rounded-full text-xs font-medium ${ result.admin.isAdmin ?",
      "활성화435": "활성화",
      "비활성화436": "비활성화",
      "상태정보h4divclassname437": "상태 정보:</h4> <div className=",
      "계정존재spanspanclassname438": "계정 존재:</span> <span className={`ml-1 px-2 py-1 rounded-full text-xs font-medium ${ result.exists ?",
      "아니오439": "아니오",
      "관리자권한spanspanclassname440": "관리자 권한:</span> <span className={`ml-1 px-2 py-1 rounded-full text-xs font-medium ${ result.isAdmin ?",
      "활성화441": "활성화",
      "비활성화442": "비활성화",
      "관리자로그인정보h3divclassn443": "📝 관리자 로그인 정보</h3> <div className=",
      "이메일spannaviadminnavidoce444": "이메일:</span> naviadmin@navidocent.com</p> <p><span className=",
      "resultsuccess성공정448": "}> {result.success ? '성공' : '정보'} </span> </div> <p className={",
      "resultmessagepresu449": "}> {result.message} </p> {result.admin && ( <div className=\"bg-white p-3 rounded border\"> <h4 className=\"font-medium text-gray-900 mb-2\">관리자 정보:</h4> <div className=\"text-sm space-y-1\"> <p><span className=\"font-medium\">ID:</span> {result.admin.id}</p> <p><span className=\"font-medium\">이메일:</span> {result.admin.email}</p> <p><span className=\"font-medium\">이름:</span> {result.admin.name}</p> <p><span className=\"font-medium\">관리자 권한:</span> <span className={",
      "resultadminisadmin활성450": "}> {result.admin.isAdmin ? '활성화' : '비활성화'} </span> </p> </div> </div> )} {result.exists !== undefined && ( <div className=\"bg-white p-3 rounded border mt-3\"> <h4 className=\"font-medium text-gray-900 mb-2\">상태 정보:</h4> <div className=\"text-sm space-y-1\"> <p><span className=\"font-medium\">계정 존재:</span> <span className={",
      "resultexists예아니오451": "}> {result.exists ? '예' : '아니오'} </span> </p> <p><span className=\"font-medium\">관리자 권한:</span> <span className={",
      "정보452": ": '정보",
      "비활성화453": ": '비활성화",
      "아니오454": ": '아니오",
      "비활성화455": ": '비활성화",
      "ai여행가이드인공지능과함께하는스마트한여행456": "AI여행 가이드 | 인공지능과 함께하는 스마트한 여행 TripRadio.AI",
      "ai가계획부터해설까지인공지능과함께하는완457": "🤖 AI가 계획부터 해설까지! 인공지능과 함께하는 완전히 새로운 스마트 여행 경험을 만나보세요. 개인 맞춤형 AI여행 가이드 서비스",
      "ai여행458": "AI여행",
      "ai여행가이드459": "AI여행가이드",
      "인공지능여행460": "인공지능여행",
      "스마트여행461": "스마트여행",
      "ai가이드462": "AI가이드",
      "ai투어463": "AI투어",
      "인공지능가이드464": "인공지능가이드",
      "스마트가이드465": "스마트가이드",
      "ai여행앱466": "AI여행앱",
      "ai관광467": "AI관광",
      "트립라디오ai468": "트립라디오AI",
      "ai여행469": "AI여행",
      "ai오디오가이드앱추천1위무료여행해설t478": "AI 오디오가이드 앱 추천 1위 | 무료 여행 해설 TripRadio.AI",
      "전세계어디서든ai가실시간으로만들어주는개479": "🎧 전 세계 어디서든 AI가 실시간으로 만들어주는 개인 맞춤형 오디오가이드! 도슨트 없이도 전문가급 해설을 무료로 경험해보세요 ✈️",
      "오디오가이드480": "오디오가이드",
      "ai오디오가이드481": "AI오디오가이드",
      "무료오디오가이드482": "무료오디오가이드",
      "여행오디오가이드483": "여행오디오가이드",
      "박물관오디오가이드484": "박물관오디오가이드",
      "미술관오디오가이드485": "미술관오디오가이드",
      "오디오가이드앱486": "오디오가이드앱",
      "음성가이드487": "음성가이드",
      "트립라디오ai488": "트립라디오AI",
      "오디오가이드489": "오디오가이드",
      "googlesigninnullemailve493": "({ googleSignIn: null, emailVerification: null, autoVerification: null, completionRedirect: null }); // 컴포넌트 마운트 상태 추적 const isMountedRef = useRef(true); // 폼 데이터 const [formData, setFormData] = useState({ email: '', password: '', confirmPassword: '', name: '', verificationCode: '' }); // 상태 관리 const [errors, setErrors] = useState",
      "constemailsentsetema494": "({}); const [emailSent, setEmailSent] = useState(false); const [countdown, setCountdown] = useState(0); const [emailVerified, setEmailVerified] = useState(false); const [codeInputs, setCodeInputs] = useState(['', '', '', '', '', '']); const router = useRouter(); const searchParams = useSearchParams(); const callbackUrl = searchParams.get('callbackUrl') || '/'; // 컴포넌트 정리 함수 const clearAllTimeouts = useCallback(() => { Object.values(timeoutRefs.current).forEach(timeout => { if (timeout) clearTimeout(timeout); }); timeoutRefs.current = { googleSignIn: null, emailVerification: null, autoVerification: null, completionRedirect: null }; }, []); // 컴포넌트 언마운트 시 정리 useEffect(() => { return () => { isMountedRef.current = false; clearAllTimeouts(); }; }, [clearAllTimeouts]); // 안전한 상태 업데이트 헬퍼 const safeSetState = useCallback((stateSetter: () => void) => { if (isMountedRef.current) { stateSetter(); } }, []); // 개선된 로딩 상태 관리 const setLoadingState = useCallback((key: keyof typeof loadingStates, value: boolean) => { safeSetState(() => { setLoadingStates(prev => ({ ...prev, [key]: value })); }); }, [safeSetState]); // 통합 로딩 상태 const isLoading = Object.values(loadingStates).some(loading => loading); // 카운트다운 타이머 (메모리 누수 방지) useEffect(() => { if (countdown > 0) { const timer = setTimeout(() => { safeSetState(() => setCountdown(countdown - 1)); }, 1000); return () => clearTimeout(timer); } // 카운트다운이 0 이하일 때도 cleanup 함수 반환 return () => {}; }, [countdown, safeSetState]); // 개선된 회원가입 완료 (메모리 안전) const handleCompleteSignup = useCallback(async (): Promise",
      "setloadingstatesignup495": "=> { setLoadingState('signup', true); safeSetState(() => setErrors({})); try { const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), 15000); const response = await fetch('/api/auth/register', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email: formData.email, password: formData.password, name: formData.name, verificationCode: formData.verificationCode }), signal: controller.signal }); clearTimeout(timeoutId); const data = await response.json(); if (!response.ok) { safeSetState(() => { setErrors({ general: data.error || t('auth.signupFailed') || '회원가입에 실패했습니다.' }); setSignupStep('form'); }); } else { safeSetState(() => { setSignupStep('completed'); setErrors({ success: String(t('auth.signupSuccess')) || '🎉 회원가입이 완료되었습니다!' }); }); // 안전한 리다이렉트 timeoutRefs.current.completionRedirect = setTimeout(() => { if (isMountedRef.current) { safeSetState(() => { setAuthMode('signin'); setSignupStep('form'); setFormData(prev => ({ ...prev, password: '', confirmPassword: '', verificationCode: '' })); }); timeoutRefs.current.completionRedirect = null; } }, 4000); } } catch (error) { if ((error as Error).name === 'AbortError') { safeSetState(() => setErrors({ general: String(t('auth.requestTimeout')) || '요청 시간이 초과되었습니다.' })); } else { safeSetState(() => setErrors({ general: String(t('auth.networkError')) || '네트워크 오류가 발생했습니다.' })); } safeSetState(() => setSignupStep('form')); } finally { setLoadingState('signup', false); } }, [formData, t, safeSetState, setLoadingState, setAuthMode, setSignupStep]); // 개선된 인증 코드 확인 (메모리 안전) const handleVerifyCode = useCallback(async (): Promise",
      "ifformdataemailsa498": "=> { if (!formData.email) { safeSetState(() => setErrors({ email: String(t('auth.emailRequired')) || '이메일을 입력해주세요.' })); return; } const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; if (!emailRegex.test(formData.email)) { safeSetState(() => setErrors({ email: String(t('auth.invalidEmailFormat')) || '올바른 이메일 형식을 입력해주세요.' })); return; } setLoadingState('emailVerification', true); safeSetState(() => setErrors({})); try { const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), 10000); // 10초 타임아웃 const response = await fetch('/api/auth/email-verification', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email: formData.email, action: 'send_code' }), signal: controller.signal }); clearTimeout(timeoutId); const data = await response.json(); if (!response.ok) { safeSetState(() => setErrors({ email: data.error || String(t('auth.emailSendFailed')) || '이메일 전송에 실패했습니다.' })); } else { safeSetState(() => { setEmailSent(true); setCountdown(600); setSignupStep('email_verification'); setErrors({ success: String(t('auth.verificationCodeSent')) || '인증 코드가 이메일로 전송되었습니다.' }); }); } } catch (error) { if ((error as Error).name === 'AbortError') { safeSetState(() => setErrors({ email: String(t('auth.requestTimeout')) || '요청 시간이 초과되었습니다.' })); } else { safeSetState(() => setErrors({ email: String(t('auth.networkError')) || '네트워크 오류가 발생했습니다.' })); } } finally { setLoadingState('emailVerification', false); } }, [formData.email, t, safeSetState, setLoadingState]); // 개선된 인증 코드 재전송 const handleResendCode = useCallback(async (): Promise",
      "ifloadingstatesgoogles500": "=> { if (loadingStates.googleSignIn) return; // 중복 클릭 방지 setLoadingState('googleSignIn', true); safeSetState(() => setErrors({})); try { console.log('🔵 Google 로그인 시작...'); // 브라우저 호환성 확인 if (typeof window !== 'undefined' && (!window.crypto || !window.crypto.subtle)) { throw new Error(String(t('auth.browserNotSupported')) || '브라우저가 최신 보안 기능을 지원하지 않습니다.'); } // 팝업 차단 여부 확인 (실제 팝업 테스트 제거) // 팝업 차단은 signIn 시점에 NextAuth가 처리하도록 함 // 안전한 타임아웃 설정 if (timeoutRefs.current.googleSignIn) { clearTimeout(timeoutRefs.current.googleSignIn); } timeoutRefs.current.googleSignIn = setTimeout(() => { if (isMountedRef.current) { safeSetState(() => { setErrors({ general: String(t('auth.loginTimeout')) || '로그인 요청이 시간 초과되었습니다.' }); }); setLoadingState('googleSignIn', false); timeoutRefs.current.googleSignIn = null; } }, 30000); const result = await signIn('google', { callbackUrl: callbackUrl || '/', redirect: false }); // 타임아웃 정리 if (timeoutRefs.current.googleSignIn) { clearTimeout(timeoutRefs.current.googleSignIn); timeoutRefs.current.googleSignIn = null; } if (!isMountedRef.current) return; // 컴포넌트 언마운트 확인 if (result?.error) { console.error('❌ Google 로그인 오류:', result.error); const getErrorMessage = (error: string): string => { const errorMessages: Record",
      "oauthsigninstringta501": "= { 'OAuthSignin': String(t('auth.oauthSigninError')) || 'Google 인증 서버 통신 실패', 'OAuthCallback': String(t('auth.oauthCallbackError')) || 'Google 콜백 처리 실패', 'OAuthCreateAccount': String(t('auth.accountCreateError')) || '계정 생성 실패', 'OAuthAccountNotLinked': String(t('auth.accountNotLinked')) || '이미 다른 방법으로 가입된 이메일', 'SessionRequired': String(t('auth.sessionRequired')) || '세션 필요' }; return errorMessages[error] || String(t('auth.googleSigninFailed')) || 'Google 로그인 실패'; }; safeSetState(() => setErrors({ general: getErrorMessage(result.error || 'Unknown') })); } else if (result?.ok) { console.log('✅ Google 로그인 성공'); if (typeof window !== 'undefined') { window.location.href = callbackUrl || '/'; } } else if (result?.url) { if (typeof window !== 'undefined') { window.location.href = result.url; } } else { // OAuth 제공자의 경우 초기 응답에서 ok: false, url: null 일 수 있음 // 이는 OAuth 리다이렉트 과정의 정상적인 부분이므로 에러로 처리하지 않음 console.log('📝 Google OAuth 진행 중... (ok: false, url: null은 정상적인 OAuth 플로우)'); // 에러 메시지 표시하지 않고 OAuth 프로세스가 자연스럽게 진행되도록 함 } } catch (error) { console.error('❌ Google 로그인 예외:', error); // 타임아웃 정리 if (timeoutRefs.current.googleSignIn) { clearTimeout(timeoutRefs.current.googleSignIn); timeoutRefs.current.googleSignIn = null; } safeSetState(() => setErrors({ general: error instanceof Error ? error.message : String(t('auth.networkError')) || '네트워크 오류' })); } finally { setLoadingState('googleSignIn', false); } }, [loadingStates.googleSignIn, callbackUrl, t, setLoadingState, safeSetState]); // 개선된 일반 로그인 const handleSignIn = useCallback(async (e: React.FormEvent): Promise",
      "회원가입완료506": "회원가입 완료!",
      "잠시후로그인페이지로이동합니다509": "잠시 후 로그인 페이지로 이동합니다...",
      "이메일인증단계authmode510": ")} {/* 이메일 인증 단계 */} {authMode === 'signup' && signupStep === 'email_verification' && (",
      "이메일인증511": "이메일 인증",
      "인증코드6자리를입력하세요514": "인증 코드 6자리를 입력하세요",
      "타이머및재전송515": "{/* 타이머 및 재전송 */}",
      "남은시간formatcountdowncountd516": "남은 시간: {formatCountdown(countdown)}",
      "인증코드재전송518": "인증 코드 재전송",
      "회원가입폼으로돌아가기520": "회원가입 폼으로 돌아가기",
      "회원가입시523": "회원가입 시{' '}",
      "및524": "{' '}및{' '}",
      "에동의하는것으로간주됩니다525": "에 동의하는 것으로 간주됩니다",
      "컴포넌트정리함수constclearall529": "; // 컴포넌트 정리 함수 const clearAllTimeouts = useCallback(() => { Object.values(timeoutRefs.current).forEach(timeout => { if (timeout) clearTimeout(timeout); }); timeoutRefs.current = { googleSignIn: null, emailVerification: null, autoVerification: null, completionRedirect: null }; }, []); // 컴포넌트 언마운트 시 정리 useEffect(() => { return () => { isMountedRef.current = false; clearAllTimeouts(); }; }, [clearAllTimeouts]); // 안전한 상태 업데이트 헬퍼 const safeSetState = useCallback((stateSetter: () => void) => { if (isMountedRef.current) { stateSetter(); } }, []); // 개선된 로딩 상태 관리 const setLoadingState = useCallback((key: keyof typeof loadingStates, value: boolean) => { safeSetState(() => { setLoadingStates(prev => ({ ...prev, [key]: value })); }); }, [safeSetState]); // 통합 로딩 상태 const isLoading = Object.values(loadingStates).some(loading => loading); // 카운트다운 타이머 (메모리 누수 방지) useEffect(() => { if (countdown > 0) { const timer = setTimeout(() => { safeSetState(() => setCountdown(countdown - 1)); }, 1000); return () => clearTimeout(timer); } // 카운트다운이 0 이하일 때도 cleanup 함수 반환 return () => {}; }, [countdown, safeSetState]); // 개선된 회원가입 완료 (메모리 안전) const handleCompleteSignup = useCallback(async (): Promise<void> => { setLoadingState(",
      "회원가입에실패했습니다530": "회원가입에 실패했습니다.",
      "요청시간이초과되었습니다532": "요청 시간이 초과되었습니다.",
      "네트워크오류가발생했습니다533": "네트워크 오류가 발생했습니다.",
      "인증에실패했습니다536": "인증에 실패했습니다.",
      "이메일인증이완료되었습니다538": "이메일 인증이 완료되었습니다!",
      "요청시간이초과되었습니다539": "요청 시간이 초과되었습니다.",
      "네트워크오류가발생했습니다540": "네트워크 오류가 발생했습니다.",
      "falseformdataemail541": ", false); } }, [formData.email, formData.verificationCode, t, safeSetState, setLoadingState, handleCompleteSignup]); // 개선된 인증코드 입력 핸들러 const handleCodeChange = useCallback((index: number, value: string) => { if (value.length > 1) return; const newInputs = [...codeInputs]; newInputs[index] = value; setCodeInputs(newInputs); // 자동 포커스 이동 (서버사이드 렌더링 안전) if (value && index < 5 && typeof document !==",
      "constnextinputdocument542": ") { const nextInput = document.getElementById(`code-${index + 1}`); nextInput?.focus(); } // 전체 코드 업데이트 const fullCode = newInputs.join(",
      "setformdataprevp543": "); setFormData(prev => ({ ...prev, verificationCode: fullCode })); // 6자리 완성 시 자동 검증 (메모리 안전) if (fullCode.length === 6) { // 이전 타이머 정리 if (timeoutRefs.current.autoVerification) { clearTimeout(timeoutRefs.current.autoVerification); } timeoutRefs.current.autoVerification = setTimeout(() => { if (isMountedRef.current) { handleVerifyCode(); timeoutRefs.current.autoVerification = null; } }, 500); } }, [codeInputs, handleVerifyCode]); // 개선된 키보드 핸들러 (접근성 포함) const handleKeyDown = useCallback((index: number, e: React.KeyboardEvent) => { if (typeof document ===",
      "tab키자연스러운이동허용break544": ": // Tab 키 자연스러운 이동 허용 break; case",
      "epreventdefaultifinde545": ": e.preventDefault(); if (index < 5) { const nextInput = document.getElementById(`code-${index + 1}`); nextInput?.focus(); } break; } }, [codeInputs]); // 개선된 이메일 인증 코드 전송 const handleSendVerificationCode = useCallback(async (): Promise<void> => { if (!formData.email) { safeSetState(() => setErrors({ email: String(t(",
      "이메일전송에실패했습니다549": "이메일 전송에 실패했습니다.",
      "인증코드가이메일로전송되었습니다550": "인증 코드가 이메일로 전송되었습니다.",
      "요청시간이초과되었습니다551": "요청 시간이 초과되었습니다.",
      "네트워크오류가발생했습니다552": "네트워크 오류가 발생했습니다.",
      "falseformdataemail553": ", false); } }, [formData.email, t, safeSetState, setLoadingState]); // 개선된 인증 코드 재전송 const handleResendCode = useCallback(async (): Promise<void> => { safeSetState(() => { setCodeInputs([",
      "google로그인시작555": "🔵 Google 로그인 시작...",
      "브라우저가최신보안기능을지원하지않습니다556": "브라우저가 최신 보안 기능을 지원하지 않습니다.",
      "로그인요청이시간초과되었습니다557": "로그인 요청이 시간 초과되었습니다.",
      "redirectfalse타임아웃558": ", redirect: false }); // 타임아웃 정리 if (timeoutRefs.current.googleSignIn) { clearTimeout(timeoutRefs.current.googleSignIn); timeoutRefs.current.googleSignIn = null; } if (!isMountedRef.current) return; // 컴포넌트 언마운트 확인 if (result?.error) { console.error(",
      "google인증서버통신실패559": "Google 인증 서버 통신 실패",
      "google콜백처리실패560": "Google 콜백 처리 실패",
      "계정생성실패561": "계정 생성 실패",
      "이미다른방법으로가입된이메일562": "이미 다른 방법으로 가입된 이메일",
      "세션필요563": "세션 필요",
      "google로그인실패564": "Google 로그인 실패",
      "google로그인성공565": "✅ Google 로그인 성공",
      "windowlocationhrefres566": ") { window.location.href = result.url; } } else { // OAuth 제공자의 경우 초기 응답에서 ok: false, url: null 일 수 있음 // 이는 OAuth 리다이렉트 과정의 정상적인 부분이므로 에러로 처리하지 않음 console.log(",
      "에러메시지표시하지않고oauth프로세567": "); // 에러 메시지 표시하지 않고 OAuth 프로세스가 자연스럽게 진행되도록 함 } } catch (error) { console.error(",
      "error타임아웃정리iftimeo568": ", error); // 타임아웃 정리 if (timeoutRefs.current.googleSignIn) { clearTimeout(timeoutRefs.current.googleSignIn); timeoutRefs.current.googleSignIn = null; } safeSetState(() => setErrors({ general: error instanceof Error ? error.message : String(t(",
      "네트워크오류569": "네트워크 오류",
      "falseloadingstates570": ", false); } }, [loadingStates.googleSignIn, callbackUrl, t, setLoadingState, safeSetState]); // 개선된 일반 로그인 const handleSignIn = useCallback(async (e: React.FormEvent): Promise<void> => { e.preventDefault(); setLoadingState(",
      "로그인실패571": "로그인 실패",
      "로그인중오류가발생했습니다572": "로그인 중 오류가 발생했습니다.",
      "falseformdataemail573": ", false); } }, [formData.email, formData.password, callbackUrl, router, t, setLoadingState, safeSetState]); // 개선된 회원가입 폼 제출 const handleSignupForm = useCallback((e: React.FormEvent): void => { e.preventDefault(); safeSetState(() => setErrors({})); // 폼 유효성 검증 const validationErrors: {[key: string]: string} = {}; if (!formData.name.trim()) { validationErrors.name = String(t(",
      "회원가입완료h3pclassname580": "회원가입 완료!</h3> <p className=",
      "strongformdatanamestron581": "<strong>{formData.name}</strong>님, 환영합니다!<br /> 이제 AI 가이드와 함께 특별한 여행을 시작하세요. </p> <div className=",
      "span잠시후로그인페이지로이동합니다582": "/> <span>잠시 후 로그인 페이지로 이동합니다...</span> </div> <div className=",
      "divdivdivstyle583": "}}></div> </div> </div> <style jsx>{` @keyframes loading { from { width: 0%; } to { width: 100%; } } `}</style> </div> )} {/* 이메일 인증 단계 */} {authMode ===",
      "이메일인증h3pclassname584": "이메일 인증</h3> <p className=",
      "strongformdataemailstro585": "<strong>{formData.email}</strong>로<br /> 인증 코드를 전송했습니다. </p> </div> {/* 6자리 인증 코드 입력 */} <div className=",
      "인증코드6자리를입력하세요labeldiv586": "인증 코드 6자리를 입력하세요 </label> <div className=",
      "errorsverificationcode587": "/> {errors.verificationCode} </p> )} </div> {/* 타이머 및 재전송 */} <div className=",
      "span남은시간formatcountdo588": "/> <span>남은 시간: {formatCountdown(countdown)}</span> </div> ) : ( <p className=",
      "span인증코드재전송span590": "}`} /> <span>인증 코드 재전송</span> </button> </div> {/* 이전 단계로 돌아가기 */} <div className=",
      "span회원가입폼으로돌아가기span591": "/> <span>회원가입 폼으로 돌아가기</span> </button> </div> </div> )} {/* 로그인 폼 */} {authMode ===",
      "buttonpdivdiv592": ")} </button> </p> </div> </div> )} {/* 회원가입 폼 */} {authMode ===",
      "회원가입시593": "회원가입 시{",
      "및594": "}및{",
      "asstringspan에동의하는것으595": ") as string} </span> 에 동의하는 것으로 간주됩니다 </p> </div> </div> )} </div> {/* Security Badge */} <div className=",
      "nextinputfocus전체596": "); nextInput?.focus(); } // 전체 코드 업데이트 const fullCode = newInputs.join(''); setFormData(prev => ({ ...prev, verificationCode: fullCode })); // 6자리 완성 시 자동 검증 (메모리 안전) if (fullCode.length === 6) { // 이전 타이머 정리 if (timeoutRefs.current.autoVerification) { clearTimeout(timeoutRefs.current.autoVerification); } timeoutRefs.current.autoVerification = setTimeout(() => { if (isMountedRef.current) { handleVerifyCode(); timeoutRefs.current.autoVerification = null; } }, 500); } }, [codeInputs, handleVerifyCode]); // 개선된 키보드 핸들러 (접근성 포함) const handleKeyDown = useCallback((index: number, e: React.KeyboardEvent) => { if (typeof document === 'undefined') return; switch (e.key) { case 'Backspace': if (!codeInputs[index] && index > 0) { const prevInput = document.getElementById(",
      "previnputfocusbreak597": "); prevInput?.focus(); } break; case 'Tab': // Tab 키 자연스러운 이동 허용 break; case 'ArrowLeft': e.preventDefault(); if (index > 0) { const prevInput = document.getElementById(",
      "nextinputfocusbreak598": "); nextInput?.focus(); } break; } }, [codeInputs]); // 개선된 이메일 인증 코드 전송 const handleSendVerificationCode = useCallback(async (): Promise<void> => { if (!formData.email) { safeSetState(() => setErrors({ email: String(t('auth.emailRequired')) || '이메일을 입력해주세요.' })); return; } const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; if (!emailRegex.test(formData.email)) { safeSetState(() => setErrors({ email: String(t('auth.invalidEmailFormat')) || '올바른 이메일 형식을 입력해주세요.' })); return; } setLoadingState('emailVerification', true); safeSetState(() => setErrors({})); try { const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), 10000); // 10초 타임아웃 const response = await fetch('/api/auth/email-verification', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email: formData.email, action: 'send_code' }), signal: controller.signal }); clearTimeout(timeoutId); const data = await response.json(); if (!response.ok) { safeSetState(() => setErrors({ email: data.error || String(t('auth.emailSendFailed')) || '이메일 전송에 실패했습니다.' })); } else { safeSetState(() => { setEmailSent(true); setCountdown(600); setSignupStep('email_verification'); setErrors({ success: String(t('auth.verificationCodeSent')) || '인증 코드가 이메일로 전송되었습니다.' }); }); } } catch (error) { if ((error as Error).name === 'AbortError') { safeSetState(() => setErrors({ email: String(t('auth.requestTimeout')) || '요청 시간이 초과되었습니다.' })); } else { safeSetState(() => setErrors({ email: String(t('auth.networkError')) || '네트워크 오류가 발생했습니다.' })); } } finally { setLoadingState('emailVerification', false); } }, [formData.email, t, safeSetState, setLoadingState]); // 개선된 인증 코드 재전송 const handleResendCode = useCallback(async (): Promise<void> => { safeSetState(() => { setCodeInputs(['', '', '', '', '', '']); setFormData(prev => ({ ...prev, verificationCode: '' })); }); await handleSendVerificationCode(); }, [handleSendVerificationCode, safeSetState]); // 개선된 Google 로그인 (메모리 누수 방지) const handleGoogleSignIn = useCallback(async (): Promise<void> => { if (loadingStates.googleSignIn) return; // 중복 클릭 방지 setLoadingState('googleSignIn', true); safeSetState(() => setErrors({})); try { console.log('🔵 Google 로그인 시작...'); // 브라우저 호환성 확인 if (typeof window !== 'undefined' && (!window.crypto || !window.crypto.subtle)) { throw new Error(String(t('auth.browserNotSupported')) || '브라우저가 최신 보안 기능을 지원하지 않습니다.'); } // 팝업 차단 여부 확인 (실제 팝업 테스트 제거) // 팝업 차단은 signIn 시점에 NextAuth가 처리하도록 함 // 안전한 타임아웃 설정 if (timeoutRefs.current.googleSignIn) { clearTimeout(timeoutRefs.current.googleSignIn); } timeoutRefs.current.googleSignIn = setTimeout(() => { if (isMountedRef.current) { safeSetState(() => { setErrors({ general: String(t('auth.loginTimeout')) || '로그인 요청이 시간 초과되었습니다.' }); }); setLoadingState('googleSignIn', false); timeoutRefs.current.googleSignIn = null; } }, 30000); const result = await signIn('google', { callbackUrl: callbackUrl || '/', redirect: false }); // 타임아웃 정리 if (timeoutRefs.current.googleSignIn) { clearTimeout(timeoutRefs.current.googleSignIn); timeoutRefs.current.googleSignIn = null; } if (!isMountedRef.current) return; // 컴포넌트 언마운트 확인 if (result?.error) { console.error('❌ Google 로그인 오류:', result.error); const getErrorMessage = (error: string): string => { const errorMessages: Record<string, string> = { 'OAuthSignin': String(t('auth.oauthSigninError')) || 'Google 인증 서버 통신 실패', 'OAuthCallback': String(t('auth.oauthCallbackError')) || 'Google 콜백 처리 실패', 'OAuthCreateAccount': String(t('auth.accountCreateError')) || '계정 생성 실패', 'OAuthAccountNotLinked': String(t('auth.accountNotLinked')) || '이미 다른 방법으로 가입된 이메일', 'SessionRequired': String(t('auth.sessionRequired')) || '세션 필요' }; return errorMessages[error] || String(t('auth.googleSigninFailed')) || 'Google 로그인 실패'; }; safeSetState(() => setErrors({ general: getErrorMessage(result.error || 'Unknown') })); } else if (result?.ok) { console.log('✅ Google 로그인 성공'); if (typeof window !== 'undefined') { window.location.href = callbackUrl || '/'; } } else if (result?.url) { if (typeof window !== 'undefined') { window.location.href = result.url; } } else { // OAuth 제공자의 경우 초기 응답에서 ok: false, url: null 일 수 있음 // 이는 OAuth 리다이렉트 과정의 정상적인 부분이므로 에러로 처리하지 않음 console.log('📝 Google OAuth 진행 중... (ok: false, url: null은 정상적인 OAuth 플로우)'); // 에러 메시지 표시하지 않고 OAuth 프로세스가 자연스럽게 진행되도록 함 } } catch (error) { console.error('❌ Google 로그인 예외:', error); // 타임아웃 정리 if (timeoutRefs.current.googleSignIn) { clearTimeout(timeoutRefs.current.googleSignIn); timeoutRefs.current.googleSignIn = null; } safeSetState(() => setErrors({ general: error instanceof Error ? error.message : String(t('auth.networkError')) || '네트워크 오류' })); } finally { setLoadingState('googleSignIn', false); } }, [loadingStates.googleSignIn, callbackUrl, t, setLoadingState, safeSetState]); // 개선된 일반 로그인 const handleSignIn = useCallback(async (e: React.FormEvent): Promise<void> => { e.preventDefault(); setLoadingState('generalSignIn', true); safeSetState(() => setErrors({})); try { const result = await signIn('credentials', { email: formData.email, password: formData.password, redirect: false, }); if (!isMountedRef.current) return; if (result?.error) { safeSetState(() => setErrors({ general: result.error || String(t('auth.loginFailed')) || '로그인 실패' })); } else if (result?.ok) { router.push(callbackUrl); } } catch (error) { safeSetState(() => setErrors({ general: String(t('auth.loginError')) || '로그인 중 오류가 발생했습니다.' })); } finally { setLoadingState('generalSignIn', false); } }, [formData.email, formData.password, callbackUrl, router, t, setLoadingState, safeSetState]); // 개선된 회원가입 폼 제출 const handleSignupForm = useCallback((e: React.FormEvent): void => { e.preventDefault(); safeSetState(() => setErrors({})); // 폼 유효성 검증 const validationErrors: {[key: string]: string} = {}; if (!formData.name.trim()) { validationErrors.name = String(t('auth.nameRequired')) || '이름을 입력해주세요.'; } if (!formData.email) { validationErrors.email = String(t('auth.emailRequired')) || '이메일을 입력해주세요.'; } if (formData.password.length < 6) { validationErrors.password = String(t('auth.passwordMinLength')) || '비밀번호는 최소 6자리 이상이어야 합니다.'; } if (formData.password !== formData.confirmPassword) { validationErrors.confirmPassword = String(t('auth.passwordsNotMatch')) || '비밀번호가 일치하지 않습니다.'; } if (Object.keys(validationErrors).length > 0) { safeSetState(() => setErrors(validationErrors)); return; } handleSendVerificationCode(); }, [formData, t, safeSetState, handleSendVerificationCode]); // 개선된 입력 핸들러 const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>): void => { const { name, value } = e.target; safeSetState(() => { setFormData(prev => ({ ...prev, [name]: value })); if (errors[name]) { setErrors(prev => ({ ...prev, [name]: '' })); } }); }, [errors, safeSetState]); // 카운트다운 포맷 함수 const formatCountdown = useCallback((seconds: number): string => { const mins = Math.floor(seconds / 60); const secs = seconds % 60; return",
      "divclassnameflexitems599": "}> <div className=\"flex items-center gap-3\"> <div className=\"flex-shrink-0\"> {errors.success ? ( <CheckCircle className=\"w-5 h-5 text-green-600\" /> ) : ( <AlertCircle className=\"w-5 h-5 text-red-600\" /> )} </div> <p className=\"text-sm font-medium\">{errors.success || errors.general}</p> </div> </div> )} {/* Main Card */} <div className=\"bg-white border border-gray-200 rounded-2xl shadow-sm overflow-hidden\"> {/* 회원가입 완료 상태 */} {authMode === 'signup' && signupStep === 'completed' && ( <div className=\"p-12 text-center\"> <div className=\"relative mb-8\"> <div className=\"w-24 h-24 bg-gradient-to-br from-green-100 to-green-50 rounded-full flex items-center justify-center mx-auto relative overflow-hidden\"> <div className=\"absolute inset-0 bg-green-100 rounded-full animate-ping opacity-20\"></div> <CheckCircle className=\"w-12 h-12 text-green-600 relative z-10 animate-bounce\" /> </div> </div> <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">회원가입 완료!</h3> <p className=\"text-gray-600 mb-8 leading-relaxed\"> <strong>{formData.name}</strong>님, 환영합니다!<br /> 이제 AI 가이드와 함께 특별한 여행을 시작하세요. </p> <div className=\"space-y-4\"> <div className=\"flex items-center justify-center space-x-2 text-sm text-gray-500\"> <Timer className=\"w-4 h-4\" /> <span>잠시 후 로그인 페이지로 이동합니다...</span> </div> <div className=\"w-16 h-1 bg-gray-200 rounded-full mx-auto overflow-hidden\"> <div className=\"h-full bg-black rounded-full animate-pulse\" style={{ animation: 'loading 4s ease-in-out forwards' }}></div> </div> </div> <style jsx>{",
      "stylediv이메일인증600": "}</style> </div> )} {/* 이메일 인증 단계 */} {authMode === 'signup' && signupStep === 'email_verification' && ( <div className=\"p-8\"> <div className=\"text-center mb-8\"> <div className=\"w-20 h-20 bg-blue-50 rounded-full flex items-center justify-center mx-auto mb-6 relative\"> <div className={",
      "divmailclassnamew10601": "}></div> <Mail className=\"w-10 h-10 text-blue-600 relative z-10\" /> </div> <h3 className=\"text-xl font-bold text-gray-900 mb-3\">이메일 인증</h3> <p className=\"text-gray-600 text-sm leading-relaxed\"> <strong>{formData.email}</strong>로<br /> 인증 코드를 전송했습니다. </p> </div> {/* 6자리 인증 코드 입력 */} <div className=\"mb-8\"> <label className=\"block text-sm font-medium text-gray-700 mb-4 text-center\"> 인증 코드 6자리를 입력하세요 </label> <div className=\"flex justify-center space-x-3 mb-4\"> {codeInputs.map((value, index) => ( <input key={index} id={",
      "placeholderdiv602": "} placeholder=\"•\" /> ))} </div> {errors.verificationCode && ( <p className=\"text-red-600 text-sm text-center flex items-center justify-center gap-2\"> <AlertCircle className=\"w-4 h-4\" /> {errors.verificationCode} </p> )} </div> {/* 타이머 및 재전송 */} <div className=\"text-center space-y-4\"> {countdown > 0 ? ( <div className=\"flex items-center justify-center space-x-2 text-sm text-gray-600\"> <Timer className=\"w-4 h-4\" /> <span>남은 시간: {formatCountdown(countdown)}</span> </div> ) : ( <p className=\"text-red-600 text-sm\">인증 코드가 만료되었습니다.</p> )} <button onClick={handleResendCode} disabled={isLoading || countdown > 540} className={",
      "span인증코드재전송span603": "} /> <span>인증 코드 재전송</span> </button> </div> {/* 이전 단계로 돌아가기 */} <div className=\"mt-8 pt-6 border-t border-gray-100\"> <button onClick={() => setSignupStep('form')} className=\"w-full text-sm text-gray-500 hover:text-gray-700 transition-colors flex items-center justify-center space-x-2\" > <ArrowLeft className=\"w-4 h-4\" /> <span>회원가입 폼으로 돌아가기</span> </button> </div> </div> )} {/* 로그인 폼 */} {authMode === 'signin' && ( <div className=\"p-8\"> <form onSubmit={handleSignIn} className=\"space-y-5\"> {/* Email Field */} <div> <label className=\"block text-sm font-medium text-gray-700 mb-2\"> {t('auth.email')} </label> <div className=\"relative\"> <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\"> <Mail className=\"h-5 w-5 text-gray-400\" /> </div> <input type=\"email\" name=\"email\" value={formData.email} onChange={handleInputChange} className={",
      "placeholdertauthenteryo604": "} placeholder={t('auth.enterYourPassword') as string} autoComplete=\"current-password\" /> <button type=\"button\" onClick={() => setShowPassword(!showPassword)} className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 transition-colors\" > {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />} </button> </div> {errors.password && <p className=\"text-red-600 text-sm mt-1\">{errors.password}</p>} </div> {/* Sign In Button */} <button type=\"submit\" disabled={isLoading} className=\"w-full bg-black text-white py-3 px-4 rounded-xl font-medium hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-black focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 flex items-center justify-center\" > {isLoading ? ( <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div> ) : ( <> <span>{t('auth.signin')}</span> <ArrowRight className=\"w-4 h-4 ml-2\" /> </> )} </button> </form> {/* Divider */} <div className=\"relative my-6\"> <div className=\"absolute inset-0 flex items-center\"> <div className=\"w-full border-t border-gray-200\"></div> </div> <div className=\"relative flex justify-center text-sm\"> <span className=\"px-4 bg-white text-gray-500\">{t('auth.orContinueWith')}</span> </div> </div> {/* Google Sign In */} <button onClick={handleGoogleSignIn} disabled={isLoading} className=\"w-full flex items-center justify-center px-4 py-3 border border-gray-300 rounded-xl shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-black focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200\" > <svg className=\"w-5 h-5 mr-3\" viewBox=\"0 0 24 24\"> <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/> <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/> <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/> <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/> </svg> {t('auth.loginWithGoogle')} </button> {/* Switch to Sign Up */} <div className=\"mt-6 text-center\"> <p className=\"text-sm text-gray-600\"> {t('auth.noAccount')}{' '} <button onClick={() => setAuthMode('signup')} className=\"font-medium text-black hover:text-gray-800 transition-colors\" > {t('auth.signup')} </button> </p> </div> </div> )} {/* 회원가입 폼 */} {authMode === 'signup' && signupStep === 'form' && ( <div className=\"p-8\"> <form onSubmit={handleSignupForm} className=\"space-y-5\"> {/* Name Field */} <div> <label className=\"block text-sm font-medium text-gray-700 mb-2\"> {t('auth.name')} </label> <div className=\"relative\"> <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\"> <User className=\"h-5 w-5 text-gray-400\" /> </div> <input type=\"text\" name=\"name\" value={formData.name} onChange={handleInputChange} className={",
      "error타임아웃정리iftim605": ":', error); // 타임아웃 정리 if (timeoutRefs.current.googleSignIn) { clearTimeout(timeoutRefs.current.googleSignIn); timeoutRefs.current.googleSignIn = null; } safeSetState(() => setErrors({ general: error instanceof Error ? error.message : String(t(",
      "전세계top100606": "전세계 TOP100",
      "관광명소완벽가이드607": "관광명소 완벽 가이드",
      "세계에서가장아름답고의미있는명소들을ai전문608": "세계에서 가장 아름답고 의미 있는 명소들을 AI 전문 가이드가 생생한 이야기와 함께 안내해드립니다",
      "무료가이드시작609": "무료 가이드 시작",
      "top100명소보기610": "TOP100 명소 보기",
      "왜이명소들이611": "왜 이 명소들이",
      "세계top100일까요612": "세계 TOP100일까요?",
      "역사적가치613": "역사적 가치",
      "인류문명의발전과정을보여주는소중한유산들로구성614": "인류 문명의 발전 과정을 보여주는 소중한 유산들로 구성된 세계적 명소",
      "예술적가치615": "예술적 가치",
      "인간창의성의극한을보여주는건축물과예술작품들의616": "인간 창의성의 극한을 보여주는 건축물과 예술 작품들의 집합체",
      "자연의경이617": "자연의 경이",
      "지구가수억년에걸쳐만들어낸경이로운자연풍경과618": "지구가 수억 년에 걸쳐 만들어낸 경이로운 자연 풍경과 생태계",
      "ai가이드만의619": "AI 가이드만의",
      "특별한경험620": "특별한 경험",
      "전문가수준지식621": "전문가 수준 지식",
      "수천개의전문자료를학습한ai가역사학자예술사622": "수천 개의 전문 자료를 학습한 AI가 역사학자, 예술사가 수준의 깊이 있는 해설 제공",
      "언제든이용가능623": "언제든 이용 가능",
      "시간제약없이24시간언제든당신이원하는속도로624": "시간 제약 없이 24시간 언제든, 당신이 원하는 속도로 각 명소를 깊이 탐험",
      "맞춤형관심사625": "맞춤형 관심사",
      "역사예술건축종교등당신의관심사에따라완626": "역사, 예술, 건축, 종교 등 당신의 관심사에 따라 완전히 다른 관점의 설명",
      "다국어완벽지원627": "다국어 완벽 지원",
      "한국어영어일본어중국어등다양한언어로동일628": "한국어, 영어, 일본어, 중국어 등 다양한 언어로 동일한 품질의 가이드 제공",
      "스마트폰으로간편629": "스마트폰으로 간편",
      "별도장비없이스마트폰만있으면전세계어떤명소든630": "별도 장비 없이 스마트폰만 있으면 전세계 어떤 명소든 전문 가이드 이용",
      "완전무료631": "완전 무료",
      "어떤명소든얼마나오래들어도완전무료로이용할632": "어떤 명소든, 얼마나 오래 들어도 완전 무료로 이용할 수 있는 프리미엄 가이드",
      "대륙별top633": "대륙별 TOP",
      "관광명소634": "관광명소",
      "continent유럽635": "{continent === '유럽' && '🇪🇺'} {continent === '아시아' && '🌏'} {continent === '아메리카' && '🌎'} {continent === '아프리카' && '🌍'} {continent === '오세아니아' && '🇦🇺'} {' '}{continent}",
      "가이드듣기636": "가이드 듣기",
      "이외에도전세계수많은명소의ai가이드를만나보세637": "이 외에도 전세계 수많은 명소의 AI 가이드를 만나보세요",
      "전체명소검색하기638": "전체 명소 검색하기",
      "세계명소별639": "세계 명소별",
      "특별한이야기640": "특별한 이야기",
      "숨겨진역사641": "숨겨진 역사",
      "일반가이드북에서는찾을수없는각명소의숨겨진역642": "일반 가이드북에서는 찾을 수 없는 각 명소의 숨겨진 역사와 비하인드 스토리를 AI가 발굴해서 들려드립니다.",
      "에펠탑건설당시파리시민들의반대이야기643": "에펠탑 건설 당시 파리 시민들의 반대 이야기",
      "마추픽추가500년간숨겨져있던이유644": "마추픽추가 500년간 숨겨져 있던 이유",
      "타지마할에숨겨진사랑과슬픔의이야기645": "타지마할에 숨겨진 사랑과 슬픔의 이야기",
      "문화적의미646": "문화적 의미",
      "단순한관광지가아닌각명소가해당문화권에서갖는647": "단순한 관광지가 아닌 각 명소가 해당 문화권에서 갖는 깊은 의미와 현재까지의 영향을 상세히 설명합니다.",
      "앙코르와트가크메르문명에미친영향648": "앙코르와트가 크메르 문명에 미친 영향",
      "만리장성이중국역사에서의역할649": "만리장성이 중국 역사에서의 역할",
      "후지산이일본문화에미친정신적영향650": "후지산이 일본 문화에 미친 정신적 영향",
      "전세계top100명소를지금바로만나보세요651": "전세계 TOP100 명소를 지금 바로 만나보세요",
      "ai전문가이드와함께하는세계명소탐험이당신을652": "AI 전문 가이드와 함께하는 세계 명소 탐험이 당신을 기다립니다",
      "무료로시작하기653": "무료로 시작하기",
      "전세계top100관광명소가이드세계유명여행654": "전세계 TOP100 관광명소 가이드 | 세계 유명 여행지 TripRadio.AI",
      "전세계top100관광명소를ai가이드와함께655": "🌍 전세계 TOP100 관광명소를 AI 가이드와 함께! 파리 에펠탑부터 제주도까지, 세계 유명 여행지의 숨겨진 이야기를 만나보세요",
      "전세계관광명소656": "전세계관광명소",
      "top100여행지657": "TOP100여행지",
      "세계유명관광지658": "세계유명관광지",
      "해외관광명소659": "해외관광명소",
      "세계여행지660": "세계여행지",
      "유명여행지661": "유명여행지",
      "관광명소추천662": "관광명소추천",
      "세계관광지663": "세계관광지",
      "해외여행지664": "해외여행지",
      "명소가이드665": "명소가이드",
      "세계명소666": "세계명소",
      "트립라디오ai667": "트립라디오AI",
      "전세계top100관광명소데이터668": "] ) }; // 전세계 TOP100 관광명소 데이터 (SEO 최적화용) const worldTop100Destinations = [ // 유럽 { name:",
      "프랑스669": "프랑스",
      "유럽670": "유럽",
      "전세계관광명소741": "전세계 관광명소",
      "전세계top100spanclassname750": "전세계 TOP100 <span className=",
      "관광명소완벽가이드spanh1pcl751": "관광명소 완벽 가이드</span> </h1> <p className=",
      "세계에서가장아름답고의미있는명소들을ai전문752": "세계에서 가장 아름답고 의미 있는 명소들을 AI 전문 가이드가 생생한 이야기와 함께 안내해드립니다 </p> </div> <div className=",
      "무료가이드시작linklinkhref753": "무료 가이드 시작 </Link> <Link href=",
      "top100명소보기linkdiv754": "TOP100 명소 보기 </Link> </div> </div> </section> {/* Why TOP100 */} <section className=",
      "왜이명소들이spanclassname755": "왜 이 명소들이 <span className=",
      "세계top100일까요spanh2di756": "세계 TOP100일까요?</span> </h2> <div className=",
      "역사적가치h3pclassname757": "역사적 가치</h3> <p className=",
      "인류문명의발전과정을보여주는소중한유산들로구성758": "인류 문명의 발전 과정을 보여주는 소중한 유산들로 구성된 세계적 명소 </p> </div> <div className=",
      "예술적가치h3pclassname759": "예술적 가치</h3> <p className=",
      "인간창의성의극한을보여주는건축물과예술작품들의760": "인간 창의성의 극한을 보여주는 건축물과 예술 작품들의 집합체 </p> </div> <div className=",
      "자연의경이h3pclassname761": "자연의 경이</h3> <p className=",
      "지구가수억년에걸쳐만들어낸경이로운자연풍경과762": "지구가 수억 년에 걸쳐 만들어낸 경이로운 자연 풍경과 생태계 </p> </div> </div> </div> </section> {/* AI Guide Benefits */} <section className=",
      "ai가이드만의spanclassname763": "AI 가이드만의 <span className=",
      "특별한경험spanh2divclass764": "특별한 경험</span> </h2> <div className=",
      "전문가수준지식h3pclassname765": "전문가 수준 지식</h3> <p className=",
      "수천개의전문자료를학습한ai가역사학자예술사766": "수천 개의 전문 자료를 학습한 AI가 역사학자, 예술사가 수준의 깊이 있는 해설 제공 </p> </div> <div className=",
      "언제든이용가능h3pclassname767": "언제든 이용 가능</h3> <p className=",
      "시간제약없이24시간언제든당신이원하는속도로768": "시간 제약 없이 24시간 언제든, 당신이 원하는 속도로 각 명소를 깊이 탐험 </p> </div> <div className=",
      "맞춤형관심사h3pclassname769": "맞춤형 관심사</h3> <p className=",
      "역사예술건축종교등당신의관심사에따라완770": "역사, 예술, 건축, 종교 등 당신의 관심사에 따라 완전히 다른 관점의 설명 </p> </div> <div className=",
      "다국어완벽지원h3pclassname771": "다국어 완벽 지원</h3> <p className=",
      "한국어영어일본어중국어등다양한언어로동일772": "한국어, 영어, 일본어, 중국어 등 다양한 언어로 동일한 품질의 가이드 제공 </p> </div> <div className=",
      "스마트폰으로간편h3pclassname773": "스마트폰으로 간편</h3> <p className=",
      "별도장비없이스마트폰만있으면전세계어떤명소든774": "별도 장비 없이 스마트폰만 있으면 전세계 어떤 명소든 전문 가이드 이용 </p> </div> <div className=",
      "완전무료h3pclassname775": "완전 무료</h3> <p className=",
      "어떤명소든얼마나오래들어도완전무료로이용할776": "어떤 명소든, 얼마나 오래 들어도 완전 무료로 이용할 수 있는 프리미엄 가이드 </p> </div> </div> </div> </section> {/* Top Destinations by Continent */} <section id=",
      "대륙별topspanclassname777": "대륙별 TOP <span className=",
      "관광명소spanh2divclassna778": "관광명소</span> </h2> <div className=",
      "유럽779": "유럽",
      "아시아780": "아시아",
      "아메리카781": "아메리카",
      "아프리카782": "아프리카",
      "오세아니아783": "오세아니아",
      "가이드듣기linkdivdi784": "가이드 듣기 </Link> </div> ))} </div> </div> ); })} </div> <div className=",
      "이외에도전세계수많은명소의ai가이드를만나보세785": "이 외에도 전세계 수많은 명소의 AI 가이드를 만나보세요 </p> <Link href=",
      "전체명소검색하기svgclassname786": "전체 명소 검색하기 <svg className=",
      "세계명소별spanclassname787": "세계 명소별 <span className=",
      "특별한이야기spanh2divclas788": "특별한 이야기</span> </h2> <div className=",
      "숨겨진역사h3divpclassnam789": "숨겨진 역사</h3> </div> <p className=",
      "일반가이드북에서는찾을수없는각명소의숨겨진역790": "일반 가이드북에서는 찾을 수 없는 각 명소의 숨겨진 역사와 비하인드 스토리를 AI가 발굴해서 들려드립니다. </p> <ul className=",
      "spanspan에펠탑건설당시파리시민791": "•</span> <span>에펠탑 건설 당시 파리 시민들의 반대 이야기</span> </li> <li className=",
      "spanspan마추픽추가500년간숨겨져792": "•</span> <span>마추픽추가 500년간 숨겨져 있던 이유</span> </li> <li className=",
      "spanspan타지마할에숨겨진사랑과슬793": "•</span> <span>타지마할에 숨겨진 사랑과 슬픔의 이야기</span> </li> </ul> </div> <div className=",
      "문화적의미h3divpclassnam794": "문화적 의미</h3> </div> <p className=",
      "단순한관광지가아닌각명소가해당문화권에서갖는795": "단순한 관광지가 아닌 각 명소가 해당 문화권에서 갖는 깊은 의미와 현재까지의 영향을 상세히 설명합니다. </p> <ul className=",
      "spanspan앙코르와트가크메르문명에796": "•</span> <span>앙코르와트가 크메르 문명에 미친 영향</span> </li> <li className=",
      "spanspan만리장성이중국역사에서의797": "•</span> <span>만리장성이 중국 역사에서의 역할</span> </li> <li className=",
      "spanspan후지산이일본문화에미친798": "•</span> <span>후지산이 일본 문화에 미친 정신적 영향</span> </li> </ul> </div> </div> </div> </section> {/* CTA Section */} <section className=",
      "전세계top100명소를지금바로만나보세요h799": "전세계 TOP100 명소를 지금 바로 만나보세요 </h2> <p className=",
      "ai전문가이드와함께하는세계명소탐험이당신을800": "AI 전문 가이드와 함께하는 세계 명소 탐험이 당신을 기다립니다 </p> <Link href=",
      "에펠탑801": ": '에펠탑",
      "프랑스802": ": '프랑스",
      "유럽803": ": '유럽",
      "ai도슨트서비스로869": "AI 도슨트 서비스로",
      "깊이있는문화체험870": "깊이 있는 문화체험",
      "전문도슨트가없어도괜찮습니다ai가당신만을위한871": "전문 도슨트가 없어도 괜찮습니다. AI가 당신만을 위한 박물관·미술관 해설을 실시간으로 만들어드립니다",
      "무료체험하기872": "무료 체험하기",
      "서비스소개873": "서비스 소개",
      "이런경험874": "이런 경험",
      "있으시죠875": "있으시죠?",
      "비싼도슨트비용876": "비싼 도슨트 비용",
      "박물관도슨트투어는1인당25만원단체는더비877": "박물관 도슨트 투어는 1인당 2-5만원, 단체는 더 비싸죠",
      "정해진시간에만878": "정해진 시간에만",
      "도슨트투어는정해진시간에만가능하고내가원하는879": "도슨트 투어는 정해진 시간에만 가능하고, 내가 원하는 속도로 관람하기 어려워요",
      "획일적인해설880": "획일적인 해설",
      "모든사람에게같은해설을하니까내관심사와맞지881": "모든 사람에게 같은 해설을 하니까, 내 관심사와 맞지 않을 때가 많아요",
      "tripradioai도슨트는882": "TripRadio.AI 도슨트는",
      "완전히다릅니다883": "완전히 다릅니다",
      "맞춤형해설884": "맞춤형 해설",
      "역사애호가인가요예술기법에관심이많나요당신의885": "역사 애호가인가요? 예술 기법에 관심이 많나요? 당신의 관심사에 맞춰 완전히 다른 관점으로 해설해드립니다.",
      "실시간생성886": "실시간 생성",
      "미리녹음된해설이아닌ai가현장에서실시간으로887": "미리 녹음된 해설이 아닌, AI가 현장에서 실시간으로 생성하는 생생한 해설을 경험하세요.",
      "완전무료888": "완전 무료",
      "비싼도슨트비용부담없이언제든무료로전문가수889": "비싼 도슨트 비용 부담 없이, 언제든 무료로 전문가 수준의 해설을 들을 수 있습니다.",
      "자유로운시간890": "자유로운 시간",
      "정해진투어시간에맞출필요없이내가원하는속도891": "정해진 투어 시간에 맞출 필요 없이, 내가 원하는 속도로 자유롭게 관람하세요.",
      "전세계지원892": "전 세계 지원",
      "국립중앙박물관부터루브르박물관까지전세계어떤문893": "국립중앙박물관부터 루브르 박물관까지, 전 세계 어떤 문화시설이든 즉시 해설 제공",
      "스마트폰으로894": "스마트폰으로",
      "별도장비없이스마트폰만있으면어디서든개인전용895": "별도 장비 없이 스마트폰만 있으면 어디서든 개인 전용 도슨트를 이용할 수 있습니다.",
      "이런곳에서896": "이런 곳에서",
      "활용하세요897": "활용하세요",
      "박물관898": "박물관",
      "국립중앙박물관국립민속박물관899": "국립중앙박물관, 국립민속박물관",
      "전쟁기념관역사박물관900": "전쟁기념관, 역사박물관",
      "과학관자연사박물관901": "과학관, 자연사박물관",
      "해외유명박물관루브르대영박물관등902": "해외 유명 박물관 (루브르, 대영박물관 등)",
      "미술관903": "미술관",
      "국립현대미술관리움미술관904": "국립현대미술관, 리움미술관",
      "개인갤러리기획전시905": "개인 갤러리, 기획전시",
      "해외미술관moma테이트모던등906": "해외 미술관 (MoMA, 테이트 모던 등)",
      "야외조각공원설치미술907": "야외 조각공원, 설치미술",
      "3단계908": "3단계",
      "로간단하게909": "로 간단하게",
      "장소검색910": "장소 검색",
      "방문하고있는박물관이나미술관이름을검색하세요911": "방문하고 있는 박물관이나 미술관 이름을 검색하세요",
      "관심사선택912": "관심사 선택",
      "역사예술과학등당신의관심분야를선택하세요913": "역사, 예술, 과학 등 당신의 관심 분야를 선택하세요",
      "해설청취914": "해설 청취",
      "ai가만든맞춤형해설을들으며깊이있는관람을시915": "AI가 만든 맞춤형 해설을 들으며 깊이 있는 관람을 시작하세요",
      "지금바로ai도슨트와함께문화체험을시작하세요916": "지금 바로 AI 도슨트와 함께 문화체험을 시작하세요",
      "더이상비싼도슨트비용때문에망설이지마세요917": "더 이상 비싼 도슨트 비용 때문에 망설이지 마세요",
      "무료로시작하기918": "무료로 시작하기",
      "ai도슨트서비스전문해설사없이도박물관미술919": "AI 도슨트 서비스 | 전문 해설사 없이도 박물관·미술관 투어 TripRadio.AI",
      "전문도슨트없이도박물관미술관에서깊이있는920": "🎨 전문 도슨트 없이도 박물관, 미술관에서 깊이 있는 해설을 들을 수 있습니다. AI가 실시간으로 만드는 개인 맞춤형 문화예술 해설 서비스",
      "도슨트921": "도슨트",
      "ai도슨트922": "AI도슨트",
      "박물관도슨트923": "박물관도슨트",
      "미술관도슨트924": "미술관도슨트",
      "문화해설사925": "문화해설사",
      "박물관해설926": "박물관해설",
      "미술관해설927": "미술관해설",
      "전시해설928": "전시해설",
      "큐레이터해설929": "큐레이터해설",
      "문화투어930": "문화투어",
      "트립라디오ai931": "트립라디오AI",
      "도슨트932": "도슨트",
      "ai도슨트서비스로spanclassname941": "AI 도슨트 서비스로 <span className=",
      "깊이있는문화체험spanh1pcla942": "깊이 있는 문화체험</span> </h1> <p className=",
      "전문도슨트가없어도괜찮습니다ai가당신만을위한943": "전문 도슨트가 없어도 괜찮습니다. AI가 당신만을 위한 박물관·미술관 해설을 실시간으로 만들어드립니다 </p> </div> <div className=",
      "무료체험하기linklinkhref944": "무료 체험하기 </Link> <Link href=",
      "서비스소개linkdivdiv945": "서비스 소개 </Link> </div> </div> </section> {/* Problem Section */} <section className=",
      "이런경험spanclassname946": "이런 경험 <span className=",
      "있으시죠spanh2divclassn947": "있으시죠?</span> </h2> <div className=",
      "비싼도슨트비용h3pclassname948": "비싼 도슨트 비용</h3> <p className=",
      "박물관도슨트투어는1인당25만원단체는더비949": "박물관 도슨트 투어는 1인당 2-5만원, 단체는 더 비싸죠 </p> </div> <div className=",
      "정해진시간에만h3pclassname950": "정해진 시간에만</h3> <p className=",
      "도슨트투어는정해진시간에만가능하고내가원하는951": "도슨트 투어는 정해진 시간에만 가능하고, 내가 원하는 속도로 관람하기 어려워요 </p> </div> <div className=",
      "획일적인해설h3pclassname952": "획일적인 해설</h3> <p className=",
      "모든사람에게같은해설을하니까내관심사와맞지953": "모든 사람에게 같은 해설을 하니까, 내 관심사와 맞지 않을 때가 많아요 </p> </div> </div> </div> </section> {/* Solution Section */} <section id=",
      "tripradioai도슨트는spanclassn954": "TripRadio.AI 도슨트는 <span className=",
      "완전히다릅니다spanh2divcla955": "완전히 다릅니다</span> </h2> <div className=",
      "맞춤형해설h3pclassname956": "맞춤형 해설</h3> <p className=",
      "역사애호가인가요예술기법에관심이많나요당신의957": "역사 애호가인가요? 예술 기법에 관심이 많나요? 당신의 관심사에 맞춰 완전히 다른 관점으로 해설해드립니다. </p> </div> <div className=",
      "실시간생성h3pclassname958": "실시간 생성</h3> <p className=",
      "미리녹음된해설이아닌ai가현장에서실시간으로959": "미리 녹음된 해설이 아닌, AI가 현장에서 실시간으로 생성하는 생생한 해설을 경험하세요. </p> </div> <div className=",
      "완전무료h3pclassname960": "완전 무료</h3> <p className=",
      "비싼도슨트비용부담없이언제든무료로전문가수961": "비싼 도슨트 비용 부담 없이, 언제든 무료로 전문가 수준의 해설을 들을 수 있습니다. </p> </div> <div className=",
      "자유로운시간h3pclassname962": "자유로운 시간</h3> <p className=",
      "정해진투어시간에맞출필요없이내가원하는속도963": "정해진 투어 시간에 맞출 필요 없이, 내가 원하는 속도로 자유롭게 관람하세요. </p> </div> <div className=",
      "전세계지원h3pclassname964": "전 세계 지원</h3> <p className=",
      "국립중앙박물관부터루브르박물관까지전세계어떤문965": "국립중앙박물관부터 루브르 박물관까지, 전 세계 어떤 문화시설이든 즉시 해설 제공 </p> </div> <div className=",
      "스마트폰으로h3pclassname966": "스마트폰으로</h3> <p className=",
      "별도장비없이스마트폰만있으면어디서든개인전용967": "별도 장비 없이 스마트폰만 있으면 어디서든 개인 전용 도슨트를 이용할 수 있습니다. </p> </div> </div> </div> </section> {/* Use Cases Section */} <section className=",
      "이런곳에서spanclassname968": "이런 곳에서 <span className=",
      "활용하세요spanh2divclassn969": "활용하세요</span> </h2> <div className=",
      "span박물관h3ulclass970": "🏛️</span> 박물관 </h3> <ul className=",
      "국립중앙박물관국립민속박물관spanli971": "국립중앙박물관, 국립민속박물관</span> </li> <li className=",
      "전쟁기념관역사박물관spanlili972": "전쟁기념관, 역사박물관</span> </li> <li className=",
      "과학관자연사박물관spanlilic973": "과학관, 자연사박물관</span> </li> <li className=",
      "해외유명박물관루브르대영박물관등span974": "해외 유명 박물관 (루브르, 대영박물관 등)</span> </li> </ul> </div> <div className=",
      "span미술관h3ulclassn975": "🎨</span> 미술관 </h3> <ul className=",
      "국립현대미술관리움미술관spanlil976": "국립현대미술관, 리움미술관</span> </li> <li className=",
      "개인갤러리기획전시spanlili977": "개인 갤러리, 기획전시</span> </li> <li className=",
      "해외미술관moma테이트모던등span978": "해외 미술관 (MoMA, 테이트 모던 등)</span> </li> <li className=",
      "야외조각공원설치미술spanliu979": "야외 조각공원, 설치미술</span> </li> </ul> </div> </div> </div> </section> {/* How to Use Section */} <section className=",
      "3단계span로간단하게h2divcl980": "3단계</span>로 간단하게 </h2> <div className=",
      "장소검색h3pclassname981": "장소 검색</h3> <p className=",
      "방문하고있는박물관이나미술관이름을검색하세요982": "방문하고 있는 박물관이나 미술관 이름을 검색하세요 </p> </div> <div className=",
      "관심사선택h3pclassname983": "관심사 선택</h3> <p className=",
      "역사예술과학등당신의관심분야를선택하세요984": "역사, 예술, 과학 등 당신의 관심 분야를 선택하세요 </p> </div> <div className=",
      "해설청취h3pclassname985": "해설 청취</h3> <p className=",
      "ai가만든맞춤형해설을들으며깊이있는관람을시986": "AI가 만든 맞춤형 해설을 들으며 깊이 있는 관람을 시작하세요 </p> </div> </div> </div> </section> {/* CTA Section */} <section className=",
      "지금바로ai도슨트와함께문화체험을시작하세요987": "지금 바로 AI 도슨트와 함께 문화체험을 시작하세요 </h2> <p className=",
      "더이상비싼도슨트비용때문에망설이지마세요988": "더 이상 비싼 도슨트 비용 때문에 망설이지 마세요 </p> <Link href=",
      "장르989": "장르:",
      "인기990": "인기",
      "촬영지991": "촬영지",
      "인기순992": "인기순",
      "최신순993": "최신순",
      "접근성좋은순994": "접근성 좋은 순",
      "가까운거리순995": "가까운 거리순",
      "filmlocationslength곳촬영지996": "{film.locations.length}곳 촬영지",
      "주요촬영지997": "주요 촬영지",
      "특별한1000": "특별한",
      "촬영지체험1001": "촬영지 체험",
      "단순한관광이아닌영화속주인공이되는경험1002": "단순한 관광이 아닌 영화 속 주인공이 되는 경험",
      "정확한위치1003": "정확한 위치",
      "gps좌표와상세한길찾기로정확한촬영지점까지안1004": "GPS 좌표와 상세한 길찾기로 정확한 촬영 지점까지 안내",
      "포토가이드1005": "포토 가이드",
      "영화속명장면을재현할수있는최적의촬영앵글안1006": "영화 속 명장면을 재현할 수 있는 최적의 촬영 앵글 안내",
      "비하인드스토리1007": "비하인드 스토리",
      "촬영당시의재미있는에피소드와제작비화1008": "촬영 당시의 재미있는 에피소드와 제작 비화",
      "오디오가이드1009": "오디오 가이드",
      "현장에서들을수있는전문해설과영화음악1010": "현장에서 들을 수 있는 전문 해설과 영화 음악",
      "카테고리별1011": "카테고리별",
      "인기촬영지1012": "인기 촬영지",
      "k드라마1013": "K-드라마",
      "한국드라마촬영지1014": "한국 드라마 촬영지",
      "120장소1015": "120+ 장소",
      "할리우드영화1016": "할리우드 영화",
      "전세계블록버스터1017": "전세계 블록버스터",
      "200장소1018": "200+ 장소",
      "애니메이션1019": "애니메이션",
      "일본애니성지순례1020": "일본 애니 성지순례",
      "80장소1021": "80+ 장소",
      "마블영화1022": "마블 영화",
      "슈퍼히어로촬영지1023": "슈퍼히어로 촬영지",
      "50장소1024": "50+ 장소",
      "사극역사1025": "사극/역사",
      "궁궐과한옥마을1026": "궁궐과 한옥마을",
      "60장소1027": "60+ 장소",
      "로맨스1028": "로맨스",
      "로맨틱한명장면1029": "로맨틱한 명장면",
      "90장소1030": "90+ 장소",
      "촬영지여행을위한1031": "촬영지 여행을 위한",
      "완벽한도구들1032": "완벽한 도구들",
      "영화촬영지투어를계획하고실행하는데필요한모든것1033": "영화 촬영지 투어를 계획하고 실행하는데 필요한 모든 것",
      "영화테마여행계획1034": "영화 테마 여행 계획",
      "원하는영화의촬영지들을연결한맞춤형여행루트를a1035": "원하는 영화의 촬영지들을 연결한 맞춤형 여행 루트를 AI가 자동으로 생성",
      "무료계획생성1036": "무료 계획 생성",
      "촬영지비자정보1037": "촬영지 비자 정보",
      "해외촬영지방문을위한비자요구사항과입국정보를1038": "해외 촬영지 방문을 위한 비자 요구사항과 입국 정보를 미리 확인",
      "실시간업데이트1039": "실시간 업데이트",
      "내촬영지컬렉션1040": "내 촬영지 컬렉션",
      "관심있는촬영지를저장하고나만의위시리스트를만들어1041": "관심있는 촬영지를 저장하고 나만의 위시리스트를 만들어 관리",
      "인기영화관광루트1043": "인기 영화 관광 루트",
      "서울k드라마투어1044": "서울 K-드라마 투어",
      "도깨비사랑의불시착등인기드라마촬영지2박31045": "도깨비, 사랑의 불시착 등 인기 드라마 촬영지 2박 3일",
      "예상비용1525만원1046": "예상 비용: 15-25만원",
      "지브리애니메이션성지1047": "지브리 애니메이션 성지",
      "센과치히로토토로등지브리영화배경지4박5일1048": "센과 치히로, 토토로 등 지브리 영화 배경지 4박 5일",
      "예상비용80120만원1049": "예상 비용: 80-120만원",
      "마블히어로투어1050": "마블 히어로 투어",
      "뉴욕어벤져스부터la아이언맨까지6박8일1051": "뉴욕 어벤져스부터 LA 아이언맨까지 6박 8일",
      "예상비용200300만원1052": "예상 비용: 200-300만원",
      "반지의제왕뉴질랜드1053": "반지의 제왕 뉴질랜드",
      "중간계배경지와호빗마을완전정복7박9일1054": "중간계 배경지와 호빗마을 완전정복 7박 9일",
      "예상비용250350만원1055": "예상 비용: 250-350만원",
      "촬영지에서들려주는1056": "촬영지에서 들려주는",
      "특별한이야기1057": "특별한 이야기",
      "실제촬영지에도착하면ai가이드가그곳에서만들을1058": "실제 촬영지에 도착하면 AI 가이드가 그곳에서만 들을 수 있는 촬영 비하인드와 숨겨진 에피소드를 들려드립니다",
      "촬영당시이야기1059": "촬영 당시 이야기",
      "배우들의즉흥연기촬영중일어난재미있는해프닝까지1060": "배우들의 즉흥연기, 촬영 중 일어난 재미있는 해프닝까지",
      "포토스팟안내1061": "포토 스팟 안내",
      "영화속명장면을재현할수있는정확한위치와각도1062": "영화 속 명장면을 재현할 수 있는 정확한 위치와 각도",
      "몰입감있는체험1063": "몰입감 있는 체험",
      "해당장면의ost와함께들으며영화속주인공기분1064": "해당 장면의 OST와 함께 들으며 영화 속 주인공 기분",
      "촬영지ai가이드체험1065": "촬영지 AI 가이드 체험",
      "영화촬영지가이드전세계유명영화세트장위치1066": "영화 촬영지 가이드 | 전세계 유명 영화 세트장 위치 TripRadio.AI",
      "좋아하는영화와드라마의실제촬영지를찾아보세요1067": "🎬 좋아하는 영화와 드라마의 실제 촬영지를 찾아보세요. 세트장 위치, 촬영 비하인드, 포토 스팟까지 완벽한 영화 관광 가이드",
      "영화촬영지1068": "영화 촬영지",
      "드라마촬영지1069": "드라마 촬영지",
      "세트장관광1070": "세트장 관광",
      "영화여행1071": "영화 여행",
      "촬영장소1072": "촬영 장소",
      "세트투어1073": "세트 투어",
      "영화관광1074": "영화 관광",
      "드라마관광1075": "드라마 관광",
      "k드라마촬영지1076": "K-드라마 촬영지",
      "30개영화드라마대규모촬영지데1077": "] ) }; // 30개 영화/드라마 대규모 촬영지 데이터 const filmLocations = [ // 한국 작품 (K-Drama & 영화) { title:",
      "국내1415": "국내",
      "일본1416": "일본",
      "중국1417": "중국",
      "미국1418": "미국",
      "유럽1419": "유럽",
      "기타1420": "기타",
      "전체1421": "전체",
      "쉬움1422": "쉬움",
      "보통1423": "보통",
      "어려움1424": "어려움",
      "영화촬영지1425": "영화 촬영지",
      "장르spandivclassname1434": "장르:</span> <div className=",
      "인기spanclassname1435": "인기 <span className=",
      "촬영지spanh2divclassnam1436": "촬영지</span> </h2> <div className=",
      "option인기순optionoption최1437": "<option>인기순</option> <option>최신순</option> <option>접근성 좋은 순</option> <option>가까운 거리순</option> </select> </div> </div> <div className=",
      "쉬움1438": "쉬움",
      "보통1439": "보통",
      "filmlocationslength곳촬영지1440": "{film.locations.length}곳 촬영지</span> </div> </div> {/* Locations List */} <div className=",
      "주요촬영지h4divclassname1441": "주요 촬영지</h4> <div className=",
      "특별한spanclassname1444": "특별한 <span className=",
      "촬영지체험spanh2pclassna1445": "촬영지 체험</span> </h2> <p className=",
      "단순한관광이아닌영화속주인공이되는경험p1446": "단순한 관광이 아닌 영화 속 주인공이 되는 경험</p> </div> <div className=",
      "정확한위치h3pclassname1447": "정확한 위치</h3> <p className=",
      "gps좌표와상세한길찾기로정확한촬영지점까지안1448": "GPS 좌표와 상세한 길찾기로 정확한 촬영 지점까지 안내 </p> </div> <div className=",
      "포토가이드h3pclassname1449": "포토 가이드</h3> <p className=",
      "영화속명장면을재현할수있는최적의촬영앵글안1450": "영화 속 명장면을 재현할 수 있는 최적의 촬영 앵글 안내 </p> </div> <div className=",
      "비하인드스토리h3pclassname1451": "비하인드 스토리</h3> <p className=",
      "촬영당시의재미있는에피소드와제작비화p1452": "촬영 당시의 재미있는 에피소드와 제작 비화 </p> </div> <div className=",
      "오디오가이드h3pclassname1453": "오디오 가이드</h3> <p className=",
      "현장에서들을수있는전문해설과영화음악p1454": "현장에서 들을 수 있는 전문 해설과 영화 음악 </p> </div> </div> </div> </section> {/* Popular Categories */} <section className=",
      "카테고리별spanclassname1455": "카테고리별 <span className=",
      "인기촬영지spanh2divclass1456": "인기 촬영지</span> </h2> <div className=",
      "k드라마h3pclassname1457": "K-드라마</h3> <p className=",
      "한국드라마촬영지ppclassname1458": "한국 드라마 촬영지</p> <p className=",
      "120장소pdivdivli1459": "120+ 장소</p> </div> </div> </Link> <Link href=",
      "할리우드영화h3pclassname1460": "할리우드 영화</h3> <p className=",
      "전세계블록버스터ppclassname1461": "전세계 블록버스터</p> <p className=",
      "200장소pdivdivli1462": "200+ 장소</p> </div> </div> </Link> <Link href=",
      "애니메이션h3pclassname1463": "애니메이션</h3> <p className=",
      "일본애니성지순례ppclassname1464": "일본 애니 성지순례</p> <p className=",
      "80장소pdivdivlin1465": "80+ 장소</p> </div> </div> </Link> <Link href=",
      "마블영화h3pclassname1466": "마블 영화</h3> <p className=",
      "슈퍼히어로촬영지ppclassname1467": "슈퍼히어로 촬영지</p> <p className=",
      "50장소pdivdivlin1468": "50+ 장소</p> </div> </div> </Link> <Link href=",
      "사극역사h3pclassname1469": "사극/역사</h3> <p className=",
      "궁궐과한옥마을ppclassname1470": "궁궐과 한옥마을</p> <p className=",
      "60장소pdivdivlin1471": "60+ 장소</p> </div> </div> </Link> <Link href=",
      "로맨스h3pclassname1472": "로맨스</h3> <p className=",
      "로맨틱한명장면ppclassname1473": "로맨틱한 명장면</p> <p className=",
      "90장소pdivdivlin1474": "90+ 장소</p> </div> </div> </Link> </div> </div> </div> </section> {/* Cross-Tool Integration */} <section className=",
      "촬영지여행을위한spanclassname1475": "촬영지 여행을 위한 <span className=",
      "완벽한도구들spanh2pclassn1476": "완벽한 도구들</span> </h2> <p className=",
      "영화촬영지투어를계획하고실행하는데필요한모든것1477": "영화 촬영지 투어를 계획하고 실행하는데 필요한 모든 것</p> </div> <div className=",
      "영화테마여행계획h3divpcla1478": "영화 테마 여행 계획</h3> </div> <p className=",
      "원하는영화의촬영지들을연결한맞춤형여행루트를a1479": "원하는 영화의 촬영지들을 연결한 맞춤형 여행 루트를 AI가 자동으로 생성 </p> <div className=",
      "무료계획생성spandivlink1480": "무료 계획 생성</span> </div> </Link> <Link href=",
      "촬영지비자정보h3divpclass1481": "촬영지 비자 정보</h3> </div> <p className=",
      "해외촬영지방문을위한비자요구사항과입국정보를1482": "해외 촬영지 방문을 위한 비자 요구사항과 입국 정보를 미리 확인 </p> <div className=",
      "실시간업데이트spandivlink1483": "실시간 업데이트</span> </div> </Link> <div className=",
      "내촬영지컬렉션h3divpclass1484": "내 촬영지 컬렉션</h3> </div> <p className=",
      "관심있는촬영지를저장하고나만의위시리스트를만들어1485": "관심있는 촬영지를 저장하고 나만의 위시리스트를 만들어 관리 </p> <div className=",
      "저장된장소확인buttondivd1487": "저장된 장소 확인 </button> </div> </div> </div> {/* Popular Film Tourism Routes */} <div className=",
      "인기영화관광루트h3divclassnam1488": "인기 영화 관광 루트</h3> <div className=",
      "서울k드라마투어h4pclassname1489": "서울 K-드라마 투어</h4> <p className=",
      "도깨비사랑의불시착등인기드라마촬영지2박31490": "도깨비, 사랑의 불시착 등 인기 드라마 촬영지 2박 3일</p> <span className=",
      "예상비용1525만원spandiv1491": "예상 비용: 15-25만원</span> </div> </Link> <Link href=",
      "지브리애니메이션성지h4pclassname1492": "지브리 애니메이션 성지</h4> <p className=",
      "센과치히로토토로등지브리영화배경지4박5일1493": "센과 치히로, 토토로 등 지브리 영화 배경지 4박 5일</p> <span className=",
      "예상비용80120만원spandiv1494": "예상 비용: 80-120만원</span> </div> </Link> <Link href=",
      "마블히어로투어h4pclassname1495": "마블 히어로 투어</h4> <p className=",
      "뉴욕어벤져스부터la아이언맨까지6박8일p1496": "뉴욕 어벤져스부터 LA 아이언맨까지 6박 8일</p> <span className=",
      "예상비용200300만원spandiv1497": "예상 비용: 200-300만원</span> </div> </Link> <Link href=",
      "반지의제왕뉴질랜드h4pclassname1498": "반지의 제왕 뉴질랜드</h4> <p className=",
      "중간계배경지와호빗마을완전정복7박9일p1499": "중간계 배경지와 호빗마을 완전정복 7박 9일</p> <span className=",
      "예상비용250350만원spandiv1500": "예상 비용: 250-350만원</span> </div> </Link> </div> </div> </div> </section> {/* Audio Guide Integration for Film Locations */} <section className=",
      "촬영지에서들려주는spanclassname1501": "촬영지에서 들려주는 <span className=",
      "특별한이야기spanh2pclassn1502": "특별한 이야기</span> </h2> <p className=",
      "실제촬영지에도착하면ai가이드가그곳에서만들을1503": "실제 촬영지에 도착하면 AI 가이드가 그곳에서만 들을 수 있는 촬영 비하인드와 숨겨진 에피소드를 들려드립니다 </p> <div className=",
      "촬영당시이야기h3pclassname1504": "촬영 당시 이야기</h3> <p className=",
      "배우들의즉흥연기촬영중일어난재미있는해프닝까지1505": "배우들의 즉흥연기, 촬영 중 일어난 재미있는 해프닝까지</p> </div> <div className=",
      "포토스팟안내h3pclassname1506": "포토 스팟 안내</h3> <p className=",
      "영화속명장면을재현할수있는정확한위치와각도1507": "영화 속 명장면을 재현할 수 있는 정확한 위치와 각도</p> </div> <div className=",
      "몰입감있는체험h3pclassname1508": "몰입감 있는 체험</h3> <p className=",
      "해당장면의ost와함께들으며영화속주인공기분1509": "해당 장면의 OST와 함께 들으며 영화 속 주인공 기분</p> </div> </div> <Link href=",
      "px2py1roundedfulltextxs1510": "px-2 py-1 rounded-full text-xs ${ film.difficulty === '쉬움' ? 'bg-green-100 text-green-800' : film.difficulty === '보통' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800' }",
      "자유여행이런것들이1844": "자유여행, 이런 것들이",
      "걱정되시죠1845": "걱정되시죠?",
      "복잡한계획세우기1846": "복잡한 계획 세우기",
      "어디서자고뭘먹고어떻게이동할지혼자계1847": "어디서 자고, 뭘 먹고, 어떻게 이동할지... 혼자 계획 세우기가 너무 복잡해요",
      "안전걱정1848": "안전 걱정",
      "혼자여행하면서위험한곳은아닌지사기당하지는않을1849": "혼자 여행하면서 위험한 곳은 아닌지, 사기당하지는 않을지 불안해요",
      "언어장벽1850": "언어 장벽",
      "현지언어를못해서제대로소통할수있을지길을잃1851": "현지 언어를 못해서 제대로 소통할 수 있을지, 길을 잃으면 어떡할지 걱정돼요",
      "ai가만드는1852": "AI가 만드는",
      "완벽한자유여행1853": "완벽한 자유여행",
      "완벽한여행계획1854": "완벽한 여행 계획",
      "예산일정취향을고려해ai가숙소교통식당관1855": "예산, 일정, 취향을 고려해 AI가 숙소-교통-식당-관광지까지 완벽한 일정 자동 생성",
      "실시간현지가이드1856": "실시간 현지 가이드",
      "현재위치에맞는실시간정보와추천장소를ai가즉1857": "현재 위치에 맞는 실시간 정보와 추천 장소를 AI가 즉시 제공하는 개인 전용 가이드",
      "안전정보제공1858": "안전 정보 제공",
      "현지치안주의사항응급상황대처법까지안전한자유1859": "현지 치안, 주의사항, 응급상황 대처법까지 안전한 자유여행을 위한 모든 정보",
      "예산최적화1860": "예산 최적화",
      "한정된예산으로최고의경험을할수있도록가성비좋1861": "한정된 예산으로 최고의 경험을 할 수 있도록 가성비 좋은 옵션들을 AI가 추천",
      "언어장벽해결1862": "언어 장벽 해결",
      "주요회화부터응급상황표현까지현지에서필요한모든1863": "주요 회화부터 응급상황 표현까지, 현지에서 필요한 모든 언어 지원을 AI가 제공",
      "24시간지원1864": "24시간 지원",
      "시차에상관없이언제든ai어시스턴트가여행중발생1865": "시차에 상관없이 언제든 AI 어시스턴트가 여행 중 발생하는 모든 질문에 즉시 답변",
      "어떤스타일의1866": "어떤 스타일의",
      "자유여행을원하세요1867": "자유여행을 원하세요?",
      "배낭여행스타일1868": "배낭여행 스타일",
      "저예산으로오래머물며현지문화깊이체험1869": "저예산으로 오래 머물며 현지 문화 깊이 체험",
      "게스트하우스호스텔등가성비숙소추천1870": "게스트하우스, 호스텔 등 가성비 숙소 추천",
      "대중교통활용한효율적이동계획1871": "대중교통 활용한 효율적 이동 계획",
      "편안한개인여행1872": "편안한 개인여행",
      "적당한예산으로편안하고안전한여행1873": "적당한 예산으로 편안하고 안전한 여행",
      "호텔리조트등편의시설갖춘숙소1874": "호텔, 리조트 등 편의시설 갖춘 숙소",
      "택시렌터카등편리한교통수단활용1875": "택시, 렌터카 등 편리한 교통수단 활용",
      "ai자유여행계획1876": "AI 자유여행 계획",
      "진행과정1877": "진행 과정",
      "기본정보입력1878": "기본 정보 입력",
      "여행지기간예산동행인수숙박선호도등기1879": "여행지, 기간, 예산, 동행인 수, 숙박 선호도 등 기본 정보를 입력합니다.",
      "예시일본도쿄4박5일예산150만원1880": "💡 예시: \"일본 도쿄 4박 5일, 예산 150만원, 혼자여행, 호텔 선호",
      "맞춤계획생성1881": "맞춤 계획 생성",
      "ai가당신의정보를분석해최적의여행일정을자동으1882": "AI가 당신의 정보를 분석해 최적의 여행 일정을 자동으로 생성합니다.",
      "숙소위치교통편관광코스맛집까지하루하1883": "💡 숙소 위치, 교통편, 관광 코스, 맛집까지 하루하루 상세 계획 제공",
      "실시간여행지원1884": "실시간 여행 지원",
      "여행중에는현재위치기반으로실시간가이드와추천을1885": "여행 중에는 현재 위치 기반으로 실시간 가이드와 추천을 제공합니다.",
      "날씨변화교통상황현지이벤트등에따른1886": "💡 날씨 변화, 교통 상황, 현지 이벤트 등에 따른 실시간 일정 조정",
      "ai와함께한1887": "AI와 함께한",
      "성공적인자유여행1888": "성공적인 자유여행",
      "첫해외혼자여행이었는데ai덕분에완벽한일본1889": "첫 해외 혼자 여행이었는데, AI 덕분에 완벽한 일본 여행을 했어요. 숨겨진 라멘집까지 추천해줘서 놀랐어요!",
      "25세직장인김님1890": "- 25세 직장인 김○○님",
      "유럽한달배낭여행을ai가완벽하게계획해줬어요1891": "유럽 한 달 배낭여행을 AI가 완벽하게 계획해줬어요. 예산 관리부터 안전 정보까지 정말 든든했습니다.",
      "22세대학생박님1892": "- 22세 대학생 박○○님",
      "제주도자유여행이이렇게특별할수있다니현지인도1893": "제주도 자유여행이 이렇게 특별할 수 있다니! 현지인도 모르는 숨겨진 명소들을 찾아갈 수 있었어요.",
      "30세회사원이님1894": "- 30세 회사원 이○○님",
      "ai와함께완벽한자유여행을시작하세요1895": "AI와 함께 완벽한 자유여행을 시작하세요",
      "더이상복잡한계획때문에망설이지마세요당신만의1896": "더 이상 복잡한 계획 때문에 망설이지 마세요. 당신만의 맞춤형 자유여행이 기다립니다",
      "자유여행계획시작하기1897": "자유여행 계획 시작하기",
      "자유여행가이드ai가계획부터현지가이드까지tr1898": "자유여행 가이드 | AI가 계획부터 현지가이드까지 TripRadio.AI",
      "혼자서도안전하고알찬자유여행ai가계획부터1899": "✈️ 혼자서도 안전하고 알찬 자유여행! AI가 계획부터 현지 가이드까지 모든 것을 도와드립니다. 나만의 자유여행을 완벽하게 설계하세요",
      "자유여행1900": "자유여행",
      "혼자여행1901": "혼자여행",
      "배낭여행1902": "배낭여행",
      "개인여행1903": "개인여행",
      "자유여행코스1904": "자유여행코스",
      "자유여행계획1905": "자유여행계획",
      "자유여행가이드1906": "자유여행가이드",
      "자유여행앱1907": "자유여행앱",
      "ai자유여행1908": "AI자유여행",
      "스마트자유여행1909": "스마트자유여행",
      "맞춤자유여행1910": "맞춤자유여행",
      "안전자유여행1911": "안전자유여행",
      "트립라디오ai1912": "트립라디오AI",
      "자유여행1913": "자유여행",
      "자유여행이런것들이spanclassname1922": "자유여행, 이런 것들이 <span className=",
      "걱정되시죠spanh2divclass1923": "걱정되시죠?</span> </h2> <div className=",
      "복잡한계획세우기h3pclassname1924": "복잡한 계획 세우기</h3> <p className=",
      "어디서자고뭘먹고어떻게이동할지혼자계1925": "어디서 자고, 뭘 먹고, 어떻게 이동할지... 혼자 계획 세우기가 너무 복잡해요 </p> </div> <div className=",
      "안전걱정h3pclassname1926": "안전 걱정</h3> <p className=",
      "혼자여행하면서위험한곳은아닌지사기당하지는않을1927": "혼자 여행하면서 위험한 곳은 아닌지, 사기당하지는 않을지 불안해요 </p> </div> <div className=",
      "언어장벽h3pclassname1928": "언어 장벽</h3> <p className=",
      "현지언어를못해서제대로소통할수있을지길을잃1929": "현지 언어를 못해서 제대로 소통할 수 있을지, 길을 잃으면 어떡할지 걱정돼요 </p> </div> </div> </div> </section> {/* AI Free Travel Solution */} <section id=",
      "ai가만드는spanclassname1930": "AI가 만드는 <span className=",
      "완벽한자유여행spanh2divcla1931": "완벽한 자유여행</span> </h2> <div className=",
      "완벽한여행계획h3pclassname1932": "완벽한 여행 계획</h3> <p className=",
      "예산일정취향을고려해ai가숙소교통식당관1933": "예산, 일정, 취향을 고려해 AI가 숙소-교통-식당-관광지까지 완벽한 일정 자동 생성 </p> </div> <div className=",
      "실시간현지가이드h3pclassname1934": "실시간 현지 가이드</h3> <p className=",
      "현재위치에맞는실시간정보와추천장소를ai가즉1935": "현재 위치에 맞는 실시간 정보와 추천 장소를 AI가 즉시 제공하는 개인 전용 가이드 </p> </div> <div className=",
      "안전정보제공h3pclassname1936": "안전 정보 제공</h3> <p className=",
      "현지치안주의사항응급상황대처법까지안전한자유1937": "현지 치안, 주의사항, 응급상황 대처법까지 안전한 자유여행을 위한 모든 정보 </p> </div> <div className=",
      "예산최적화h3pclassname1938": "예산 최적화</h3> <p className=",
      "한정된예산으로최고의경험을할수있도록가성비좋1939": "한정된 예산으로 최고의 경험을 할 수 있도록 가성비 좋은 옵션들을 AI가 추천 </p> </div> <div className=",
      "언어장벽해결h3pclassname1940": "언어 장벽 해결</h3> <p className=",
      "주요회화부터응급상황표현까지현지에서필요한모든1941": "주요 회화부터 응급상황 표현까지, 현지에서 필요한 모든 언어 지원을 AI가 제공 </p> </div> <div className=",
      "24시간지원h3pclassname1942": "24시간 지원</h3> <p className=",
      "시차에상관없이언제든ai어시스턴트가여행중발생1943": "시차에 상관없이 언제든 AI 어시스턴트가 여행 중 발생하는 모든 질문에 즉시 답변 </p> </div> </div> </div> </section> {/* Free Travel Types */} <section className=",
      "어떤스타일의spanclassname1944": "어떤 스타일의 <span className=",
      "자유여행을원하세요spanh2div1945": "자유여행을 원하세요?</span> </h2> <div className=",
      "배낭여행스타일h3divulclass1946": "배낭여행 스타일</h3> </div> <ul className=",
      "divdivspan저예산으로오래머1947": "</div> </div> <span>저예산으로 오래 머물며 현지 문화 깊이 체험</span> </li> <li className=",
      "divdivspan게스트하우스호스1948": "</div> </div> <span>게스트하우스, 호스텔 등 가성비 숙소 추천</span> </li> <li className=",
      "divdivspan대중교통활용한효1949": "</div> </div> <span>대중교통 활용한 효율적 이동 계획</span> </li> </ul> </div> <div className=",
      "편안한개인여행h3divulclass1950": "편안한 개인여행</h3> </div> <ul className=",
      "divdivspan적당한예산으로편1951": "</div> </div> <span>적당한 예산으로 편안하고 안전한 여행</span> </li> <li className=",
      "divdivspan호텔리조트등1952": "</div> </div> <span>호텔, 리조트 등 편의시설 갖춘 숙소</span> </li> <li className=",
      "divdivspan택시렌터카등1953": "</div> </div> <span>택시, 렌터카 등 편리한 교통수단 활용</span> </li> </ul> </div> </div> </div> </section> {/* Planning Process */} <section className=",
      "ai자유여행계획spanclassname1954": "AI 자유여행 계획 <span className=",
      "진행과정spanh2divclassn1955": "진행 과정</span> </h2> <div className=",
      "기본정보입력h3pclassname1956": "기본 정보 입력</h3> <p className=",
      "여행지기간예산동행인수숙박선호도등기1957": "여행지, 기간, 예산, 동행인 수, 숙박 선호도 등 기본 정보를 입력합니다. </p> <div className=",
      "예시1958": "💡 예시:",
      "맞춤계획생성h3pclassname1959": "맞춤 계획 생성</h3> <p className=",
      "ai가당신의정보를분석해최적의여행일정을자동으1960": "AI가 당신의 정보를 분석해 최적의 여행 일정을 자동으로 생성합니다. </p> <div className=",
      "숙소위치교통편관광코스맛집까지하루하1961": "💡 숙소 위치, 교통편, 관광 코스, 맛집까지 하루하루 상세 계획 제공 </p> </div> </div> </div> </div> <div className=",
      "실시간여행지원h3pclassname1962": "실시간 여행 지원</h3> <p className=",
      "여행중에는현재위치기반으로실시간가이드와추천을1963": "여행 중에는 현재 위치 기반으로 실시간 가이드와 추천을 제공합니다. </p> <div className=",
      "날씨변화교통상황현지이벤트등에따른1964": "💡 날씨 변화, 교통 상황, 현지 이벤트 등에 따른 실시간 일정 조정 </p> </div> </div> </div> </div> </div> </div> </div> </section> {/* Success Stories */} <section className=",
      "ai와함께한spanclassname1965": "AI와 함께한 <span className=",
      "성공적인자유여행spanh2divcl1966": "성공적인 자유여행</span> </h2> <div className=",
      "첫해외혼자여행이었는데ai덕분에완벽한일본1967": "첫 해외 혼자 여행이었는데, AI 덕분에 완벽한 일본 여행을 했어요. 숨겨진 라멘집까지 추천해줘서 놀랐어요!",
      "25세직장인김님pdivdiv1968": "- 25세 직장인 김○○님</p> </div> <div className=",
      "유럽한달배낭여행을ai가완벽하게계획해줬어요1969": "유럽 한 달 배낭여행을 AI가 완벽하게 계획해줬어요. 예산 관리부터 안전 정보까지 정말 든든했습니다.",
      "22세대학생박님pdivdiv1970": "- 22세 대학생 박○○님</p> </div> <div className=",
      "제주도자유여행이이렇게특별할수있다니현지인도1971": "제주도 자유여행이 이렇게 특별할 수 있다니! 현지인도 모르는 숨겨진 명소들을 찾아갈 수 있었어요.",
      "30세회사원이님pdivdi1972": "- 30세 회사원 이○○님</p> </div> </div> </div> </section> {/* CTA Section */} <section className=",
      "ai와함께완벽한자유여행을시작하세요h21973": "AI와 함께 완벽한 자유여행을 시작하세요 </h2> <p className=",
      "더이상복잡한계획때문에망설이지마세요당신만의1974": "더 이상 복잡한 계획 때문에 망설이지 마세요. 당신만의 맞춤형 자유여행이 기다립니다 </p> <Link href=",
      "일본도쿄4박5일예산150만원혼자여행1975": ": \"일본 도쿄 4박 5일, 예산 150만원, 혼자여행, 호텔 선호",
      "지도로딩중1998": "지도 로딩 중...",
      "ssrfalse지도는클라이언트에서만렌1999": ", ssr: false // 지도는 클라이언트에서만 렌더링 }); import { useLanguage } from '@/contexts/LanguageContext'; import { AudioChapter } from '@/types/audio'; import { enhanceGuideCoordinates } from '@/lib/coordinates/guide-coordinate-enhancer'; interface POI { id: string; name: string; lat: number; lng: number; radius?: number; description?: string; audioChapter?: AudioChapter; } const LiveTourPage: React.FC = () => { const params = useParams(); const router = useRouter(); const { currentLanguage, t } = useLanguage(); const locationName = typeof params.location === 'string' ? decodeURIComponent(params.location) : decodeURIComponent(String(params.location)); console.log('🔍 URL 파라미터 디버그:', { rawParam: params.location, decodedLocationName: locationName }); const [currentLocation, setCurrentLocation] = useState",
      "nullpoi로딩후설정됨const2000": "(null); // POI 로딩 후 설정됨 const [currentChapter, setCurrentChapter] = useState",
      "0constshowaudioplayers2001": "(0); const [showAudioPlayer, setShowAudioPlayer] = useState(true); const [showMap, setShowMap] = useState(true); const [isFullscreen, setIsFullscreen] = useState(false); const [showScrollButtons, setShowScrollButtons] = useState(false); const [currentScrollY, setCurrentScrollY] = useState(0); // POI와 챕터 상태 관리 const [poisWithChapters, setPoisWithChapters] = useState",
      "null직접db에서가이드데이터로딩2002": "(null); // 직접 DB에서 가이드 데이터 로딩 useEffect(() => { const loadGuideDataDirectly = async () => { setIsLoadingPOIs(true); setPoisError(null); try { console.log('🔍 직접 DB 조회 시작:', locationName); // 먼저 전역 데이터 확인 (빠른 경로) const globalGuideData = (window as any).currentGuideData; if (globalGuideData) { console.log('📦 전역 데이터 사용 - coordinates 별도 조회 필요'); // 전역 데이터에는 coordinates가 없으므로 별도 조회 const { supabase } = await import('@/lib/supabaseClient'); const normalizedLocation = locationName.trim().toLowerCase().replace(/\\s+/g, ' '); const { data: coordsData } = await supabase .from('guides') .select('coordinates') .eq('locationname', normalizedLocation) .eq('language', currentLanguage) .maybeSingle(); console.log('📍 전역 데이터용 coordinates 별도 조회 완료'); await processGuideData(globalGuideData, coordsData?.coordinates); return; } // DB에서 직접 조회 (안전한 경로) const { supabase } = await import('@/lib/supabaseClient'); // 🌐 다국어 장소명 처리: 현재 언어가 한국어가 아니면 한국어로 역번역 let dbLocationName = locationName; if (currentLanguage !== 'ko') { try { dbLocationName = await MicrosoftTranslator.reverseTranslateLocationName( locationName, currentLanguage ); console.log(`🔄 DB 조회용 역번역: ${locationName} → ${dbLocationName} (${currentLanguage} → ko)`); } catch (error) { console.warn('⚠️ 역번역 실패, 원본 사용:', error); dbLocationName = locationName; } } const normalizedLocation = dbLocationName.trim().toLowerCase().replace(/\\s+/g, ' '); const { data, error } = await supabase .from('guides') .select('content, coordinates') .eq('locationname', normalizedLocation) .eq('language', currentLanguage) .maybeSingle(); if (error) { console.error('DB 조회 오류:', error); setPoisError('가이드 데이터 조회 실패'); return; } if (data?.content) { console.log('🗄️ DB에서 데이터 로드 성공'); await processGuideData(data.content, data.coordinates); } else { setPoisError('해당 위치의 가이드 데이터가 없습니다'); } } catch (error) { console.error('가이드 데이터 로딩 실패:', error); setPoisError('데이터 로딩 중 오류가 발생했습니다'); } finally { setIsLoadingPOIs(false); } }; const processGuideData = async (guideData: any, coordinatesFromDB?: any) => { const personalities = ['agreeableness', 'openness', 'conscientiousness']; const pois: POI[] = []; // 다양한 데이터 구조에서 챕터 찾기 let chapters: any[] = []; if (guideData.realTimeGuide?.chapters) { chapters = guideData.realTimeGuide.chapters; } else if (guideData.realTimeGuide && Array.isArray(guideData.realTimeGuide)) { chapters = guideData.realTimeGuide; } else if (guideData.chapters) { chapters = guideData.chapters; } console.log(`🔍 찾은 챕터: ${chapters.length}개`); // 🎯 새로운 AI 자가검증 시스템으로 좌표 정확도 향상 try { console.log('🎯 AI 자가검증 시스템으로 좌표 보정 시작...'); // GuideData 형식으로 변환 const guideDataForEnhancement = { overview: { title: locationName, description: '', totalDuration: '', highlights: [], keyFacts: [] }, route: { description: '', estimatedTime: '', steps: [] }, metadata: { createdAt: new Date(), lastUpdated: new Date(), version: '1.0', originalLocationName: locationName }, realTimeGuide: { chapters: chapters } }; // 🚨 중요: 좌표 보정 시스템 비활성화 - 라우터에서 이미 정확한 좌표 검색 완료 console.log('🎯 Live 페이지에서도 좌표 보정 비활성화 - 라우터 좌표 사용'); // 좌표 보정 없이 원본 가이드 데이터 사용 const enhancedGuide = guideDataForEnhancement; const result = { success: true, originalCount: 0, enhancedCount: 0, improvements: [], processingTimeMs: 0 }; if (result.success) { console.log(`✅ 좌표 보정 완료: ${result.enhancedCount}/${result.originalCount} 챕터`); // 개발환경에서 상세 결과 출력 if (process.env.NODE_ENV === 'development' && result.chapter0Validation) { console.log(`🎯 챕터 0 자가검증 결과: - 정확도: ${result.chapter0Validation.isAccurate ? '✅ 승인' : '❌ 부정확'} - 신뢰도: ${Math.round(result.chapter0Validation.confidence * 100)}% - 거리: ${Math.round(result.chapter0Validation.distanceFromTarget)}m`); } // 보정된 챕터 사용 chapters = enhancedGuide.realTimeGuide?.chapters || chapters; } else { console.warn('⚠️ 좌표 보정 실패, 원본 좌표 사용'); } } catch (error) { console.error('❌ 좌표 보정 오류:', error); console.log('📍 원본 좌표로 계속 진행'); } // 🎯 좌표는 coordinates 칼럼에서 직접 가져오기 (DB 조회 결과에서) const coordinatesArray = coordinatesFromDB || []; console.log(`📍 DB coordinates 칼럼에서 ${coordinatesArray.length}개 좌표 발견`); // POI 생성 - coordinates 칼럼 우선 사용 if (coordinatesArray.length > 0) { coordinatesArray.forEach((coordItem: any, index: number) => { // 좌표 추출 - coordinates 객체 우선, 최상위 폴백 let lat: number, lng: number; if (coordItem.coordinates?.lat && coordItem.coordinates?.lng) { // coordinates 객체 안의 좌표 사용 (우선순위 1) lat = parseFloat(coordItem.coordinates.lat); lng = parseFloat(coordItem.coordinates.lng); } else if (coordItem.lat && coordItem.lng) { // 최상위 좌표 사용 (폴백) lat = parseFloat(coordItem.lat); lng = parseFloat(coordItem.lng); } else { console.warn(`⚠️ 좌표 ${index + 1}에서 유효한 좌표를 찾을 수 없음:`, coordItem); return; // 이 항목을 건너뜀 } // 유효한 좌표가 있는 경우 POI 생성 if (!isNaN(lat) && !isNaN(lng) && lat >= -90 && lat",
      "0consolelogpoislen2003": "0) { console.log(`✅ ${pois.length}개 유효한 POI 생성 완료`); setPoisWithChapters(pois); } else { setPoisError('유효한 좌표를 가진 챕터가 없습니다'); } }; loadGuideDataDirectly(); }, [locationName, currentLanguage]); // POI 데이터 로딩 완료 시 지도 중심점 업데이트 useEffect(() => { if (poisWithChapters.length > 0 && poisWithChapters[0]) { const firstPOI = poisWithChapters[0]; console.log(`🗺️ 지도 중심점 업데이트: ${firstPOI.name} (${firstPOI.lat}, ${firstPOI.lng})`); setMapCenter({ lat: firstPOI.lat, lng: firstPOI.lng }); } }, [poisWithChapters]); const audioChapters: AudioChapter[] = poisWithChapters .filter(poi => poi.audioChapter) .map(poi => poi.audioChapter!); // Handle location updates from tracker const handleLocationUpdate = (location: { lat: number; lng: number }) => { setCurrentLocation(location); setMapCenter(location); }; // Handle POI reached events const handlePOIReached = (poiId: string, poiName: string) => { const poiIndex = poisWithChapters.findIndex(poi => poi.id === poiId); if (poiIndex !== -1 && audioChapters[poiIndex]) { setCurrentChapter(poiIndex); // Show notification or modal for new chapter console.log(`Reached ${poiName}, playing chapter ${poiIndex + 1}`); } }; // Handle chapter updates from audio player const handleChapterUpdate = (poiId: string, updatedChapter: AudioChapter) => { setPoisWithChapters(prev => prev.map(poi => poi.id === poiId ? { ...poi, audioChapter: updatedChapter } : poi ) ); }; // Handle chapter changes from audio player const handleChapterChange = (chapterIndex: number) => { setCurrentChapter(chapterIndex); // Center map on the corresponding POI if (poisWithChapters[chapterIndex]) { setMapCenter({ lat: poisWithChapters[chapterIndex].lat, lng: poisWithChapters[chapterIndex].lng }); } }; // Toggle fullscreen mode const toggleFullscreen = () => { setIsFullscreen(!isFullscreen); }; // Share current location const handleShare = async () => { if (navigator.share && currentLocation) { try { await navigator.share({ title: String(t('live.shareTitle')), text: String(t('live.shareText')), url: window.location.href }); } catch (error) { console.error('Error sharing:', error); } } }; // Reset tour const handleReset = () => { setCurrentChapter(0); if (poisWithChapters[0]) { setMapCenter({ lat: poisWithChapters[0].lat, lng: poisWithChapters[0].lng }); } }; // Get current POI info const currentPOI = poisWithChapters[currentChapter]; // 스크롤 이벤트 리스너 useEffect(() => { const handleScroll = () => { const scrolled = window.scrollY; setCurrentScrollY(scrolled); const shouldShow = scrolled > 300; console.log('스크롤 이벤트:', { scrolled, shouldShow, currentState: showScrollButtons }); setShowScrollButtons(shouldShow); }; console.log('스크롤 리스너 등록'); window.addEventListener('scroll', handleScroll, { passive: true }); handleScroll(); // 초기 상태 확인 return () => { console.log('스크롤 리스너 해제'); window.removeEventListener('scroll', handleScroll); }; }, [showScrollButtons]); // 스크롤 투 탑 함수 const scrollToTop = () => { window.scrollTo({ top: 0, behavior: 'smooth' }); }; // 홈으로 이동 함수 const goToHome = () => { router.push('/'); }; // 좌표 정보 추출 함수 const extractCoordinatesInfo = () => { const coordinates = []; poisWithChapters.forEach((poi, index) => { if (poi.lat && poi.lng) { coordinates.push({ index: index + 1, name: poi.name, lat: poi.lat, lng: poi.lng, description: poi.description || '', isStartPoint: index === 0 }); } }); return coordinates; }; const coordinatesInfo = extractCoordinatesInfo(); return (",
      "내부헤더삭제됨maincon2004": "{/* 내부 헤더 삭제됨 */} {/* Main Content */}",
      "제목2005": "{/* 제목 */}",
      "gps를기반으로현재위치에서가장적합한관람코스2008": "GPS를 기반으로 현재 위치에서 가장 적합한 관람 코스를 실시간으로 안내합니다. 각 지점에 도착하면 자동으로 해당 위치의 상세 정보와 오디오 가이드가 제공됩니다.",
      "필수관람포인트2009": "{/* 필수관람포인트 */}",
      "로딩상태isloadingpois2010": "{/* 로딩 상태 */} {isLoadingPOIs && (",
      "locationname의관광지정보를검색하2011": "📍 {locationName}의 관광지 정보를 검색하고 있습니다...",
      "에러상태poiserror2012": ")} {/* 에러 상태 */} {poisError && !isLoadingPOIs && (",
      "위치정보로딩실패2013": "위치 정보 로딩 실패",
      "poi목록isloadingp2014": ")} {/* POI 목록 */} {!isLoadingPOIs && poisWithChapters.length === 0 && !poisError && (",
      "검색된관광지가없습니다2015": "검색된 관광지가 없습니다",
      "다른위치를검색해보세요2016": "다른 위치를 검색해보세요",
      "tguidestartlocation2017": "{t('guide.startLocation') || '시작지점'}",
      "위도poilattofixed6경도2019": "위도: {poi.lat.toFixed(6)}, 경도: {poi.lng.toFixed(6)}",
      "tguidedirectionguidance2022": "{t('guide.directionGuidance') || '방향 안내'}",
      "이전위치에서방향안내를따라이동하세요2023": "이전 위치에서 방향 안내를 따라 이동하세요",
      "해당챕터의오디오플레이어poia2024": "{/* 해당 챕터의 오디오 플레이어 */} {poi.audioChapter && (showMap || showAudioPlayer) && (",
      "좌표정보요약2025": "{/* 좌표 정보 요약 */}",
      "좌표정보요약2026": "좌표 정보 요약",
      "시작지점2027": "시작지점",
      "관람순서2033": "{/* 관람순서 */}",
      "시작버튼2034": "{/* 시작 버튼 */}",
      "추천시작지점지도시작후에만표시2037": ")} {/* 추천 시작지점 지도 (시작 후에만 표시) - 인트로 챕터만 */} {showMap && (",
      "tguiderecommendedstartpoin2038": "{t('guide.recommendedStartPoint') || '추천 시작지점'}",
      "tguideaccurateintrolocatio2039": "{t('guide.accurateIntroLocation') || '정확한 인트로 위치'}",
      "지도준비중2041": "지도 준비 중...",
      "정확한위치를확인하고있습니다2042": "정확한 위치를 확인하고 있습니다",
      "디버깅용추가콘텐츠스크롤테스트를2043": ")} {/* 디버깅용 추가 콘텐츠 - 스크롤 테스트를 위한 높이 확보 */}",
      "스크롤테스트용콘텐츠2044": "스크롤 테스트용 콘텐츠",
      "스크롤테스트를위한콘텐츠i1이콘텐2045": "스크롤 테스트를 위한 콘텐츠 #{i + 1}. 이 콘텐츠는 페이지의 높이를 늘려서 스크롤이 가능하도록 합니다. 300px 이상 스크롤하면 하단에 네비게이션 버튼이 나타나야 합니다.",
      "스크롤네비게이션버튼들항상보2046": "{/* 스크롤 네비게이션 버튼들 */} {/* 항상 보이는 테스트 버튼 (임시) */}",
      "동적import로코드스플리팅적용con2051": "; // 동적 import로 코드 스플리팅 적용 const LiveLocationTracker = dynamic(() => import(",
      "지도로딩중spandivssr2052": "지도 로딩 중...</span></div>, ssr: false // 지도는 클라이언트에서만 렌더링 }); import { useLanguage } from",
      "url파라미터디버그2053": "🔍 URL 파라미터 디버그:",
      "직접db조회시작2054": "🔍 직접 DB 조회 시작:",
      "전역데이터사용coordinates별도2055": "📦 전역 데이터 사용 - coordinates 별도 조회 필요",
      "전역데이터용coordinates별도조회완2056": "📍 전역 데이터용 coordinates 별도 조회 완료",
      "다국어장소명처리현재언어가한국2057": "); // 🌐 다국어 장소명 처리: 현재 언어가 한국어가 아니면 한국어로 역번역 let dbLocationName = locationName; if (currentLanguage !==",
      "trydblocationnameawa2058": ") { try { dbLocationName = await MicrosoftTranslator.reverseTranslateLocationName( locationName, currentLanguage ); console.log(`🔄 DB 조회용 역번역: ${locationName} → ${dbLocationName} (${currentLanguage} → ko)`); } catch (error) { console.warn(",
      "db조회오류2059": "DB 조회 오류:",
      "가이드데이터조회실패2060": "가이드 데이터 조회 실패",
      "db에서데이터로드성공2061": "🗄️ DB에서 데이터 로드 성공",
      "해당위치의가이드데이터가없습니다2062": "해당 위치의 가이드 데이터가 없습니다",
      "가이드데이터로딩실패2063": "가이드 데이터 로딩 실패:",
      "데이터로딩중오류가발생했습니다2064": "데이터 로딩 중 오류가 발생했습니다",
      "constpoispoi2065": "]; const pois: POI[] = []; // 다양한 데이터 구조에서 챕터 찾기 let chapters: any[] = []; if (guideData.realTimeGuide?.chapters) { chapters = guideData.realTimeGuide.chapters; } else if (guideData.realTimeGuide && Array.isArray(guideData.realTimeGuide)) { chapters = guideData.realTimeGuide; } else if (guideData.chapters) { chapters = guideData.chapters; } console.log(`🔍 찾은 챕터: ${chapters.length}개`); // 🎯 새로운 AI 자가검증 시스템으로 좌표 정확도 향상 try { console.log(",
      "guidedata형식으로변환const2066": "); // GuideData 형식으로 변환 const guideDataForEnhancement = { overview: { title: locationName, description:",
      "originallocationnamelocati2067": ", originalLocationName: locationName }, realTimeGuide: { chapters: chapters } }; // 🚨 중요: 좌표 보정 시스템 비활성화 - 라우터에서 이미 정확한 좌표 검색 완료 console.log(",
      "좌표보정없이원본가이드데이터사용c2068": "); // 좌표 보정 없이 원본 가이드 데이터 사용 const enhancedGuide = guideDataForEnhancement; const result = { success: true, originalCount: 0, enhancedCount: 0, improvements: [], processingTimeMs: 0 }; if (result.success) { console.log(`✅ 좌표 보정 완료: ${result.enhancedCount}/${result.originalCount} 챕터`); // 개발환경에서 상세 결과 출력 if (process.env.NODE_ENV ===",
      "resultchapter0validation2069": "&& result.chapter0Validation) { console.log(`🎯 챕터 0 자가검증 결과: - 정확도: ${result.chapter0Validation.isAccurate ?",
      "부정확2070": "❌ 부정확",
      "좌표보정실패원본좌표사용2071": "⚠️ 좌표 보정 실패, 원본 좌표 사용",
      "좌표보정오류2072": "❌ 좌표 보정 오류:",
      "원본좌표로계속진행2073": "📍 원본 좌표로 계속 진행",
      "유효한좌표를가진챕터가없습니다2077": "유효한 좌표를 가진 챕터가 없습니다",
      "handlescrollshowsc2081": ", handleScroll); }; }, [showScrollButtons]); // 스크롤 투 탑 함수 const scrollToTop = () => { window.scrollTo({ top: 0, behavior:",
      "좌표정보추출함수constext2083": "); }; // 좌표 정보 추출 함수 const extractCoordinatesInfo = () => { const coordinates = []; poisWithChapters.forEach((poi, index) => { if (poi.lat && poi.lng) { coordinates.push({ index: index + 1, name: poi.name, lat: poi.lat, lng: poi.lng, description: poi.description ||",
      "내부헤더삭제됨maincon2084": "{/* 내부 헤더 삭제됨 */} {/* Main Content */} <div className=",
      "제목divclassname2085": "{/* 제목 */} <div className=",
      "gps를기반으로현재위치에서가장적합한관람코스2087": "GPS를 기반으로 현재 위치에서 가장 적합한 관람 코스를 실시간으로 안내합니다. 각 지점에 도착하면 자동으로 해당 위치의 상세 정보와 오디오 가이드가 제공됩니다. </p> </div> {/* 필수관람포인트 */} <div className=",
      "h2로딩상태isloadi2088": ")}</h2> {/* 로딩 상태 */} {isLoadingPOIs && ( <div className=",
      "locationname의관광지정보를검색하2089": "📍 {locationName}의 관광지 정보를 검색하고 있습니다...</span> </div> )} {/* 에러 상태 */} {poisError && !isLoadingPOIs && ( <div className=",
      "위치정보로딩실패divdivclassna2090": "위치 정보 로딩 실패</div> <div className=",
      "poiserrordivdiv2091": "{poisError}</div> </div> )} {/* POI 목록 */} {!isLoadingPOIs && poisWithChapters.length === 0 && !poisError && ( <div className=",
      "divdiv검색된관광지가없습니다d2092": "📍</div> <div>검색된 관광지가 없습니다</div> <div className=",
      "다른위치를검색해보세요divdiv2093": "다른 위치를 검색해보세요</div> </div> )} <div className=",
      "시작지점2094": "시작지점",
      "poidescriptionp좌표정2095": "{poi.description}</p> {/* 좌표 정보 표시 */} <div className=",
      "위도poilattofixed6경도2096": "위도: {poi.lat.toFixed(6)}, 경도: {poi.lng.toFixed(6)} </span> <button onClick={() => { navigator.clipboard.writeText(`${poi.lat}, ${poi.lng}`); alert(",
      "복사buttondivdiv2097": "복사 </button> </div> </div> {/* 인트로가 아닌 경우 방향 안내 강조 */} {index > 0 && poi.audioChapter?.text && ( <div className=",
      "방향안내2098": "방향 안내",
      "이전위치에서방향안내를따라이동하세요p2099": "이전 위치에서 방향 안내를 따라 이동하세요 </p> </div> </div> </div> )} </div> </div> {/* 해당 챕터의 오디오 플레이어 */} {poi.audioChapter && (showMap || showAudioPlayer) && ( <div className=",
      "onchapterupdateupdatedchapt2100": "onChapterUpdate={(updatedChapter) => handleChapterUpdate(poi.id, updatedChapter)} locationName={locationName} guideId={`guide_${locationName}`} /> </div> )} </div> ))} </div> </div> {/* 좌표 정보 요약 */} <div className=",
      "좌표정보요약h2divclassna2101": "/> 좌표 정보 요약 </h2> <div className=",
      "시작지점spanh3pclass2102": "시작지점 </span> )} </h3> <p className=",
      "복사buttonbuttononclick2104": "복사 </button> <button onClick={() => { const googleMapsUrl = `https://maps.google.com/?q=${coord.lat},${coord.lng}`; window.open(googleMapsUrl,",
      "지도보기buttondivdiv2105": "지도보기 </button> </div> </div> ))} </div> {/* 전체 좌표 복사 버튼 */} <div className=",
      "전체좌표복사buttondiv2107": "📋 전체 좌표 복사 </button> </div> </div> </div> {/* 주의사항 */} <div className=",
      "pdivdiv관람순서2108": ")}</p> </div> </div> {/* 관람순서 */} <div className=",
      "pdivdivdiv2109": ")}</p> </div> </div> </div> </div> {/* 시작 버튼 */} <div className=",
      "buttononclick실제2110": "<button onClick={() => { // 실제 실시간 가이드 기능 시작 setShowMap(true); setShowAudioPlayer(true); }} className=",
      "buttondivlocati2111": ")} </button> </div> {/* Location Tracker (시작 후에만 표시) */} {(showMap || showAudioPlayer) && ( <div className=",
      "div추천시작지점지도시2112": "/> </div> )} {/* 추천 시작지점 지도 (시작 후에만 표시) - 인트로 챕터만 */} {showMap && ( <div className=",
      "추천시작지점2113": "추천 시작지점",
      "정확한인트로위치2114": "정확한 인트로 위치",
      "mapcenterpoiswithchapters2115": "{mapCenter && poisWithChapters.length > 0 ? ( <MapWithRoute pois={poisWithChapters .filter((poi, index) => index === 0) // 🎯 인트로 POI만 표시 (첫 번째만) .map(poi => ({ id: poi.id, name: poi.name, lat: poi.lat, lng: poi.lng, description: poi.description ||",
      "locationnamelocationnamegu2117": "locationName={locationName} guideCoordinates={undefined} // live 페이지에서는 POI 데이터 사용 /> ) : ( <div className=",
      "지도준비중divdivclassnam2118": "지도 준비 중...</div> <div className=",
      "정확한위치를확인하고있습니다divdiv2119": "정확한 위치를 확인하고 있습니다</div> </div> </div> )} </div> </div> )} {/* 디버깅용 추가 콘텐츠 - 스크롤 테스트를 위한 높이 확보 */} <div className=",
      "스크롤테스트용콘텐츠h3arrayfrom2120": "스크롤 테스트용 콘텐츠</h3> {Array.from({ length: 20 }, (_, i) => ( <div key={i} className=",
      "스크롤테스트를위한콘텐츠i1이콘텐2121": "스크롤 테스트를 위한 콘텐츠 #{i + 1}. 이 콘텐츠는 페이지의 높이를 늘려서 스크롤이 가능하도록 합니다. 300px 이상 스크롤하면 하단에 네비게이션 버튼이 나타나야 합니다. </p> </div> ))} </div> </div> {/* 스크롤 네비게이션 버튼들 */} {/* 항상 보이는 테스트 버튼 (임시) */} <div className=",
      "buttondiv조건부스크2124": "/> </button> </div> {/* 조건부 스크롤 버튼들 */} <div className=",
      "button스크롤투탑버튼오2127": "/> </button> {/* 스크롤 투 탑 버튼 (오른쪽 하단) */} <button onClick={scrollToTop} className={`w-14 h-14 bg-black text-white rounded-full shadow-2xl hover:bg-gray-800 hover:scale-110 transition-all duration-300 pointer-events-auto flex items-center justify-center ${ showScrollButtons ?",
      "buttondiv강화된디버2129": "/> </button> </div> {/* 강화된 디버깅 정보 */} <div className=",
      "db조회용역번역locationname2130": "🔄 DB 조회용 역번역: ${locationName} → ${dbLocationName} (${currentLanguage} → ko)",
      "찾은챕터chapterslength개2131": "🔍 찾은 챕터: ${chapters.length}개",
      "좌표보정완료resultenhancedc2132": "✅ 좌표 보정 완료: ${result.enhancedCount}/${result.originalCount} 챕터",
      "챕터0자가검증결과정확도resu2133": "🎯 챕터 0 자가검증 결과: - 정확도: ${result.chapter0Validation.isAccurate ? '✅ 승인' : '❌ 부정확'} - 신뢰도: ${Math.round(result.chapter0Validation.confidence * 100)}% - 거리: ${Math.round(result.chapter0Validation.distanceFromTarget)}m",
      "dbcoordinates칼럼에서coord2134": "📍 DB coordinates 칼럼에서 ${coordinatesArray.length}개 좌표 발견",
      "좌표index1에서유효한좌표를찾2135": "⚠️ 좌표 ${index + 1}에서 유효한 좌표를 찾을 수 없음:",
      "poislength개유효한poi생성완2140": "✅ ${pois.length}개 유효한 POI 생성 완료",
      "지도중심점업데이트firstpoina2141": "🗺️ 지도 중심점 업데이트: ${firstPOI.name} (${firstPOI.lat}, ${firstPOI.lng})",
      "index0index2143": "}> {index === 0 ? '🎯' : index + 1} </div> <div className=\"flex-1\"> <div className=\"flex items-center gap-2 mb-1\"> <h3 className=\"font-medium text-gray-900\">{poi.name}</h3> {index === 0 && ( <span className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full\"> {t('guide.startLocation') || '시작지점'} </span> )} </div> <p className=\"text-sm text-gray-600\">{poi.description}</p> {/* 좌표 정보 표시 */} <div className=\"mt-2 p-2 bg-gray-50 rounded-lg border border-gray-200\"> <div className=\"flex items-center gap-2 text-xs text-gray-600\"> <MapPin className=\"w-3 h-3\" /> <span className=\"font-mono\"> 위도: {poi.lat.toFixed(6)}, 경도: {poi.lng.toFixed(6)} </span> <button onClick={() => { navigator.clipboard.writeText(",
      "divdivdi2145": "} /> </div> )} </div> ))} </div> </div> {/* 좌표 정보 요약 */} <div className=\"border-b border-gray-100 pb-6\"> <h2 className=\"text-lg font-medium text-gray-900 mb-4 flex items-center gap-2\"> <MapPin className=\"w-5 h-5\" /> 좌표 정보 요약 </h2> <div className=\"bg-gray-50 rounded-lg p-4\"> <div className=\"grid gap-3\"> {coordinatesInfo.map((coord, index) => ( <div key={index} className=\"flex items-center justify-between p-3 bg-white rounded-lg border\"> <div className=\"flex items-center gap-3\"> <div className={",
      "coordisstartpoint2146": "}> {coord.isStartPoint ? '🎯' : coord.index} </div> <div> <h3 className=\"font-medium text-gray-900\"> {coord.name} {coord.isStartPoint && ( <span className=\"ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full\"> 시작지점 </span> )} </h3> <p className=\"text-sm font-mono text-gray-600\"> {coord.lat.toFixed(6)}, {coord.lng.toFixed(6)} </p> </div> </div> <div className=\"flex gap-2\"> <button onClick={() => { navigator.clipboard.writeText(",
      "rawparamparamslocatio2151": ":', { rawParam: params.location, decodedLocationName: locationName }); const [currentLocation, setCurrentLocation] = useState<{ lat: number; lng: number } | null>(null); const [mapCenter, setMapCenter] = useState<{ lat: number; lng: number } | null>(null); // POI 로딩 후 설정됨 const [currentChapter, setCurrentChapter] = useState<number>(0); const [showAudioPlayer, setShowAudioPlayer] = useState(true); const [showMap, setShowMap] = useState(true); const [isFullscreen, setIsFullscreen] = useState(false); const [showScrollButtons, setShowScrollButtons] = useState(false); const [currentScrollY, setCurrentScrollY] = useState(0); // POI와 챕터 상태 관리 const [poisWithChapters, setPoisWithChapters] = useState<POI[]>([]); const [isLoadingPOIs, setIsLoadingPOIs] = useState(false); const [poisError, setPoisError] = useState<string | null>(null); // 직접 DB에서 가이드 데이터 로딩 useEffect(() => { const loadGuideDataDirectly = async () => { setIsLoadingPOIs(true); setPoisError(null); try { console.log(",
      "locationname먼저전역데이2152": ":', locationName); // 먼저 전역 데이터 확인 (빠른 경로) const globalGuideData = (window as any).currentGuideData; if (globalGuideData) { console.log(",
      "부정확2153": ": '❌ 부정확",
      "normalizestring함수제거2306": "; } // normalizeString 함수 제거 - utils에서 normalizeLocationName 사용 // 동적 메타데이터 생성 export async function generateMetadata({ params, searchParams }: PageProps): Promise",
      "constresolvedparamsawait2307": "{ const resolvedParams = await params; const resolvedSearchParams = await searchParams; const locationName = decodeURIComponent(resolvedParams.location || ''); const requestedLang = safeLanguageCode( Array.isArray(resolvedSearchParams?.lang) ? resolvedSearchParams.lang[0] : resolvedSearchParams?.lang ); // 서버에서 쿠키 기반 언어 감지 const cookieStore = await cookies(); const cookieLanguage = cookieStore.get(LANGUAGE_COOKIE_NAME)?.value; const serverDetectedLanguage = detectPreferredLanguage({ cookieValue: cookieLanguage, urlLang: requestedLang, prioritizeUrl: true }); return generateMetadataFromGuide(locationName, serverDetectedLanguage); } export default async function GuidePage({ params, searchParams }: PageProps) { const resolvedParams = await params; const resolvedSearchParams = await searchParams; const locationName = decodeURIComponent(resolvedParams.location || ''); const requestedLang = safeLanguageCode( Array.isArray(resolvedSearchParams?.lang) ? resolvedSearchParams.lang[0] : resolvedSearchParams?.lang ); // 🎯 새로운 구조화된 지역 컨텍스트 정보 추출 const parentRegion = resolvedSearchParams?.parent ? decodeURIComponent(resolvedSearchParams.parent) : undefined; // 🚀 검색박스에서 전달된 구조화된 지역 정보 const regionalContext = resolvedSearchParams ? { region: resolvedSearchParams.region ? decodeURIComponent(resolvedSearchParams.region) : undefined, country: resolvedSearchParams.country ? decodeURIComponent(resolvedSearchParams.country) : undefined, countryCode: resolvedSearchParams.countryCode || undefined, type: resolvedSearchParams.type as 'location' | 'attraction' || undefined } : undefined; const normLocation = normalizeLocationName(locationName); // 🔥 서버에서 통합 언어 감지 (쿠키 우선) const cookieStore = await cookies(); const cookieLanguage = cookieStore.get(LANGUAGE_COOKIE_NAME)?.value; // 서버-클라이언트 일관성을 위한 언어 우선순위 (URL 우선) const serverDetectedLanguage = detectPreferredLanguage({ cookieValue: cookieLanguage, urlLang: requestedLang, prioritizeUrl: true }); // 🔍 디버깅: 언어 감지 및 지역 컨텍스트 로깅 console.log('🔍 가이드 페이지 언어 감지:', { rawLocation: resolvedParams.location, decodedLocation: locationName, normalizedLocation: normLocation, requestedLang, cookieLanguage, serverDetectedLanguage, finalLanguage: serverDetectedLanguage, parentRegion: parentRegion || 'none', // 🎯 지역 컨텍스트 로깅 regionalContext: regionalContext || 'none' // 🚀 새로운 구조화된 지역 정보 로깅 }); console.log('🔎 DB 조회 준비:', { query: `locationname = \"${normLocation}\" AND language = \"${serverDetectedLanguage.toLowerCase()}\"` }); // 🔥 서버에서 감지된 언어로 가이드 조회 (쿠키 우선) let initialGuide: { content: any } | null = null; try { const { data, error } = await supabase .from('guides') .select('content') .eq('locationname', normLocation) .eq('language', serverDetectedLanguage.toLowerCase()) .maybeSingle(); if (!error && data && data.content) { initialGuide = { content: data.content }; console.log(`✅ 서버에서 ${serverDetectedLanguage} 가이드 발견`); } else { console.log(`⚠️ 서버에서 ${serverDetectedLanguage} 가이드 없음, 클라이언트에서 생성`); } } catch (e) { console.error('서버 사이드 가이드 조회 오류:', e); } // 구조화된 데이터를 위한 정보 준비 const structuredData = { name: locationName, description: `${locationName}의 상세한 AI 여행 가이드입니다. 실시간 음성 안내로 ${locationName}의 숨겨진 이야기를 발견해보세요.`, url: `https://navidocent.com/guide/${encodeURIComponent(locationName)}`, address: { '@type': 'PostalAddress', addressCountry: 'KR', addressLocality: locationName }, geo: initialGuide?.content?.coordinates ? { '@type': 'GeoCoordinates', latitude: initialGuide.content.coordinates.lat, longitude: initialGuide.content.coordinates.lng } : undefined, potentialAction: { '@type': 'ListenAction', target: `https://navidocent.com/guide/${encodeURIComponent(locationName)}/tour` } }; return (",
      "exportconstrevalidate02308": "; export const revalidate = 0; interface PageProps { params: Promise<{ location: string }>; searchParams?: Promise<{ lang?: string; parent?: string; region?: string; country?: string; countryCode?: string; type?: string; }>; } // normalizeString 함수 제거 - utils에서 normalizeLocationName 사용 // 동적 메타데이터 생성 export async function generateMetadata({ params, searchParams }: PageProps): Promise<Metadata> { const resolvedParams = await params; const resolvedSearchParams = await searchParams; const locationName = decodeURIComponent(resolvedParams.location ||",
      "constrequestedlangsafel2309": "); const requestedLang = safeLanguageCode( Array.isArray(resolvedSearchParams?.lang) ? resolvedSearchParams.lang[0] : resolvedSearchParams?.lang ); // 서버에서 쿠키 기반 언어 감지 const cookieStore = await cookies(); const cookieLanguage = cookieStore.get(LANGUAGE_COOKIE_NAME)?.value; const serverDetectedLanguage = detectPreferredLanguage({ cookieValue: cookieLanguage, urlLang: requestedLang, prioritizeUrl: true }); return generateMetadataFromGuide(locationName, serverDetectedLanguage); } export default async function GuidePage({ params, searchParams }: PageProps) { const resolvedParams = await params; const resolvedSearchParams = await searchParams; const locationName = decodeURIComponent(resolvedParams.location ||",
      "constrequestedlangsafel2310": "); const requestedLang = safeLanguageCode( Array.isArray(resolvedSearchParams?.lang) ? resolvedSearchParams.lang[0] : resolvedSearchParams?.lang ); // 🎯 새로운 구조화된 지역 컨텍스트 정보 추출 const parentRegion = resolvedSearchParams?.parent ? decodeURIComponent(resolvedSearchParams.parent) : undefined; // 🚀 검색박스에서 전달된 구조화된 지역 정보 const regionalContext = resolvedSearchParams ? { region: resolvedSearchParams.region ? decodeURIComponent(resolvedSearchParams.region) : undefined, country: resolvedSearchParams.country ? decodeURIComponent(resolvedSearchParams.country) : undefined, countryCode: resolvedSearchParams.countryCode || undefined, type: resolvedSearchParams.type as",
      "undefinedundefinedco2311": "|| undefined } : undefined; const normLocation = normalizeLocationName(locationName); // 🔥 서버에서 통합 언어 감지 (쿠키 우선) const cookieStore = await cookies(); const cookieLanguage = cookieStore.get(LANGUAGE_COOKIE_NAME)?.value; // 서버-클라이언트 일관성을 위한 언어 우선순위 (URL 우선) const serverDetectedLanguage = detectPreferredLanguage({ cookieValue: cookieLanguage, urlLang: requestedLang, prioritizeUrl: true }); // 🔍 디버깅: 언어 감지 및 지역 컨텍스트 로깅 console.log(",
      "지역컨텍스트로깅regionalcon2312": ", // 🎯 지역 컨텍스트 로깅 regionalContext: regionalContext ||",
      "새로운구조화된지역정보로깅co2313": "// 🚀 새로운 구조화된 지역 정보 로깅 }); console.log(",
      "서버에서감지된언어로가이드조회2314": "}); // 🔥 서버에서 감지된 언어로 가이드 조회 (쿠키 우선) let initialGuide: { content: any } | null = null; try { const { data, error } = await supabase .from(",
      "serverdetectedlanguagetolow2315": ", serverDetectedLanguage.toLowerCase()) .maybeSingle(); if (!error && data && data.content) { initialGuide = { content: data.content }; console.log(`✅ 서버에서 ${serverDetectedLanguage} 가이드 발견`); } else { console.log(`⚠️ 서버에서 ${serverDetectedLanguage} 가이드 없음, 클라이언트에서 생성`); } } catch (e) { console.error(",
      "e구조화된데이터를위한정보준비2316": ", e); } // 구조화된 데이터를 위한 정보 준비 const structuredData = { name: locationName, description: `${locationName}의 상세한 AI 여행 가이드입니다. 실시간 음성 안내로 ${locationName}의 숨겨진 이야기를 발견해보세요.`, url: `https://navidocent.com/guide/${encodeURIComponent(locationName)}`, address: {",
      "서버에서감지된언어로가이드조회2317": "}); // 🔥 서버에서 감지된 언어로 가이드 조회 (쿠키 우선) let initialGuide: { content: any } | null = null; try { const { data, error } = await supabase .from('guides') .select('content') .eq('locationname', normLocation) .eq('language', serverDetectedLanguage.toLowerCase()) .maybeSingle(); if (!error && data && data.content) { initialGuide = { content: data.content }; console.log(",
      "서버에서serverdetectedlangua2318": "⚠️ 서버에서 ${serverDetectedLanguage} 가이드 없음, 클라이언트에서 생성",
      "e구조화된데이터를위한정보준2320": ":', e); } // 구조화된 데이터를 위한 정보 준비 const structuredData = { name: locationName, description: `${locationName}의 상세한 AI 여행 가이드입니다. 실시간 음성 안내로 ${locationName}의 숨겨진 이야기를 발견해보세요.`, url: `https://navidocent.com/guide/${encodeURIComponent(locationName)}`, address: {",
      "콘텐츠로딩중2519": "콘텐츠 로딩 중",
      "잠시만기다려주세요2520": "잠시만 기다려주세요...",
      "핵심정규화함수추가cons2521": ") }); // 🔥 핵심: 정규화 함수 추가 const normalizeGuideData = (data: any, locationName: string) => { if (!data) { throw new Error('가이드 데이터가 없습니다.'); } // 🔥 핵심: content 래핑 구조 올바른 처리 let sourceData = data; // data.content가 있으면 그것을 사용 (가장 일반적인 케이스) if (data.content && typeof data.content === 'object') { sourceData = data.content; console.log('📦 content 필드에서 데이터 추출'); } // data가 직접 overview, route, realTimeGuide를 가지면 직접 사용 else if (data.overview || data.route || data.realTimeGuide) { sourceData = data; console.log('📦 직접 구조에서 데이터 추출'); } else { console.error('❌ 올바른 가이드 구조를 찾을 수 없음:', Object.keys(data)); throw new Error('올바른 가이드 데이터 구조가 아닙니다.'); } // 🔍 mustVisitSpots 데이터 추적 console.log('🎯 normalizeGuideData에서 sourceData 확인:', { hasSourceData: !!sourceData, sourceDataKeys: Object.keys(sourceData || {}), sourceMustVisitSpots: sourceData?.mustVisitSpots, keyHighlights: sourceData?.keyHighlights }); // 정규화된 GuideData 생성 const normalizedData = { overview: { title: sourceData.overview?.title || locationName, // 새로운 개요 필드들 location: sourceData.overview?.location || '', keyFeatures: sourceData.overview?.keyFeatures || '', background: sourceData.overview?.background || '', // 기존 필드들 (호환성) summary: sourceData.overview?.summary || '', narrativeTheme: sourceData.overview?.narrativeTheme || '', keyFacts: Array.isArray(sourceData.overview?.keyFacts) ? sourceData.overview.keyFacts : [], visitingTips: sourceData.overview?.visitingTips, historicalBackground: sourceData.overview?.historicalBackground, visitInfo: sourceData.overview?.visitInfo || {} }, route: { steps: Array.isArray(sourceData.route?.steps) ? sourceData.route.steps : [] }, realTimeGuide: { chapters: Array.isArray(sourceData.realTimeGuide?.chapters) ? sourceData.realTimeGuide.chapters : [], ...sourceData.realTimeGuide }, mustVisitSpots: sourceData.mustVisitSpots || sourceData.keyHighlights || sourceData.highlights || '', // 필수관람포인트 추가 (백업 필드들 포함) metadata: { originalLocationName: locationName, generatedAt: sourceData.metadata?.generatedAt || new Date().toISOString(), version: sourceData.metadata?.version || '1.0', language: sourceData.metadata?.language || 'ko', ...sourceData.metadata } }; // 챕터 ID 정규화 (타입 요구사항 충족) if (normalizedData.realTimeGuide?.chapters) { normalizedData.realTimeGuide.chapters = normalizedData.realTimeGuide.chapters.map((chapter, index) => { // 챕터 데이터 정규화: 3개 필드를 narrative로 통합 const normalizedChapter = { ...chapter, id: chapter.id !== undefined ? chapter.id : index, title: chapter.title || `챕터 ${index + 1}`, // narrative가 있으면 사용, 없으면 3개 필드 합치기 narrative: chapter.narrative || [chapter.sceneDescription, chapter.coreNarrative, chapter.humanStories] .filter(Boolean).join(' '), nextDirection: chapter.nextDirection || '' }; return normalizedChapter; }); } // 🔍 최종 정규화 결과 확인 console.log('🎯 normalizeGuideData 최종 결과:', { hasMustVisitSpots: !!normalizedData.mustVisitSpots, mustVisitSpots: normalizedData.mustVisitSpots, mustVisitSpotsType: typeof normalizedData.mustVisitSpots, mustVisitSpotsLength: normalizedData.mustVisitSpots?.length }); return normalizedData; }; export default function TourPage() { const params = useParams(); const { currentLanguage } = useLanguage(); const [isMounted, setIsMounted] = useState(false); const [guideContent, setGuideContent] = useState",
      "0강제리렌더링용constlocatio2522": "(0); // 강제 리렌더링용 const locationName = params.location ? decodeURIComponent(params.location as string) : ''; const userProfile = useMemo(() => ({ interests: ['문화', '역사'], knowledgeLevel: '중급', ageGroup: '30대', preferredStyle: '친근함' }), []); useEffect(() => { setIsMounted(true); const fetchGuideData = async () => { if (!locationName) return; setIsLoading(true); setError(null); try { const response = await fetch('/api/node/ai/generate-guide', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ locationName, language: 'ko', userProfile, forceRegenerate: true // mustVisitSpots가 추가된 새 프롬프트로 재생성 }), }); if (!response.ok) { const errorData = await response.json(); throw new Error(errorData.error || '가이드 생성에 실패했습니다.'); } const data = await response.json(); const content = data?.content; // 🔍 API 응답 데이터 디버깅 console.log('🔍 API 전체 응답:', data); console.log('🔍 content 데이터:', content); console.log('🔍 content의 mustVisitSpots:', content?.mustVisitSpots); if (content) { // 핵심: 정규화된 데이터로 설정 const normalizedContent = normalizeGuideData(content, locationName); console.log('🔍 정규화된 데이터:', normalizedContent); console.log('🔍 정규화된 mustVisitSpots:', normalizedContent.mustVisitSpots); setGuideContent(normalizedContent); // 품질 피드백을 위한 고유 ID 생성 const uniqueId = `${locationName}_${currentLanguage}_${Date.now()}`; setGuideId(uniqueId); // 강제 리렌더링을 위한 key 업데이트 setKey(prev => prev + 1); } else { console.error('❌ Failed to extract guide content from response:', data); setError(data.error || 'Failed to load guide data.'); } } catch (err: any) { console.error('❌ 가이드 데이터 요청 오류:', err); setError(err.message); } finally { setIsLoading(false); } }; fetchGuideData(); }, [locationName, userProfile, currentLanguage]); if (isLoading || !isMounted) { return (",
      "가이드로딩중2523": "가이드 로딩 중",
      "가이드를불러오는중입니다2524": "가이드를 불러오는 중입니다...",
      "오류발생2525": "오류 발생",
      "데이터없음2527": "데이터 없음",
      "가이드데이터를찾을수없습니다2528": "가이드 데이터를 찾을 수 없습니다.",
      "품질피드백시스템통합guid2531": "{/* 🎯 품질 피드백 시스템 통합 */} {guideContent && guideId && (",
      "콘텐츠로딩중h2pclassname2533": "콘텐츠 로딩 중</h2> <p className=",
      "잠시만기다려주세요pdivdiv2534": "잠시만 기다려주세요...</p> </div> </div> </div> ) }); // 🔥 핵심: 정규화 함수 추가 const normalizeGuideData = (data: any, locationName: string) => { if (!data) { throw new Error(",
      "핵심content래핑구조올2535": "); } // 🔥 핵심: content 래핑 구조 올바른 처리 let sourceData = data; // data.content가 있으면 그것을 사용 (가장 일반적인 케이스) if (data.content && typeof data.content ===",
      "content필드에서데이터추출2536": "📦 content 필드에서 데이터 추출",
      "직접구조에서데이터추출2537": "📦 직접 구조에서 데이터 추출",
      "올바른가이드구조를찾을수없음2538": "❌ 올바른 가이드 구조를 찾을 수 없음:",
      "올바른가이드데이터구조가아닙니다2539": "올바른 가이드 데이터 구조가 아닙니다.",
      "normalizeguidedata에서source2540": "🎯 normalizeGuideData에서 sourceData 확인:",
      "기존필드들호환성summarysou2541": ", // 기존 필드들 (호환성) summary: sourceData.overview?.summary ||",
      "필수관람포인트추가백업필드들포함me2542": ", // 필수관람포인트 추가 (백업 필드들 포함) metadata: { originalLocationName: locationName, generatedAt: sourceData.metadata?.generatedAt || new Date().toISOString(), version: sourceData.metadata?.version ||",
      "sourcedatametadata2543": ", ...sourceData.metadata } }; // 챕터 ID 정규화 (타입 요구사항 충족) if (normalizedData.realTimeGuide?.chapters) { normalizedData.realTimeGuide.chapters = normalizedData.realTimeGuide.chapters.map((chapter, index) => { // 챕터 데이터 정규화: 3개 필드를 narrative로 통합 const normalizedChapter = { ...chapter, id: chapter.id !== undefined ? chapter.id : index, title: chapter.title || `챕터 ${index + 1}`, // narrative가 있으면 사용, 없으면 3개 필드 합치기 narrative: chapter.narrative || [chapter.sceneDescription, chapter.coreNarrative, chapter.humanStories] .filter(Boolean).join(",
      "constkeysetkeyusest2545": "); const [key, setKey] = useState<number>(0); // 강제 리렌더링용 const locationName = params.location ? decodeURIComponent(params.location as string) :",
      "문화2546": "문화",
      "역사2547": "역사",
      "중급2548": "중급",
      "30대2549": "30대",
      "친근함2550": "친근함",
      "userprofileforceregenerate2551": ", userProfile, forceRegenerate: true // mustVisitSpots가 추가된 새 프롬프트로 재생성 }), }); if (!response.ok) { const errorData = await response.json(); throw new Error(errorData.error ||",
      "constdataawaitrespon2552": "); } const data = await response.json(); const content = data?.content; // 🔍 API 응답 데이터 디버깅 console.log(",
      "content데이터2553": "🔍 content 데이터:",
      "content의mustvisitspots2554": "🔍 content의 mustVisitSpots:",
      "정규화된데이터2555": "🔍 정규화된 데이터:",
      "정규화된mustvisitspots2556": "🔍 정규화된 mustVisitSpots:",
      "가이드데이터요청오류2557": "❌ 가이드 데이터 요청 오류:",
      "가이드로딩중h2pclassname2558": "가이드 로딩 중</h2> <p className=",
      "가이드를불러오는중입니다pdiv2559": "가이드를 불러오는 중입니다...</p> </div> </div> </div> ); } if (error) { return ( <div className=",
      "오류발생h2pclassname2560": "오류 발생</h2> <p className=",
      "데이터없음h2pclassname2562": "데이터 없음</h2> <p className=",
      "가이드데이터를찾을수없습니다pbutto2563": "가이드 데이터를 찾을 수 없습니다.</p> <button onClick={() => window.history.back()} className=",
      "setguideiduniqueid강제2566": "; setGuideId(uniqueId); // 강제 리렌더링을 위한 key 업데이트 setKey(prev => prev + 1); } else { console.error('❌ Failed to extract guide content from response:', data); setError(data.error || 'Failed to load guide data.'); } } catch (err: any) { console.error('❌ 가이드 데이터 요청 오류:', err); setError(err.message); } finally { setIsLoading(false); } }; fetchGuideData(); }, [locationName, userProfile, currentLanguage]); if (isLoading || !isMounted) { return ( <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\"> <div className=\"max-w-md w-full mx-auto p-8\"> <div className=\"bg-white rounded-2xl shadow-sm border border-gray-200 p-8 text-center\"> <div className=\"w-12 h-12 border-2 border-gray-200 border-t-black rounded-full animate-spin mx-auto mb-4\"></div> <h2 className=\"text-xl font-bold text-gray-900 mb-2\">가이드 로딩 중</h2> <p className=\"text-gray-600 text-sm\">가이드를 불러오는 중입니다...</p> </div> </div> </div> ); } if (error) { return ( <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\"> <div className=\"max-w-md w-full mx-auto p-8\"> <div className=\"bg-white rounded-2xl shadow-sm border border-red-200 p-8 text-center\"> <div className=\"w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\"> <span className=\"text-red-600 text-xl\">!</span> </div> <h2 className=\"text-xl font-bold text-gray-900 mb-2\">오류 발생</h2> <p className=\"text-gray-600 text-sm mb-6\">{error}</p> <button onClick={() => window.location.reload()} className=\"bg-black text-white px-6 py-3 rounded-xl font-medium hover:bg-gray-800 transition-colors\" > 다시 시도 </button> </div> </div> </div> ); } if (!guideContent) { return ( <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\"> <div className=\"max-w-md w-full mx-auto p-8\"> <div className=\"bg-white rounded-2xl shadow-sm border border-gray-200 p-8 text-center\"> <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\"> <span className=\"text-gray-600 text-xl\">?</span> </div> <h2 className=\"text-xl font-bold text-gray-900 mb-2\">데이터 없음</h2> <p className=\"text-gray-600 text-sm mb-6\">가이드 데이터를 찾을 수 없습니다.</p> <button onClick={() => window.history.back()} className=\"bg-black text-white px-6 py-3 rounded-xl font-medium hover:bg-gray-800 transition-colors\" > 돌아가기 </button> </div> </div> </div> ); } const handleFeedbackSubmit = (feedback: any) => { console.log('📝 품질 피드백 받음:', feedback); // 피드백 처리 로직은 QualityFeedback 컴포넌트에서 API 호출로 처리됨 }; return ( <> <MinimalTourContent key={key} guide={guideContent} language={currentLanguage} /> {/* 🎯 품질 피드백 시스템 통합 */} {guideContent && guideId && ( <QualityFeedback key={",
      "hassourcedatasourced2567": ":', { hasSourceData: !!sourceData, sourceDataKeys: Object.keys(sourceData || {}), sourceMustVisitSpots: sourceData?.mustVisitSpots, keyHighlights: sourceData?.keyHighlights }); // 정규화된 GuideData 생성 const normalizedData = { overview: { title: sourceData.overview?.title || locationName, // 새로운 개요 필드들 location: sourceData.overview?.location ||",
      "중급2568": ": '중급",
      "30대2569": ": '30대",
      "친근함2570": ": '친근함",
      "contentmustvisitspots2571": ":', content?.mustVisitSpots); if (content) { // 핵심: 정규화된 데이터로 설정 const normalizedContent = normalizeGuideData(content, locationName); console.log(",
      "normalizedcontentmustvisi2572": ":', normalizedContent.mustVisitSpots); setGuideContent(normalizedContent); // 품질 피드백을 위한 고유 ID 생성 const uniqueId = `${locationName}_${currentLanguage}_${Date.now()}`; setGuideId(uniqueId); // 강제 리렌더링을 위한 key 업데이트 setKey(prev => prev + 1); } else { console.error(",
      "seo메타데이터생성exportasy2615": "; } // SEO 메타데이터 생성 export async function generateMetadata({ params, searchParams }: LegalPageProps): Promise",
      "constresolvedparamsawait2616": "{ const resolvedParams = await params; const resolvedSearchParams = await searchParams; const { type } = resolvedParams; const lang = resolvedSearchParams.lang || 'ko'; try { // 서버사이드에서 직접 서비스 호출 (API 우회) legalPagesService.setContactInformation({ serviceName: 'TripRadio.AI', developerName: 'TripRadio.AI Developer', serviceAddress: { city: '서울', state: '서울시', country: '대한민국' }, email: 'contact@navidocent.com' }); let page; switch (type) { case 'privacy': page = legalPagesService.generatePrivacyPolicy(lang); break; case 'terms': page = legalPagesService.generateTermsOfService(lang); break; case 'about': page = legalPagesService.generateAboutPage(lang); break; case 'contact': page = legalPagesService.generateContactPage(lang); break; default: notFound(); } const seo = page.seoMetadata; return { title: `${page.title} | 네비가이드AI`, description: seo.description, keywords: seo.keywords.join(', '), robots: 'index, follow', alternates: { canonical: `${process.env.NEXT_PUBLIC_BASE_URL}${seo.canonicalUrl}`, languages: { 'ko': `/legal/${type}?lang=ko`, 'en': `/legal/${type}?lang=en` } }, openGraph: { title: page.title, description: seo.description, url: `${process.env.NEXT_PUBLIC_BASE_URL}${seo.canonicalUrl}`, siteName: '네비가이드AI', locale: lang === 'ko' ? 'ko_KR' : 'en_US', type: 'website', }, twitter: { card: 'summary', title: page.title, description: seo.description, } }; } catch (error) { console.error('Failed to generate metadata for legal page:', error); return { title: 'Legal Page | 네비가이드AI', description: 'Legal information for NaviGuide AI services', }; } } // 유효한 법적 페이지 타입들 const validPageTypes = ['privacy', 'terms', 'about', 'contact']; export default async function LegalPage({ params, searchParams }: LegalPageProps) { const resolvedParams = await params; const resolvedSearchParams = await searchParams; const { type } = resolvedParams; const lang = resolvedSearchParams.lang || 'ko'; // 유효하지 않은 페이지 타입 체크 if (!validPageTypes.includes(type)) { notFound(); } try { // 서버사이드에서 직접 서비스 호출 (API 우회) legalPagesService.setContactInformation({ serviceName: 'TripRadio.AI', developerName: 'TripRadio.AI Developer', serviceAddress: { city: '서울', state: '서울시', country: '대한민국' }, email: 'contact@navidocent.com' }); let page; switch (type) { case 'privacy': page = legalPagesService.generatePrivacyPolicy(lang); break; case 'terms': page = legalPagesService.generateTermsOfService(lang); break; case 'about': page = legalPagesService.generateAboutPage(lang); break; case 'contact': page = legalPagesService.generateContactPage(lang); break; default: notFound(); } const compliance = legalPagesService.assessAdSenseCompliance(); // Markdown을 HTML로 변환하는 간단한 함수 const markdownToHtml = (markdown: string) => { return markdown .replace(/^# (.*$)/gim,",
      "한국어2618": "한국어",
      "adsense정책준수율complianceco2619": "AdSense 정책 준수율: {compliance.complianceScore}%",
      "pagetypeprivacyla2620": "{pageType === 'privacy' && (lang === 'ko' ? '개인정보처리방침' : 'Privacy Policy')} {pageType === 'terms' && (lang === 'ko' ? '이용약관' : 'Terms of Service')} {pageType === 'about' && (lang === 'ko' ? '회사 소개' : 'About Us')} {pageType === 'contact' && (lang === 'ko' ? '연락처' : 'Contact')}",
      "langko홈으로돌아가기2621": "{lang === 'ko' ? '홈으로 돌아가기' : 'Back to Home'}",
      "try서버사이드에서직접서비스호출2623": "; try { // 서버사이드에서 직접 서비스 호출 (API 우회) legalPagesService.setContactInformation({ serviceName:",
      "pagelegalpagesservicegen2627": ": page = legalPagesService.generateContactPage(lang); break; default: notFound(); } const seo = page.seoMetadata; return { title: `${page.title} | 네비가이드AI`, description: seo.description, keywords: seo.keywords.join(",
      "유효하지않은페이지타입체크ifva2631": "; // 유효하지 않은 페이지 타입 체크 if (!validPageTypes.includes(type)) { notFound(); } try { // 서버사이드에서 직접 서비스 호출 (API 우회) legalPagesService.setContactInformation({ serviceName:",
      "pagelegalpagesservicegen2635": ": page = legalPagesService.generateContactPage(lang); break; default: notFound(); } const compliance = legalPagesService.assessAdSenseCompliance(); // Markdown을 HTML로 변환하는 간단한 함수 const markdownToHtml = (markdown: string) => { return markdown .replace(/^# (.*$)/gim,",
      "한국어aahreflega2637": "}`} > 한국어 </a> <a href={`/legal/${type}?lang=en`} className={`px-3 py-1 rounded-md text-sm font-medium ${ lang ===",
      "adsense정책준수율complianceco2638": "AdSense 정책 준수율: {compliance.complianceScore}% </p> </div> </div> </div> )} {/* Page Content */} <article className=",
      "개인정보처리방침2639": "개인정보처리방침",
      "이용약관2640": "이용약관",
      "회사소개2641": "회사 소개",
      "연락처2642": "연락처",
      "홈으로돌아가기2643": "홈으로 돌아가기",
      "네비가이드ai2644": "네비가이드AI",
      "네비가이드ai2645": "네비가이드AI",
      "한국어aahref2648": "} > 한국어 </a> <a href={",
      "englishadivdiv2649": "} > English </a> </div> </div> </div> </header> {/* Main Content */} <main className=\"max-w-4xl mx-auto px-4 py-8\"> <div className=\"bg-white rounded-lg shadow-sm p-8\"> {/* AdSense Compliance Badge */} {compliance.complianceScore >= 80 && ( <div className=\"mb-6 p-4 bg-green-50 border border-green-200 rounded-lg\"> <div className=\"flex items-center\"> <div className=\"flex-shrink-0\"> <svg className=\"h-5 w-5 text-green-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\"> <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" /> </svg> </div> <div className=\"ml-3\"> <p className=\"text-sm text-green-800\"> AdSense 정책 준수율: {compliance.complianceScore}% </p> </div> </div> </div> )} {/* Page Content */} <article className=\"prose prose-lg max-w-none\" dangerouslySetInnerHTML={{ __html: markdownToHtml(page.content) }} /> {/* Footer Navigation */} <div className=\"mt-12 pt-8 border-t border-gray-200\"> <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\"> {validPageTypes.map((pageType) => ( <a key={pageType} href={",
      "pagetypeprivacy2650": "} > {pageType === 'privacy' && (lang === 'ko' ? '개인정보처리방침' : 'Privacy Policy')} {pageType === 'terms' && (lang === 'ko' ? '이용약관' : 'Terms of Service')} {pageType === 'about' && (lang === 'ko' ? '회사 소개' : 'About Us')} {pageType === 'contact' && (lang === 'ko' ? '연락처' : 'Contact')} </a> ))} </div> </div> {/* Back to Home */} <div className=\"mt-6 text-center\"> <a href=\"/\" className=\"inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\" > <svg className=\"mr-2 h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"> <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" /> </svg> {lang === 'ko' ? '홈으로 돌아가기' : 'Back to Home'} </a> </div> </div> </main> {/* Schema.org Structured Data */} <script type=\"application/ld+json\" dangerouslySetInnerHTML={{ __html: JSON.stringify({ \"@context\": \"https://schema.org\", \"@type\": \"WebPage\", \"name\": page.title, \"description\": page.seoMetadata?.description, \"url\":",
      "네비가이드ai2659": ": \"네비가이드AI",
      "네비가이드ai2660": ": \"네비가이드AI",
      "nullconstfetchmetricsa2661": "(null); const fetchMetrics = async () => { try { const response = await fetch('/api/monitoring/metrics?detailed=true'); if (!response.ok) throw new Error('메트릭 조회 실패'); const newData = await response.json(); setData(newData); setError(null); } catch (err) { setError(err instanceof Error ? err.message : '알 수 없는 오류'); } finally { setLoading(false); } }; const clearMetrics = async () => { if (!confirm('모든 메트릭을 초기화하시겠습니까?')) return; try { const response = await fetch('/api/monitoring/metrics', { method: 'DELETE' }); if (!response.ok) throw new Error('메트릭 초기화 실패'); await fetchMetrics(); alert('메트릭이 초기화되었습니다.'); } catch (err) { alert(err instanceof Error ? err.message : '초기화에 실패했습니다.'); } }; useEffect(() => { fetchMetrics(); }, []); useEffect(() => { if (!autoRefresh) return; const interval = setInterval(fetchMetrics, 10000); // 10초마다 갱신 return () => clearInterval(interval); }, [autoRefresh]); const getStatusColor = (status: string) => { switch (status) { case 'healthy': return 'text-green-600 bg-green-100'; case 'degraded': return 'text-yellow-600 bg-yellow-100'; case 'critical': return 'text-red-600 bg-red-100'; default: return 'text-gray-600 bg-gray-100'; } }; const getStatusIcon = (status: string) => { switch (status) { case 'healthy': return '✅'; case 'degraded': return '⚠️'; case 'critical': return '🚨'; default: return '❓'; } }; if (loading) { return (",
      "메트릭을불러오는중2662": "메트릭을 불러오는 중...",
      "오류발생2663": "❌ 오류 발생",
      "가이드ai성능모니터링2666": "🏁 가이드AI 성능 모니터링",
      "setautorefreshetargetchecke2667": "setAutoRefresh(e.target.checked)} className=\"mr-2\" /> 자동 갱신 (10초)",
      "전체상태2671": "{/* 전체 상태 */}",
      "전체시스템상태2672": "전체 시스템 상태",
      "총작업수2673": "총 작업 수",
      "정상작업2674": "정상 작업",
      "총호출수2675": "총 호출 수",
      "총오류수2676": "총 오류 수",
      "전체오류율2677": "전체 오류율",
      "발견된문제점2678": "🚨 발견된 문제점",
      "개별메트릭2679": "{/* 개별 메트릭 */}",
      "평균응답시간2680": "평균 응답시간",
      "성공률2681": "성공률",
      "총호출2682": "총 호출",
      "오류율2683": "오류율",
      "최소최대2684": "최소/최대",
      "마지막호출2685": "마지막 호출",
      "metricminutessincelastcall2686": "{metric.minutesSinceLastCall !== null ? `${metric.minutesSinceLastCall}분 전` : 'N/A' }",
      "성능인디케이터2687": "{/* 성능 인디케이터 */}",
      "메트릭조회실패2688": "메트릭 조회 실패",
      "알수없는오류2689": "알 수 없는 오류",
      "모든메트릭을초기화하시겠습니까2690": "모든 메트릭을 초기화하시겠습니까?",
      "메트릭초기화실패2691": "메트릭 초기화 실패",
      "메트릭이초기화되었습니다2692": "메트릭이 초기화되었습니다.",
      "초기화에실패했습니다2693": "초기화에 실패했습니다.",
      "메트릭을불러오는중pdivdi2694": "메트릭을 불러오는 중...</p> </div> </div> ); } if (error) { return ( <div className=",
      "오류발생ppclassname2695": "❌ 오류 발생</p> <p className=",
      "가이드ai성능모니터링h1divcla2698": "🏁 가이드AI 성능 모니터링</h1> <div className=",
      "자동갱신10초labelbutto2699": "/> 자동 갱신 (10초) </label> <button onClick={fetchMetrics} className=",
      "전체시스템상태h2spanclassname2704": "전체 시스템 상태</h2> <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(data.health.status)}`}> {getStatusIcon(data.health.status)} {data.health.status.toUpperCase()} </span> </div> <div className=",
      "총작업수pdivdivclassna2705": "총 작업 수</p> </div> <div className=",
      "정상작업pdivdivclassnam2706": "정상 작업</p> </div> <div className=",
      "총호출수pdivdivclassna2707": "총 호출 수</p> </div> <div className=",
      "총오류수pdivdivclassna2708": "총 오류 수</p> </div> <div className=",
      "전체오류율pdivdivdata2709": "전체 오류율</p> </div> </div> {data.health.issues.length > 0 && ( <div className=",
      "발견된문제점h3ulclassname2710": "🚨 발견된 문제점</h3> <ul className=",
      "datahealthissuesmapissue2711": "{data.health.issues.map((issue, index) => ( <li key={index}>{issue}</li> ))} </ul> </div> )} </div> {/* 개별 메트릭 */} <div className=",
      "평균응답시간ppclassname2712": "평균 응답시간</p> <p className=",
      "성공률ppclassname2713": "성공률</p> <p className=",
      "총호출ppclassname2714": "총 호출</p> <p className=",
      "오류율ppclassnametextlg2715": "오류율</p> <p className={`text-lg font-bold ${metric.errorRate > 20 ?",
      "최소최대ppclassname2716": "최소/최대</p> <p className=",
      "마지막호출ppclassname2717": "마지막 호출</p> <p className=",
      "metricminutessincelastcall2718": "{metric.minutesSinceLastCall !== null ? `${metric.minutesSinceLastCall}분 전` :",
      "pdivdiv성능인디2719": "} </p> </div> </div> {/* 성능 인디케이터 */} <div className=",
      "getstatusicondatahealth2720": "}> {getStatusIcon(data.health.status)} {data.health.status.toUpperCase()} </span> </div> <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-4\"> <div className=\"text-center\"> <p className=\"text-2xl font-bold text-blue-600\">{data.health.summary.totalOperations}</p> <p className=\"text-sm text-gray-600\">총 작업 수</p> </div> <div className=\"text-center\"> <p className=\"text-2xl font-bold text-green-600\">{data.health.summary.healthyOperations}</p> <p className=\"text-sm text-gray-600\">정상 작업</p> </div> <div className=\"text-center\"> <p className=\"text-2xl font-bold text-purple-600\">{data.health.summary.totalCalls.toLocaleString()}</p> <p className=\"text-sm text-gray-600\">총 호출 수</p> </div> <div className=\"text-center\"> <p className=\"text-2xl font-bold text-red-600\">{data.health.summary.totalErrors.toLocaleString()}</p> <p className=\"text-sm text-gray-600\">총 오류 수</p> </div> <div className=\"text-center\"> <p className=\"text-2xl font-bold text-orange-600\">{data.health.summary.overallErrorRate}%</p> <p className=\"text-sm text-gray-600\">전체 오류율</p> </div> </div> {data.health.issues.length > 0 && ( <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\"> <h3 className=\"font-semibold text-red-800 mb-2\">🚨 발견된 문제점</h3> <ul className=\"list-disc list-inside text-red-700\"> {data.health.issues.map((issue, index) => ( <li key={index}>{issue}</li> ))} </ul> </div> )} </div> {/* 개별 메트릭 */} <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\"> {Object.entries(data.metrics).map(([name, metric]) => ( <div key={name} className=\"bg-white rounded-lg shadow-md p-6\"> <h3 className=\"text-lg font-semibold mb-4 capitalize\"> {name.replace(/-/g, ' ')} </h3> <div className=\"grid grid-cols-2 gap-4 text-sm\"> <div> <p className=\"text-gray-600\">평균 응답시간</p> <p className=\"text-lg font-bold text-blue-600\">{metric.avgResponseTime}ms</p> </div> <div> <p className=\"text-gray-600\">성공률</p> <p className=\"text-lg font-bold text-green-600\">{metric.successRate}%</p> </div> <div> <p className=\"text-gray-600\">총 호출</p> <p className=\"text-lg font-bold text-purple-600\">{metric.totalCalls.toLocaleString()}</p> </div> <div> <p className=\"text-gray-600\">오류율</p> <p className={",
      "metricerrorratep2721": "}> {metric.errorRate}% </p> </div> <div> <p className=\"text-gray-600\">최소/최대</p> <p className=\"text-sm text-gray-800\">{metric.minResponseTime}ms / {metric.maxResponseTime}ms</p> </div> <div> <p className=\"text-gray-600\">마지막 호출</p> <p className=\"text-sm text-gray-800\"> {metric.minutesSinceLastCall !== null ?",
      "napdivdiv2722": ": 'N/A' } </p> </div> </div> {/* 성능 인디케이터 */} <div className=\"mt-4 w-full bg-gray-200 rounded-full h-2\"> <div className={",
      "알수없는오류2723": ": '알 수 없는 오류",
      "초기화에실패했습니다2724": ": '초기화에 실패했습니다.",
      "핵심정규화함수추가cons2725": ") }); // 🔥 핵심: 정규화 함수 추가 const normalizeGuideData = (data: any, locationName: string) => { if (!data) { throw new Error('가이드 데이터가 없습니다.'); } // 🔥 핵심: content 래핑 구조 올바른 처리 let sourceData = data; // data.content가 있으면 그것을 사용 (가장 일반적인 케이스) if (data.content && typeof data.content === 'object') { sourceData = data.content; console.log('✅ content 필드에서 데이터 추출'); } // data가 직접 overview, route, realTimeGuide를 가지면 직접 사용 else if (data.overview || data.route || data.realTimeGuide) { sourceData = data; console.log('✅ 직접 구조에서 데이터 추출'); } else { console.error('❌ 올바른 가이드 구조를 찾을 수 없음:', Object.keys(data)); throw new Error('올바른 가이드 데이터 구조가 아닙니다.'); } // 🔥 정규화된 GuideData 생성 const normalizedData = { overview: { title: sourceData.overview?.title || locationName, summary: sourceData.overview?.summary || '', narrativeTheme: sourceData.overview?.narrativeTheme || '', keyFacts: Array.isArray(sourceData.overview?.keyFacts) ? sourceData.overview.keyFacts : [], visitingTips: sourceData.overview?.visitingTips, historicalBackground: sourceData.overview?.historicalBackground, visitInfo: sourceData.overview?.visitInfo || {} }, route: { steps: Array.isArray(sourceData.route?.steps) ? sourceData.route.steps : [] }, realTimeGuide: { chapters: Array.isArray(sourceData.realTimeGuide?.chapters) ? sourceData.realTimeGuide.chapters : [], ...sourceData.realTimeGuide }, metadata: { originalLocationName: locationName, generatedAt: sourceData.metadata?.generatedAt || new Date().toISOString(), version: sourceData.metadata?.version || '1.0', language: sourceData.metadata?.language || 'ko', ...sourceData.metadata } }; // 🔥 챕터 ID 정규화 (타입 요구사항 충족) if (normalizedData.realTimeGuide?.chapters) { normalizedData.realTimeGuide.chapters = normalizedData.realTimeGuide.chapters.map((chapter, index) => { // 🔥 챕터 데이터 정규화: 3개 필드를 narrative로 통합 const normalizedChapter = { ...chapter, id: chapter.id !== undefined ? chapter.id : index, title: chapter.title || `챕터 ${index + 1}`, // narrative가 있으면 사용, 없으면 3개 필드 합치기 narrative: chapter.narrative || [chapter.sceneDescription, chapter.coreNarrative, chapter.humanStories] .filter(Boolean).join(' '), nextDirection: chapter.nextDirection || '' }; return normalizedChapter; }); } return normalizedData; }; export default function MyGuidePage({ params }: { params: Promise",
      "nulluseeffectpara2726": "(null); useEffect(() => { params.then(setResolvedParams); }, [params]); useEffect(() => { if (!resolvedParams?.id) return; try { const guides = JSON.parse(localStorage.getItem(\"myGuides\") || \"[]\"); const found = guides.find((g: any) => encodeURIComponent(g.metadata?.originalLocationName) === resolvedParams.id); if (found) { // 🔥 핵심: 저장된 가이드 데이터 정규화 const locationName = found.metadata?.originalLocationName || 'Unknown Location'; const normalizedGuide = normalizeGuideData(found, locationName); setGuide(normalizedGuide); } else { setError('저장된 가이드를 찾을 수 없습니다.'); } } catch (e) { console.error('가이드 로드 오류:', e); setError('가이드를 불러오는 중 오류가 발생했습니다.'); } finally { setLoading(false); } }, [resolvedParams?.id]); if (loading) { return (",
      "currentlanguageko가2727": "{currentLanguage === 'ko' ? \"가이드를 찾을 수 없습니다\" : currentLanguage === 'en' ? \"Guide Not Found\" : currentLanguage === 'ja' ? \"ガイドが見つかりません\" : currentLanguage === 'zh' ? \"找不到指南\" : \"Guía No Encontrada\"}",
      "errorcurrentlanguage2728": "{error || (currentLanguage === 'ko' ? '요청하신 가이드가 존재하지 않습니다.' : currentLanguage === 'en' ? 'The requested guide does not exist.' : currentLanguage === 'ja' ? 'リクエストされたガイドは存在しません。' : currentLanguage === 'zh' ? '请求的指南不存在。' : 'La guía solicitada no existe.')}",
      "저장된가이드로딩중2731": "저장된 가이드 로딩 중",
      "가이드를불러오고있어요2732": "가이드를 불러오고 있어요...",
      "가이드데이터가없습니다2733": "가이드 데이터가 없습니다.",
      "content필드에서데이터추출2734": "✅ content 필드에서 데이터 추출",
      "직접구조에서데이터추출2735": "✅ 직접 구조에서 데이터 추출",
      "올바른가이드구조를찾을수없음2736": "❌ 올바른 가이드 구조를 찾을 수 없음:",
      "올바른가이드데이터구조가아닙니다2737": "올바른 가이드 데이터 구조가 아닙니다.",
      "sourcedatametadata2738": ", ...sourceData.metadata } }; // 🔥 챕터 ID 정규화 (타입 요구사항 충족) if (normalizedData.realTimeGuide?.chapters) { normalizedData.realTimeGuide.chapters = normalizedData.realTimeGuide.chapters.map((chapter, index) => { // 🔥 챕터 데이터 정규화: 3개 필드를 narrative로 통합 const normalizedChapter = { ...chapter, id: chapter.id !== undefined ? chapter.id : index, title: chapter.title || `챕터 ${index + 1}`, // narrative가 있으면 사용, 없으면 3개 필드 합치기 narrative: chapter.narrative || [chapter.sceneDescription, chapter.coreNarrative, chapter.humanStories] .filter(Boolean).join(",
      "constfoundguidesfind2739": "); const found = guides.find((g: any) => encodeURIComponent(g.metadata?.originalLocationName) === resolvedParams.id); if (found) { // 🔥 핵심: 저장된 가이드 데이터 정규화 const locationName = found.metadata?.originalLocationName ||",
      "저장된가이드를찾을수없습니다2740": "저장된 가이드를 찾을 수 없습니다.",
      "가이드로드오류2741": "가이드 로드 오류:",
      "가이드를불러오는중오류가발생했습니다2742": "가이드를 불러오는 중 오류가 발생했습니다.",
      "저장된가이드를불러오고있어요2743": "저장된 가이드를 불러오고 있어요...",
      "가이드를찾을수없습니다2744": "가이드를 찾을 수 없습니다",
      "요청하신가이드가존재하지않습니다2745": "요청하신 가이드가 존재하지 않습니다.",
      "홈으로2746": "홈으로",
      "tryconstkeysobjectke2764": "{ try { const keys = Object.keys(localStorage); const guideKeys = keys.filter(key => key.startsWith('ai_guide_') || key.startsWith('guide-cache:') || key.startsWith('multilang-guide:') ); return guideKeys.map(key => { try { const data = JSON.parse(localStorage.getItem(key) || '{}'); const metadata = data.metadata || {}; const overview = data.overview || {}; const realTimeGuide = data.realTimeGuide || {}; return { id: key, title: overview.title || metadata.originalLocationName || 'Unknown Guide', location: metadata.originalLocationName || 'Unknown Location', language: metadata.language || 'ko', createdAt: metadata.generatedAt || new Date().toISOString(), chapters: realTimeGuide.chapters?.length || 0, lastAccessed: localStorage.getItem(`${key}_last_accessed`) || undefined, isFavorite: localStorage.getItem(`${key}_favorite`) === 'true' }; } catch { return null; } }).filter(Boolean) as LocalGuideEntry[]; } catch { return []; } }; // 사용자 통계 계산 const calculateUserStats = (guides: LocalGuideEntry[]): UserStats => { const languagesUsed = [...new Set(guides.map(g => g.language))]; const totalChapters = guides.reduce((sum, g) => sum + g.chapters, 0); const favoriteCount = guides.filter(g => g.isFavorite).length; // 가장 많이 사용된 언어 const languageCounts = guides.reduce((acc, guide) => { acc[guide.language] = (acc[guide.language] || 0) + 1; return acc; }, {} as Record",
      "constmostusedlanguageob2765": "); const mostUsedLanguage = Object.entries(languageCounts) .sort(([,a], [,b]) => b - a)[0]?.[0] || 'ko'; return { totalGuides: guides.length, completedTours: guides.filter(g => g.lastAccessed).length, favoriteLocations: favoriteCount, totalDuration: totalChapters * 8, // 챕터당 평균 8분 가정 languagesUsed, mostVisitedType: mostUsedLanguage }; }; // 안전한 localStorage 삭제 함수 const safeDeleteFromStorage = (id: string): void => { try { if (id.startsWith('guide-cache:') || id.startsWith('ai_guide_') || id.startsWith('multilang-guide:')) { localStorage.removeItem(id); localStorage.removeItem(`${id}_last_accessed`); localStorage.removeItem(`${id}_favorite`); console.log('가이드 삭제 완료:', id); } } catch (error) { console.error('가이드 삭제 실패:', error); } }; // 즐겨찾기 토글 const toggleFavorite = (id: string): void => { try { const currentFavorite = localStorage.getItem(`${id}_favorite`) === 'true'; localStorage.setItem(`${id}_favorite`, (!currentFavorite).toString()); } catch (error) { console.error('즐겨찾기 토글 실패:', error); } }; // 마지막 접근 시간 업데이트 const updateLastAccessed = (id: string): void => { try { localStorage.setItem(`${id}_last_accessed`, new Date().toISOString()); } catch (error) { console.error('접근 시간 업데이트 실패:', error); } }; export default function MyPage() { const router = useRouter(); const { data: session, status } = useSession(); const { currentLanguage, t } = useLanguage(); const [activeTab, setActiveTab] = useState",
      "ifstatusunauthent2767": "); } if (status === 'unauthenticated') { router.push('/auth/signin'); return null; } // 필터링 및 정렬 const filteredGuides = localGuides .filter(guide => { const matchesSearch = guide.title.toLowerCase().includes(searchTerm.toLowerCase()) || guide.location.toLowerCase().includes(searchTerm.toLowerCase()); const matchesLanguage = filterLanguage === 'all' || guide.language === filterLanguage; return matchesSearch && matchesLanguage; }) .sort((a, b) => { switch (sortBy) { case 'name': return a.title.localeCompare(b.title); case 'chapters': return b.chapters - a.chapters; case 'date': default: return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime(); } }); const favoriteGuides = filteredGuides.filter(guide => guide.isFavorite); // 가이드 삭제 핸들러 const handleDeleteGuide = (id: string) => { const confirmMessage = typeof t('common.confirmDelete') === 'string' ? String(t('common.confirmDelete')) : '이 가이드를 삭제하시겠습니까?'; if (confirm(confirmMessage)) { safeDeleteFromStorage(id); setLocalGuides(prev => prev.filter(guide => guide.id !== id)); // 통계 업데이트 const updatedGuides = localGuides.filter(guide => guide.id !== id); setUserStats(calculateUserStats(updatedGuides)); } }; // 가이드 보기 핸들러 const handleViewGuide = (guide: LocalGuideEntry) => { updateLastAccessed(guide.id); router.push(`/guide/${encodeURIComponent(guide.location)}`); }; // 즐겨찾기 토글 핸들러 const handleToggleFavorite = (id: string) => { toggleFavorite(id); setLocalGuides(prev => prev.map(guide => guide.id === id ? { ...guide, isFavorite: !guide.isFavorite } : guide ) ); }; const formatDate = (dateString: string) => { const date = new Date(dateString); const now = new Date(); const diffTime = Math.abs(now.getTime() - date.getTime()); const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); if (diffDays === 1) return t('date.today') || '오늘'; if (diffDays === 2) return t('date.yesterday') || '어제'; if (diffDays",
      "히스토리헤더2769": "{/* 히스토리 헤더 */}",
      "tmypagehistorytitle2770": "{t('mypage.historyTitle') || '나의 가이드'}",
      "tmypagetotalcountcoun2772": "{t('mypage.totalCount', { count: filteredGuides.length.toString() }) || `총 ${filteredGuides.length}개`} {t('mypage.guides') || '가이드'}",
      "tmypagealllanguages2774": "{t('mypage.allLanguages') || '모든 언어'}",
      "tlanguageskorean한국어2775": "{t('languages.korean') || '한국어'}",
      "가이드목록2776": "{/* 가이드 목록 */}",
      "tmypagenohistorytitle2778": "{t('mypage.noHistoryTitle') || '가이드 히스토리가 없습니다'}",
      "tmypagefavoritestitle2782": "{t('mypage.favoritesTitle') || '즐겨찾기 가이드'}",
      "tmypagefavoritescount2784": "{t('mypage.favoritesCount', { count: favoriteGuides.length.toString() }) || `${favoriteGuides.length}개`} {t('mypage.favoritesShort') || '즐겨찾기'}",
      "즐겨찾기가이드목록2785": "{/* 즐겨찾기 가이드 목록 */}",
      "guidechapters개챕터2786": "📚 {guide.chapters}개 챕터",
      "tmypagenofavoritestitle2787": "{t('mypage.noFavoritesTitle') || '즐겨찾기한 가이드가 없습니다'}",
      "오프라인헤더2791": "{/* 오프라인 헤더 */}",
      "tmypageofflinetitle2792": "{t('mypage.offlineTitle') || '오프라인 다운로드'}",
      "tmypagedownloadscount2794": "{t('mypage.downloadsCount', { count: offlineGuides.length.toString() }) || `${offlineGuides.length}개`} {t('common.downloads') || '다운로드'}",
      "오프라인가이드목록2795": "{/* 오프라인 가이드 목록 */}",
      "guidechapterstmypage2797": "📚 {guide.chapters}{t('mypage.chapters') || '개 챕터'}",
      "tmypagedownloaded2798": "💾 {t('mypage.downloaded') || '다운로드됨'}",
      "tmypagenoofflinetitle2799": "{t('mypage.noOfflineTitle') || '오프라인 다운로드된 가이드가 없습니다'}",
      "tmypageofflineinfotitle2801": "{t('mypage.offlineInfoTitle') || '오프라인 기능 안내'}",
      "tmypageofflinefeature32804": "• {t('mypage.offlineFeature3') || '모바일 저장 공간에 안전하게 보관'}",
      "개인화가이드진단섹션2805": "{/* 개인화 가이드 진단 섹션 */}",
      "tmypagepersonalitytitle2806": "{t('mypage.personalityTitle') || '개인화 가이드 맨춤 진단'}",
      "tmypagediagnosiscomplete2807": "{t('mypage.diagnosisComplete') || '진단 완료'}",
      "tmypagediagnosiscompletede2808": "{t('mypage.diagnosisCompleteDesc') || '당신의 성격 유형에 맞는 개인화된 가이드가 제공됩니다.'}",
      "tmypagereliability신2809": "{t('mypage.reliability') || '신뢰도'}",
      "tmypageaccuracy정확도2810": "{t('mypage.accuracy') || '정확도'}",
      "tmypagetimerequired2811": "{t('mypage.timeRequired') || '소요시간'}",
      "2분2812": "2분",
      "tmypageverifiedcountries2813": "{t('mypage.verifiedCountries') || '검증국가'}",
      "20개국2814": "20개국",
      "tmypagechangesafterdiagnos2817": "{t('mypage.changesAfterDiagnosis') || '진단 후 변화'}",
      "tmypagefeature1당신2818": "• {t('mypage.feature1') || '당신의 성격에 맞는 콘텐츠 깊이 조절'}",
      "tmypagefeature2개인2819": "• {t('mypage.feature2') || '개인 맞춤형 가이드 스타일 적용'}",
      "tmypagefeature3상호2820": "• {t('mypage.feature3') || '상호작용 레벨 최적화'}",
      "tmypagefeature4감정2821": "• {t('mypage.feature4') || '감정적 어조 개인화'}",
      "tmypageaccountsettings2824": "{t('mypage.accountSettings') || '계정 설정'}",
      "tmypagenamelabel이름2825": "{t('mypage.nameLabel') || '이름'}",
      "tmypageemaillabel이메2826": "{t('mypage.emailLabel') || '이메일'}",
      "tmypageemailnoteditablenot2827": "{t('mypage.emailNotEditableNote') || '이메일은 변경할 수 없습니다'}",
      "tmypagedefaultlanguage2828": "{t('mypage.defaultLanguage') || '기본 언어'}",
      "tlanguageskorean한국어2829": "{t('languages.korean') || '한국어'}",
      "알림설정2830": "{/* 알림 설정 */}",
      "tmypagenotificationsetting2831": "{t('mypage.notificationSettings') || '알림 설정'}",
      "tmypagenewfeaturenotificat2832": "{t('mypage.newFeatureNotifications') || '새로운 기능 알림'}",
      "tmypageguidecompletenotifi2833": "{t('mypage.guideCompleteNotifications') || '가이드 생성 완료 알림'}",
      "tmypagemarketingemails2834": "{t('mypage.marketingEmails') || '마케팅 이메일 수신'}",
      "데이터관리2835": "{/* 데이터 관리 */}",
      "tmypagedatamanagement2836": "{t('mypage.dataManagement') || '데이터 관리'}",
      "tmypageexportdata데이2837": "{t('mypage.exportData') || '데이터 내보내기'}",
      "tmypageexportdescription2838": "{t('mypage.exportDescription') || '모든 가이드 데이터를 JSON 형태로 다운로드'}",
      "tmypagedeletealldata2839": "{t('mypage.deleteAllData') || '모든 데이터 삭제'}",
      "tmypagedeletealldescriptio2840": "{t('mypage.deleteAllDescription') || '저장된 모든 가이드와 설정을 삭제합니다'}",
      "tauthlogout로그아웃2843": "{t('auth.logout') || '로그아웃'}",
      "tprofileaccount계정관2845": "{t('profile.account') || '계정 관리'}",
      "tauthlogout로그아웃2847": "{t('auth.logout') || '로그아웃'}",
      "sessionusernametpro2853": "{session?.user?.name || t('profile.user') || '사용자'} {/* @ts-ignore - NextAuth 타입 확장 */} {session?.user?.isAdmin && (",
      "관리자2854": "관리자",
      "탭네비게이션2855": "{/* 탭 네비게이션 */}",
      "tcommonloading로딩중2858": "{t('common.loading') || '로딩 중...'}",
      "개인화진단모달2859": "{/* 개인화 진단 모달 */}",
      "로컬가이드조회함수개선constg2861": "; // 로컬 가이드 조회 함수 (개선) const getAllLocalGuides = (): LocalGuideEntry[] => { try { const keys = Object.keys(localStorage); const guideKeys = keys.filter(key => key.startsWith(",
      "catchreturnnull2862": "}; } catch { return null; } }).filter(Boolean) as LocalGuideEntry[]; } catch { return []; } }; // 사용자 통계 계산 const calculateUserStats = (guides: LocalGuideEntry[]): UserStats => { const languagesUsed = [...new Set(guides.map(g => g.language))]; const totalChapters = guides.reduce((sum, g) => sum + g.chapters, 0); const favoriteCount = guides.filter(g => g.isFavorite).length; // 가장 많이 사용된 언어 const languageCounts = guides.reduce((acc, guide) => { acc[guide.language] = (acc[guide.language] || 0) + 1; return acc; }, {} as Record<string, number>); const mostUsedLanguage = Object.entries(languageCounts) .sort(([,a], [,b]) => b - a)[0]?.[0] ||",
      "returntotalguidesguides2863": "; return { totalGuides: guides.length, completedTours: guides.filter(g => g.lastAccessed).length, favoriteLocations: favoriteCount, totalDuration: totalChapters * 8, // 챕터당 평균 8분 가정 languagesUsed, mostVisitedType: mostUsedLanguage }; }; // 안전한 localStorage 삭제 함수 const safeDeleteFromStorage = (id: string): void => { try { if (id.startsWith(",
      "가이드삭제완료2864": "가이드 삭제 완료:",
      "가이드삭제실패2865": "가이드 삭제 실패:",
      "즐겨찾기토글실패2866": "즐겨찾기 토글 실패:",
      "접근시간업데이트실패2867": "접근 시간 업데이트 실패:",
      "개인화진단결과로드실패2869": "개인화 진단 결과 로드 실패:",
      "데이터로드실패2870": "데이터 로드 실패:",
      "returnnull필터링및정렬2871": "); return null; } // 필터링 및 정렬 const filteredGuides = localGuides .filter(guide => { const matchesSearch = guide.title.toLowerCase().includes(searchTerm.toLowerCase()) || guide.location.toLowerCase().includes(searchTerm.toLowerCase()); const matchesLanguage = filterLanguage ===",
      "이가이드를삭제하시겠습니까2873": "이 가이드를 삭제하시겠습니까?",
      "오늘2874": "오늘",
      "어제2875": "어제",
      "일전2876": "일 전",
      "주전2877": "주 전",
      "히스토리헤더divclassname2879": "{/* 히스토리 헤더 */} <div className=",
      "countfilteredguidesleng2882": ", { count: filteredGuides.length.toString() }) || `총 ${filteredGuides.length}개`} {t(",
      "가이드검색2884": "가이드 검색...",
      "모든언어2885": "모든 언어",
      "한국어2886": "한국어",
      "optionselectdiv2887": "}</option> </select> </div> {/* 가이드 목록 */} <div className=",
      "countfavoriteguidesleng2895": ", { count: favoriteGuides.length.toString() }) || `${favoriteGuides.length}개`} {t(",
      "즐겨찾기2896": "즐겨찾기",
      "spanguidechapters개챕터2897": "<span>📚 {guide.chapters}개 챕터</span> <span>🌐 {guide.language.toUpperCase()}</span> </div> <ChevronRight className=",
      "오프라인헤더divclassname2902": "{/* 오프라인 헤더 */} <div className=",
      "countofflineguideslengt2905": ", { count: offlineGuides.length.toString() }) || `${offlineGuides.length}개`} {t(",
      "다운로드2906": "다운로드",
      "개챕터2908": "개 챕터",
      "다운로드됨2909": "다운로드됨",
      "오디오파일까지함께저장2916": "오디오 파일까지 함께 저장",
      "모바일저장공간에안전하게보관2917": "모바일 저장 공간에 안전하게 보관",
      "개인화가이드진단섹션divcla2918": "{/* 개인화 가이드 진단 섹션 */} <div className=",
      "진단완료2920": "진단 완료",
      "당신의성격유형에맞는개인화된가이드가제공됩니다2921": "당신의 성격 유형에 맞는 개인화된 가이드가 제공됩니다.",
      "신뢰도2922": "신뢰도",
      "정확도2923": "정확도",
      "소요시간2924": "소요시간",
      "2분divdivdivclassname2925": "2분</div> </div> <div className=",
      "검증국가2926": "검증국가",
      "20개국divdivdivbutt2927": "20개국</div> </div> </div> <button onClick={() => setShowPersonalityModal(true)} className=",
      "다시진단하기2928": "다시 진단하기",
      "100만명ai시뮬레이션으로검증된5문항진단으로2929": "100만명 AI 시뮬레이션으로 검증된 5문항 진단으로 95%의 정확도로 개인화 가이드를 제공합니다. 20개국 문화적 공정성 검증 완룼.",
      "진단후변화2930": "진단 후 변화",
      "당신의성격에맞는콘텐츠깊이조절2931": "당신의 성격에 맞는 콘텐츠 깊이 조절",
      "개인맞춤형가이드스타일적용2932": "개인 맞춤형 가이드 스타일 적용",
      "상호작용레벨최적화2933": "상호작용 레벨 최적화",
      "감정적어조개인화2934": "감정적 어조 개인화",
      "진단시작하기2935": "진단 시작하기",
      "계정설정2936": "계정 설정",
      "이름2937": "이름",
      "이름을입력하세요2938": "이름을 입력하세요",
      "이메일2939": "이메일",
      "이메일은변경할수없습니다2940": "이메일은 변경할 수 없습니다",
      "기본언어2941": "기본 언어",
      "한국어2942": "한국어",
      "optionselectdiv2943": "}</option> </select> </div> </div> </div> {/* 알림 설정 */} <div className=",
      "알림설정2944": "알림 설정",
      "새로운기능알림2945": "새로운 기능 알림",
      "가이드생성완료알림2946": "가이드 생성 완료 알림",
      "마케팅이메일수신2947": "마케팅 이메일 수신",
      "데이터관리2948": "데이터 관리",
      "데이터내보내기2949": "데이터 내보내기",
      "모든가이드데이터를json형태로다운로드2950": "모든 가이드 데이터를 JSON 형태로 다운로드",
      "모든데이터삭제2951": "모든 데이터 삭제",
      "저장된모든가이드와설정을삭제합니다2952": "저장된 모든 가이드와 설정을 삭제합니다",
      "divbuttondivd2953": "/> </div> </button> </div> </div> {/* 로그아웃 */} <div className=",
      "클라이언트데이터정리중2955": "🧹 클라이언트 데이터 정리 중...",
      "서버강제로그아웃호출중2956": "🔥 서버 강제 로그아웃 호출 중...",
      "서버강제로그아웃완료2957": "✅ 서버 강제 로그아웃 완료",
      "서버강제로그아웃실패2958": "⚠️ 서버 강제 로그아웃 실패:",
      "nextauthsignout호출중2959": "🔄 NextAuth signOut 호출 중...",
      "redirecttrue자동리다이렉트활2960": ", redirect: true // 자동 리다이렉트 활성화 }); } catch (error) { console.error(",
      "error에러발생시에도기본정리및2961": ", error); // 에러 발생시에도 기본 정리 및 리다이렉트 try { await fetch(",
      "정리프로세스실패2962": "정리 프로세스 실패:",
      "로그아웃2963": "로그아웃",
      "계정관리2964": "계정 관리",
      "서버강제로그아웃완료2967": "✅ 서버 강제 로그아웃 완료",
      "서버강제로그아웃실패2968": "⚠️ 서버 강제 로그아웃 실패:",
      "nextauthsignout호출중2969": "🔄 NextAuth signOut 호출 중...",
      "redirecttrue자동리다이렉트활2970": ", redirect: true // 자동 리다이렉트 활성화 }); // NextAuth가 자동으로 홈페이지로 리다이렉트하므로 추가 로직 불필요 } catch (error) { console.error(",
      "error에러발생시에도기본정리및2971": ", error); // 에러 발생시에도 기본 정리 및 리다이렉트 try { await fetch(",
      "정리프로세스실패2972": "정리 프로세스 실패:",
      "로그아웃2973": "로그아웃",
      "사용자2979": "사용자",
      "관리자spanspandiv2980": "관리자 </span> )} </span> </div> </div> </div> </div> </div> <div className=",
      "탭네비게이션divclass2981": "}}> {/* 탭 네비게이션 */} <div className=",
      "가이드2983": "가이드",
      "즐겨찾기가이드2984": "즐겨찾기 가이드",
      "즐겨찾기2985": "즐겨찾기",
      "오프라인다운로드2986": "오프라인 다운로드",
      "오프라인2987": "오프라인",
      "세팅2988": "세팅",
      "세팅2989": "세팅",
      "shortlabelspanspan2990": "{shortLabel}</span> </span> </button> ))} </nav> </div> </div> {/* 탭 컨텐츠 */} {isLoading ? ( <div className=",
      "로딩중2991": "로딩 중...",
      "truecatchretu2992": ") === 'true' }; } catch { return null; } }).filter(Boolean) as LocalGuideEntry[]; } catch { return []; } }; // 사용자 통계 계산 const calculateUserStats = (guides: LocalGuideEntry[]): UserStats => { const languagesUsed = [...new Set(guides.map(g => g.language))]; const totalChapters = guides.reduce((sum, g) => sum + g.chapters, 0); const favoriteCount = guides.filter(g => g.isFavorite).length; // 가장 많이 사용된 언어 const languageCounts = guides.reduce((acc, guide) => { acc[guide.language] = (acc[guide.language] || 0) + 1; return acc; }, {} as Record<string, number>); const mostUsedLanguage = Object.entries(languageCounts) .sort(([,a], [,b]) => b - a)[0]?.[0] || 'ko'; return { totalGuides: guides.length, completedTours: guides.filter(g => g.lastAccessed).length, favoriteLocations: favoriteCount, totalDuration: totalChapters * 8, // 챕터당 평균 8분 가정 languagesUsed, mostVisitedType: mostUsedLanguage }; }; // 안전한 localStorage 삭제 함수 const safeDeleteFromStorage = (id: string): void => { try { if (id.startsWith('guide-cache:') || id.startsWith('ai_guide_') || id.startsWith('multilang-guide:')) { localStorage.removeItem(id); localStorage.removeItem(",
      "consolelog가이드삭제완료i2993": "); console.log('가이드 삭제 완료:', id); } } catch (error) { console.error('가이드 삭제 실패:', error); } }; // 즐겨찾기 토글 const toggleFavorite = (id: string): void => { try { const currentFavorite = localStorage.getItem(",
      "currentfavoritetostring2994": ", (!currentFavorite).toString()); } catch (error) { console.error('즐겨찾기 토글 실패:', error); } }; // 마지막 접근 시간 업데이트 const updateLastAccessed = (id: string): void => { try { localStorage.setItem(",
      "newdatetoisostring2995": ", new Date().toISOString()); } catch (error) { console.error('접근 시간 업데이트 실패:', error); } }; export default function MyPage() { const router = useRouter(); const { data: session, status } = useSession(); const { currentLanguage, t } = useLanguage(); const [activeTab, setActiveTab] = useState<TabType>('history'); const [localGuides, setLocalGuides] = useState<LocalGuideEntry[]>([]); const [fileGuides, setFileGuides] = useState<FileGuideEntry[]>([]); const [userStats, setUserStats] = useState<UserStats | null>(null); const [isLoading, setIsLoading] = useState(true); const [searchTerm, setSearchTerm] = useState(''); const [showPersonalityModal, setShowPersonalityModal] = useState(false); const [personalityResults, setPersonalityResults] = useState<any>(null); const [sortBy, setSortBy] = useState<'date' | 'name' | 'chapters'>('date'); const [filterLanguage, setFilterLanguage] = useState<string>('all'); // 개인화 진단 결과 로드 useEffect(() => { try { const saved = localStorage.getItem('personalityDiagnosis'); if (saved) { setPersonalityResults(JSON.parse(saved)); } } catch (error) { console.error('개인화 진단 결과 로드 실패:', error); } }, []); // 개인화 진단 완료 핸들러 const handlePersonalityComplete = (results: any) => { setPersonalityResults(results); }; // 데이터 로드 useEffect(() => { const loadData = async () => { setIsLoading(true); try { const guides = getAllLocalGuides(); const stats = calculateUserStats(guides); setLocalGuides(guides); setUserStats(stats); // 파일 가이드는 향후 구현 setFileGuides([]); } catch (error) { console.error('데이터 로드 실패:', error); } finally { setIsLoading(false); } }; loadData(); }, []); // 인증 확인 if (status === 'loading') { return ( <div className=\"min-h-screen flex items-center justify-center\"> <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-black\"></div> </div> ); } if (status === 'unauthenticated') { router.push('/auth/signin'); return null; } // 필터링 및 정렬 const filteredGuides = localGuides .filter(guide => { const matchesSearch = guide.title.toLowerCase().includes(searchTerm.toLowerCase()) || guide.location.toLowerCase().includes(searchTerm.toLowerCase()); const matchesLanguage = filterLanguage === 'all' || guide.language === filterLanguage; return matchesSearch && matchesLanguage; }) .sort((a, b) => { switch (sortBy) { case 'name': return a.title.localeCompare(b.title); case 'chapters': return b.chapters - a.chapters; case 'date': default: return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime(); } }); const favoriteGuides = filteredGuides.filter(guide => guide.isFavorite); // 가이드 삭제 핸들러 const handleDeleteGuide = (id: string) => { const confirmMessage = typeof t('common.confirmDelete') === 'string' ? String(t('common.confirmDelete')) : '이 가이드를 삭제하시겠습니까?'; if (confirm(confirmMessage)) { safeDeleteFromStorage(id); setLocalGuides(prev => prev.filter(guide => guide.id !== id)); // 통계 업데이트 const updatedGuides = localGuides.filter(guide => guide.id !== id); setUserStats(calculateUserStats(updatedGuides)); } }; // 가이드 보기 핸들러 const handleViewGuide = (guide: LocalGuideEntry) => { updateLastAccessed(guide.id); router.push(",
      "즐겨찾기토글핸들러consthan2996": "); }; // 즐겨찾기 토글 핸들러 const handleToggleFavorite = (id: string) => { toggleFavorite(id); setLocalGuides(prev => prev.map(guide => guide.id === id ? { ...guide, isFavorite: !guide.isFavorite } : guide ) ); }; const formatDate = (dateString: string) => { const date = new Date(dateString); const now = new Date(); const diffTime = Math.abs(now.getTime() - date.getTime()); const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); if (diffDays === 1) return t('date.today') || '오늘'; if (diffDays === 2) return t('date.yesterday') || '어제'; if (diffDays <= 7) return",
      "mathceildiffdays7t2997": "${Math.ceil(diffDays / 7)}${t('common.weeksAgo') || '주 전'}",
      "minstcommonminutes2999": "${mins}${t('common.minutes') || '분'}",
      "divclassnameflexi3001": "); }} > <div className=\"flex items-start justify-between\"> <div className=\"flex-1\"> <h3 className=\"font-medium text-black mb-1\">{guide.title}</h3> <p className=\"text-sm text-gray-500 mb-2\">📍 {guide.location}</p> <div className=\"flex items-center gap-4 text-xs text-gray-400\"> <span>🗓 {formatDate(guide.createdAt)}</span> <span>📚 {guide.chapters}{t('mypage.chapters') || '개 챕터'}</span> <span>🌐 {guide.language.toUpperCase()}</span> {guide.lastAccessed && ( <span>👁 {formatDate(guide.lastAccessed)}</span> )} </div> </div> <div className=\"flex items-center gap-2 ml-4\"> <button onClick={(e) => { e.stopPropagation(); toggleFavorite(guide.id); const updatedGuides = getAllLocalGuides(); setLocalGuides(updatedGuides); }} className=\"p-2 text-gray-400 hover:text-yellow-500 transition-colors\" > <Star className={",
      "buttonchevronrightc3002": "} /> </button> <ChevronRight className=\"h-4 w-4 text-gray-400\" /> </div> </div> </div> ))} </div> {filteredGuides.length === 0 && ( <div className=\"text-center py-12\"> <Clock className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" /> <h3 className=\"text-lg font-medium text-black mb-2\">{t('mypage.noHistoryTitle') || '가이드 히스토리가 없습니다'}</h3> <p className=\"text-gray-500 mb-4\">{t('mypage.noHistoryDescription') || '새로운 장소를 검색하여 가이드를 생성해보세요!'}</p> <button onClick={() => router.push('/')} className=\"px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-800\" > {t('mypage.createGuideButton') || '가이드 생성하기'} </button> </div> )} </div> ); case 'favorites': { const favoriteGuides = filteredGuides.filter(guide => guide.isFavorite); return ( <div className=\"max-w-4xl\"> {/* 즐겨찾기 헤더 */} <div className=\"flex items-center justify-between mb-6\"> <div> <h2 className=\"text-xl font-semibold text-black\">{t('mypage.favoritesTitle') || '즐겨찾기 가이드'}</h2> <p className=\"text-gray-500 text-sm\">{t('mypage.favoritesDescription') || '실시간 가이드에서 즐겨찾기한 가이드들입니다'}</p> </div> <div className=\"text-sm text-gray-500\"> {t('mypage.favoritesCount', { count: favoriteGuides.length.toString() }) ||",
      "tmypagefavoritesshort3003": "} {t('mypage.favoritesShort') || '즐겨찾기'} </div> </div> {/* 즐겨찾기 가이드 목록 */} <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\"> {favoriteGuides.map((guide) => ( <div key={guide.id} className=\"bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow cursor-pointer\" onClick={() => { updateLastAccessed(guide.id); router.push(",
      "divclassnameflexi3004": "); }} > <div className=\"flex items-start justify-between mb-3\"> <div className=\"flex-1\"> <h3 className=\"font-medium text-black mb-1 line-clamp-2\">{guide.title}</h3> <p className=\"text-sm text-gray-500 mb-2\">📍 {guide.location}</p> </div> <div className=\"ml-2\"> <Star className=\"h-5 w-5 text-yellow-500 fill-current\" /> </div> </div> <div className=\"flex items-center justify-between\"> <div className=\"flex items-center gap-4 text-xs text-gray-400\"> <span>📚 {guide.chapters}개 챕터</span> <span>🌐 {guide.language.toUpperCase()}</span> </div> <ChevronRight className=\"h-4 w-4 text-gray-400\" /> </div> </div> ))} </div> {favoriteGuides.length === 0 && ( <div className=\"text-center py-12\"> <Star className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" /> <h3 className=\"text-lg font-medium text-black mb-2\">{t('mypage.noFavoritesTitle') || '즐겨찾기한 가이드가 없습니다'}</h3> <p className=\"text-gray-500 mb-4\">{t('mypage.noFavoritesDescription') || '실시간 가이드를 보며 별표 버튼을 클릭하여 즐겨찾기를 추가해보세요!'}</p> <button onClick={() => router.push('/')} className=\"px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-800\" > {t('mypage.createGuideButton') || '가이드 생성하기'} </button> </div> )} </div> ); } case 'offline': { // 오프라인 다운로드된 가이드들 (향후 구현을 위한 mock 데이터) const offlineGuides: LocalGuideEntry[] = []; return ( <div className=\"max-w-4xl\"> {/* 오프라인 헤더 */} <div className=\"flex items-center justify-between mb-6\"> <div> <h2 className=\"text-xl font-semibold text-black\">{t('mypage.offlineTitle') || '오프라인 다운로드'}</h2> <p className=\"text-gray-500 text-sm\">{t('mypage.offlineDescription') || '오프라인에서도 이용할 수 있도록 다운로드한 가이드들입니다'}</p> </div> <div className=\"text-sm text-gray-500\"> {t('mypage.downloadsCount', { count: offlineGuides.length.toString() }) ||",
      "tcommondownloads다3005": "} {t('common.downloads') || '다운로드'} </div> </div> {/* 오프라인 가이드 목록 */} <div className=\"space-y-4\"> {offlineGuides.map((guide) => ( <div key={guide.id} className=\"bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow\" > <div className=\"flex items-start justify-between\"> <div className=\"flex-1\"> <div className=\"flex items-center gap-2 mb-2\"> <h3 className=\"font-medium text-black\">{guide.title}</h3> <span className=\"px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full\"> {t('mypage.offlineAvailable') || '오프라인 사용 가능'} </span> </div> <p className=\"text-sm text-gray-500 mb-2\">📍 {guide.location}</p> <div className=\"flex items-center gap-4 text-xs text-gray-400\"> <span>📚 {guide.chapters}{t('mypage.chapters') || '개 챕터'}</span> <span>🌐 {guide.language.toUpperCase()}</span> <span>💾 {t('mypage.downloaded') || '다운로드됨'}</span> </div> </div> <div className=\"flex items-center gap-2 ml-4\"> <button className=\"p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors\" title={String(t('mypage.offlinePlay') || '오프라인 재생')} > <Play className=\"h-4 w-4\" /> </button> <button className=\"p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors\" title={String(t('mypage.deleteOffline') || '오프라인 파일 삭제')} > <Trash className=\"h-4 w-4\" /> </button> </div> </div> </div> ))} </div> {offlineGuides.length === 0 && ( <div className=\"text-center py-12\"> <Download className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" /> <h3 className=\"text-lg font-medium text-black mb-2\">{t('mypage.noOfflineTitle') || '오프라인 다운로드된 가이드가 없습니다'}</h3> <p className=\"text-gray-500 mb-4\"> {t('mypage.noOfflineDescription') || '실시간 가이드를 보며 다운로드 버튼을 클릭하여 오프라인에서도 이용할 수 있도록 저장해보세요!'} </p> <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mt-6\"> <div className=\"flex items-start gap-3\"> <div className=\"p-2 bg-blue-100 rounded-full\"> <Download className=\"h-5 w-5 text-blue-600\" /> </div> <div className=\"text-left\"> <h4 className=\"font-medium text-blue-900 mb-1\">{t('mypage.offlineInfoTitle') || '오프라인 기능 안내'}</h4> <p className=\"text-sm text-blue-700\"> • {t('mypage.offlineFeature1') || '인터넷 연결 없이도 가이드 이용 가능'}<br /> • {t('mypage.offlineFeature2') || '오디오 파일까지 함께 저장'}<br /> • {t('mypage.offlineFeature3') || '모바일 저장 공간에 안전하게 보관'} </p> </div> </div> </div> </div> )} </div> ); } case 'settings': return ( <div className=\"max-w-4xl space-y-6\"> {/* 개인화 가이드 진단 섹션 */} <div className=\"bg-white rounded-lg border border-gray-200 p-6\"> <div className=\"flex items-center gap-3 mb-4\"> <Brain className=\"w-6 h-6 text-black\" /> <h3 className=\"text-lg font-semibold text-black\"> {t('mypage.personalityTitle') || '개인화 가이드 맨춤 진단'} </h3> <Sparkles className=\"w-5 h-5 text-gray-600\" /> </div> {personalityResults ? ( <div className=\"space-y-4\"> <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\"> <div className=\"flex items-center gap-2 mb-2\"> <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div> <span className=\"text-sm font-medium text-green-800\">{t('mypage.diagnosisComplete') || '진단 완료'}</span> </div> <p className=\"text-green-700 text-sm\"> {t('mypage.diagnosisCompleteDesc') || '당신의 성격 유형에 맞는 개인화된 가이드가 제공됩니다.'} </p> </div> <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\"> <div className=\"text-center p-3 bg-gray-50 rounded-lg\"> <div className=\"text-sm text-gray-600 mb-1\">{t('mypage.reliability') || '신뢰도'}</div> <div className=\"text-lg font-semibold text-black\">95%</div> </div> <div className=\"text-center p-3 bg-gray-50 rounded-lg\"> <div className=\"text-sm text-gray-600 mb-1\">{t('mypage.accuracy') || '정확도'}</div> <div className=\"text-lg font-semibold text-black\">92%</div> </div> <div className=\"text-center p-3 bg-gray-50 rounded-lg\"> <div className=\"text-sm text-gray-600 mb-1\">{t('mypage.timeRequired') || '소요시간'}</div> <div className=\"text-lg font-semibold text-black\">2분</div> </div> <div className=\"text-center p-3 bg-gray-50 rounded-lg\"> <div className=\"text-sm text-gray-600 mb-1\">{t('mypage.verifiedCountries') || '검증국가'}</div> <div className=\"text-lg font-semibold text-black\">20개국</div> </div> </div> <button onClick={() => setShowPersonalityModal(true)} className=\"w-full md:w-auto px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\" > {t('mypage.retakeDiagnosis') || '다시 진단하기'} </button> </div> ) : ( <div className=\"space-y-4\"> <p className=\"text-gray-600 leading-relaxed\"> {t('mypage.diagnosisInfo') || '100만명 AI 시뮬레이션으로 검증된 5문항 진단으로 95%의 정확도로 개인화 가이드를 제공합니다. 20개국 문화적 공정성 검증 완룼.'} </p> <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\"> <h4 className=\"font-medium text-blue-900 mb-2\">{t('mypage.changesAfterDiagnosis') || '진단 후 변화'}</h4> <ul className=\"text-sm text-blue-700 space-y-1\"> <li>• {t('mypage.feature1') || '당신의 성격에 맞는 콘텐츠 깊이 조절'}</li> <li>• {t('mypage.feature2') || '개인 맞춤형 가이드 스타일 적용'}</li> <li>• {t('mypage.feature3') || '상호작용 레벨 최적화'}</li> <li>• {t('mypage.feature4') || '감정적 어조 개인화'}</li> </ul> </div> <button onClick={() => setShowPersonalityModal(true)} className=\"w-full md:w-auto bg-black text-white px-6 py-2 rounded-lg hover:bg-gray-800 transition-colors\" > {t('mypage.startDiagnosis') || '진단 시작하기'} </button> </div> )} </div> {/* 계정 설정 */} <div className=\"bg-white rounded-lg border border-gray-200 p-6\"> <h3 className=\"text-lg font-semibold text-black mb-4\">{t('mypage.accountSettings') || '계정 설정'}</h3> <div className=\"space-y-4\"> <div> <label className=\"block text-sm font-medium text-black mb-2\">{t('mypage.nameLabel') || '이름'}</label> <input type=\"text\" value={session?.user?.name || ''} className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-transparent\" placeholder={String(t('mypage.namePlaceholder') || '이름을 입력하세요')} /> </div> <div> <label className=\"block text-sm font-medium text-black mb-2\">{t('mypage.emailLabel') || '이메일'}</label> <input type=\"email\" value={session?.user?.email || ''} disabled className=\"w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-500\" /> <p className=\"text-xs text-gray-400 mt-1\">{t('mypage.emailNotEditableNote') || '이메일은 변경할 수 없습니다'}</p> </div> <div> <label className=\"block text-sm font-medium text-black mb-2\">{t('mypage.defaultLanguage') || '기본 언어'}</label> <select className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-transparent\"> <option value=\"ko\">{t('languages.korean') || '한국어'}</option> <option value=\"en\">{t('languages.english') || 'English'}</option> <option value=\"ja\">{t('languages.japanese') || '日本語'}</option> <option value=\"zh\">{t('languages.chinese') || '中文'}</option> <option value=\"es\">{t('languages.spanish') || 'Español'}</option> </select> </div> </div> </div> {/* 알림 설정 */} <div className=\"bg-white rounded-lg border border-gray-200 p-6\"> <h3 className=\"text-lg font-semibold text-black mb-4\">{t('mypage.notificationSettings') || '알림 설정'}</h3> <div className=\"space-y-3\"> <label className=\"flex items-center\"> <input type=\"checkbox\" className=\"rounded border-gray-300 text-black focus:ring-black\" defaultChecked /> <span className=\"ml-3 text-sm text-gray-700\">{t('mypage.newFeatureNotifications') || '새로운 기능 알림'}</span> </label> <label className=\"flex items-center\"> <input type=\"checkbox\" className=\"rounded border-gray-300 text-black focus:ring-black\" defaultChecked /> <span className=\"ml-3 text-sm text-gray-700\">{t('mypage.guideCompleteNotifications') || '가이드 생성 완료 알림'}</span> </label> <label className=\"flex items-center\"> <input type=\"checkbox\" className=\"rounded border-gray-300 text-black focus:ring-black\" /> <span className=\"ml-3 text-sm text-gray-700\">{t('mypage.marketingEmails') || '마케팅 이메일 수신'}</span> </label> </div> </div> {/* 데이터 관리 */} <div className=\"bg-white rounded-lg border border-gray-200 p-6\"> <h3 className=\"text-lg font-semibold text-black mb-4\">{t('mypage.dataManagement') || '데이터 관리'}</h3> <div className=\"space-y-3\"> <button className=\"w-full text-left p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"> <div className=\"flex items-center justify-between\"> <div> <div className=\"font-medium text-black mb-1\">{t('mypage.exportData') || '데이터 내보내기'}</div> <div className=\"text-sm text-gray-500\">{t('mypage.exportDescription') || '모든 가이드 데이터를 JSON 형태로 다운로드'}</div> </div> <Download className=\"h-5 w-5 text-gray-400\" /> </div> </button> <button className=\"w-full text-left p-4 border border-red-200 rounded-lg hover:bg-red-50 transition-colors text-red-600\"> <div className=\"flex items-center justify-between\"> <div> <div className=\"font-medium mb-1\">{t('mypage.deleteAllData') || '모든 데이터 삭제'}</div> <div className=\"text-sm text-red-400\">{t('mypage.deleteAllDescription') || '저장된 모든 가이드와 설정을 삭제합니다'}</div> </div> <Trash className=\"h-5 w-5\" /> </div> </button> </div> </div> {/* 로그아웃 */} <div className=\"bg-white rounded-lg border border-gray-200 p-6\"> <button onClick={async () => { try { console.log('🔥 강화된 로그아웃 프로세스 시작...'); // 1. 클라이언트 측 정리 (localStorage, sessionStorage) console.log('🧹 클라이언트 데이터 정리 중...'); localStorage.clear(); sessionStorage.clear(); // 2. 서버 측 강제 로그아웃 API 호출 try { console.log('🔥 서버 강제 로그아웃 호출 중...'); await fetch('/api/auth/force-logout', { method: 'POST', credentials: 'include' }); console.log('✅ 서버 강제 로그아웃 완료'); } catch (apiError) { console.warn('⚠️ 서버 강제 로그아웃 실패:', apiError); } // 3. NextAuth signOut 호출 (자동 리다이렉트 활성화) console.log('🔄 NextAuth signOut 호출 중...'); await signOut({ callbackUrl: '/', redirect: true // 자동 리다이렉트 활성화 }); } catch (error) { console.error('❌ 로그아웃 중 오류 발생:', error); // 에러 발생시에도 기본 정리 및 리다이렉트 try { await fetch('/api/auth/force-logout', { method: 'POST', credentials: 'include' }); } catch (cleanupError) { console.error('정리 프로세스 실패:', cleanupError); } // 강제 리다이렉트 (NextAuth 실패시 백업) window.location.href = '/'; } }} className=\"w-full bg-gray-800 text-white px-4 py-3 rounded-lg hover:bg-black transition-colors font-medium flex items-center justify-center\" > <LogOut className=\"h-4 w-4 mr-2\" /> {t('auth.logout') || '로그아웃'} </button> </div> {/* 계정 관리 */} <div className=\"bg-white rounded-lg border border-gray-200 mt-6\"> <div className=\"p-6 border-b border-gray-200\"> <h3 className=\"text-lg font-medium text-black\">{t('profile.account') || '계정 관리'}</h3> </div> <div className=\"p-6\"> <button onClick={async () => { console.log('🚀 마이페이지 로그아웃 시작...'); try { // 1. 클라이언트 정리 (쿠키, 스토리지, 간단한 캐시) const { performCompleteLogout, simpleCacheInvalidation } = await import('@/lib/auth-utils'); await performCompleteLogout(); await simpleCacheInvalidation(); // 2. 서버 사이드 강제 로그아웃 API 호출 try { console.log('🔥 서버 강제 로그아웃 호출 중...'); await fetch('/api/auth/force-logout', { method: 'POST', credentials: 'include' }); console.log('✅ 서버 강제 로그아웃 완료'); } catch (apiError) { console.warn('⚠️ 서버 강제 로그아웃 실패:', apiError); } // 3. NextAuth signOut 호출 (자동 리다이렉트 활성화) console.log('🔄 NextAuth signOut 호출 중...'); await signOut({ callbackUrl: '/', redirect: true // 자동 리다이렉트 활성화 }); // NextAuth가 자동으로 홈페이지로 리다이렉트하므로 추가 로직 불필요 } catch (error) { console.error('❌ 로그아웃 중 오류 발생:', error); // 에러 발생시에도 기본 정리 및 리다이렉트 try { await fetch('/api/auth/force-logout', { method: 'POST', credentials: 'include' }); } catch (cleanupError) { console.error('정리 프로세스 실패:', cleanupError); } // 강제 리다이렉트 (NextAuth 실패시 백업) window.location.href = '/'; } }} className=\"w-full bg-gray-800 text-white px-4 py-2 rounded-lg hover:bg-black transition-colors font-medium flex items-center justify-center\" > <LogOut className=\"h-4 w-4 mr-2\" /> {t('auth.logout') || '로그아웃'} </button> </div> </div> </div> ); default: return null; } }; return ( <div className=\"min-h-screen bg-white\"> {/* 헤더 */} <div className=\"bg-white border-b border-gray-200\"> <div className=\"max-w-7xl mx-auto\" style={{ padding: '0 var(--space-4)', paddingLeft: 'clamp(var(--space-4), 4vw, var(--space-6))', paddingRight: 'clamp(var(--space-4), 4vw, var(--space-8))' }}> <div className=\"flex items-center justify-between\" style={{ height: 'var(--space-16)' }}> <div className=\"flex items-center\" style={{ gap: 'var(--space-4)' }}> <button onClick={() => router.push('/')} className=\"btn-base text-gray-500 hover:text-black bg-transparent hover:bg-gray-50 transition-colors\" style={{ padding: 'var(--space-2) var(--space-3)', borderRadius: 'var(--radius-md)' }} > ← {t('buttons.goBack') || '홈으로'} </button> <h1 className=\"text-lg md:text-xl font-semibold text-black whitespace-nowrap\">{t('mypage.title') || '마이페이지'}</h1> </div> <div className=\"flex items-center\" style={{ gap: 'var(--space-4)' }}> {/* 관리자 대시보드 버튼 */} {/* @ts-ignore - NextAuth 타입 확장 */} {session?.user?.isAdmin && ( <button onClick={() => router.push('/admin/dashboard')} className=\"px-3 py-2 bg-black text-white text-sm font-medium rounded-lg hover:bg-gray-800 transition-colors\" > 관리자 대시보드 </button> )} <div className=\"flex items-center\" style={{ gap: 'var(--space-2)' }}> <div className=\"bg-black rounded-full flex items-center justify-center touch-target\" style={{ width: 'var(--space-8)', height: 'var(--space-8)' }}> <User className=\"h-4 w-4 text-white\" /> </div> <span className=\"text-fluid-sm font-medium text-black\"> {session?.user?.name || t('profile.user') || '사용자'} {/* @ts-ignore - NextAuth 타입 확장 */} {session?.user?.isAdmin && ( <span className=\"ml-2 px-2 py-1 bg-red-100 text-red-800 text-xs font-medium rounded-full\"> 관리자 </span> )} </span> </div> </div> </div> </div> </div> <div className=\"max-w-7xl mx-auto\" style={{ padding: 'var(--space-8) var(--space-4)', paddingLeft: 'clamp(var(--space-4), 4vw, var(--space-6))', paddingRight: 'clamp(var(--space-4), 4vw, var(--space-8))' }}> {/* 탭 네비게이션 */} <div className=\"border-b border-gray-200 mb-8\"> <div className=\"overflow-x-auto scrollbar-hide\"> <nav className=\"-mb-px flex gap-2 md:gap-8 min-w-max pb-px\"> {[ { id: 'history', label: t('mypage.history') || '나의 가이드', shortLabel: t('mypage.historyShort') || '가이드', icon: Folder }, { id: 'favorites', label: t('mypage.favoriteGuides') || '즐겨찾기 가이드', shortLabel: t('mypage.favoritesShort') || '즐겨찾기', icon: Heart }, { id: 'offline', label: t('mypage.offline') || '오프라인 다운로드', shortLabel: t('mypage.offlineShort') || '오프라인', icon: Download }, { id: 'settings', label: t('mypage.settings') || '세팅', shortLabel: t('mypage.settingsShort') || '세팅', icon: Settings } ].map(({ id, label, shortLabel, icon: Icon }) => ( <button key={id} onClick={() => setActiveTab(id as TabType)} className={",
      "error즐겨찾기토글co3006": ":', error); } }; // 즐겨찾기 토글 const toggleFavorite = (id: string): void => { try { const currentFavorite = localStorage.getItem(`${id}_favorite`) ===",
      "error마지막접근시간3007": ":', error); } }; // 마지막 접근 시간 업데이트 const updateLastAccessed = (id: string): void => { try { localStorage.setItem(`${id}_last_accessed`, new Date().toISOString()); } catch (error) { console.error(",
      "error개인화진3008": ":', error); } }, []); // 개인화 진단 완료 핸들러 const handlePersonalityComplete = (results: any) => { setPersonalityResults(results); }; // 데이터 로드 useEffect(() => { const loadData = async () => { setIsLoading(true); try { const guides = getAllLocalGuides(); const stats = calculateUserStats(guides); setLocalGuides(guides); setUserStats(stats); // 파일 가이드는 향후 구현 setFileGuides([]); } catch (error) { console.error(",
      "errorfinallysetisl3009": ":', error); } finally { setIsLoading(false); } }; loadData(); }, []); // 인증 확인 if (status ===",
      "이가이드를삭제하시겠습니까3010": ": '이 가이드를 삭제하시겠습니까?",
      "apierror3nextaut3011": ":', apiError); } // 3. NextAuth signOut 호출 (자동 리다이렉트 활성화) console.log(",
      "error에러발생시에도기본정리3012": ":', error); // 에러 발생시에도 기본 정리 및 리다이렉트 try { await fetch(",
      "cleanuperror강제리다이3013": ":', cleanupError); } // 강제 리다이렉트 (NextAuth 실패시 백업) window.location.href =",
      "apierror3nextaut3014": ":', apiError); } // 3. NextAuth signOut 호출 (자동 리다이렉트 활성화) console.log(",
      "error에러발생시에도기본정리3015": ":', error); // 에러 발생시에도 기본 정리 및 리다이렉트 try { await fetch(",
      "cleanuperror강제리다이3016": ":', cleanupError); } // 강제 리다이렉트 (NextAuth 실패시 백업) window.location.href =",
      "comparemode비교중selecte3017": "{compareMode ? `비교중 (${selectedCities.length}/3)` : '도시 비교'}",
      "기본30mbps3021": "기본 (30+ Mbps)",
      "좋음50mbps3022": "좋음 (50+ Mbps)",
      "매우좋음80mbps3023": "매우 좋음 (80+ Mbps)",
      "최고100mbps3024": "최고 (100+ Mbps)",
      "유럽시간대3026": "유럽 시간대",
      "아시아시간대3027": "아시아 시간대",
      "미국시간대3028": "미국 시간대",
      "즐겨찾기3029": "즐겨찾기",
      "전체filteredcitieslength개3030": "전체 ({filteredCities.length}개)",
      "선택한도시비교selectedcitieslen3032": "선택한 도시 비교 ({selectedCities.length}개)",
      "도시3033": "도시",
      "월예산3034": "월 예산",
      "노마드점수3035": "노마드 점수",
      "비자3036": "비자",
      "cityvisafree일3037": "{city.visaFree}일",
      "비자cityvisafree일3038": "비자 {city.visaFree}일",
      "더많은3039": "더 많은",
      "노마드도구들3040": "노마드 도구들",
      "성공적인디지털노마드생활을위한필수도구들3041": "성공적인 디지털노마드 생활을 위한 필수 도구들",
      "비자체커3042": "비자 체커",
      "국적별비자요구사항과디지털노마드비자정보를확인하3043": "국적별 비자 요구사항과 디지털노마드 비자 정보를 확인하세요",
      "코워킹파인더3044": "코워킹 파인더",
      "전세계코워킹스페이스와카페정보를실시간으로찾아보3045": "전세계 코워킹 스페이스와 카페 정보를 실시간으로 찾아보세요",
      "노마드플래너3046": "노마드 플래너",
      "다음목적지까지의여행계획을체계적으로세워보세요3047": "다음 목적지까지의 여행 계획을 체계적으로 세워보세요",
      "디지털노마드생활비계산기전세계원격근무도시비3048": "디지털노마드 생활비 계산기 | 전세계 원격근무 도시 비교 TripRadio.AI",
      "전세계디지털노마드도시들의생활비wifi속3049": "💻 전세계 디지털노마드 도시들의 생활비, WiFi 속도, 시간대를 비교하고 최적의 원격근무 장소를 찾아보세요. 실시간 데이터 기반 스마트 추천",
      "디지털노마드계산기3050": "디지털노마드 계산기",
      "원격근무생활비3051": "원격근무 생활비",
      "노마드도시비교3052": "노마드 도시 비교",
      "해외거주비용3053": "해외 거주비용",
      "wifi속도비교3054": "WiFi 속도 비교",
      "시간대계산기3055": "시간대 계산기",
      "코워킹스페이스3056": "코워킹 스페이스",
      "디지털노마드추천3057": "디지털노마드 추천",
      "20개노마드도시대규모데이터3058": "] ) }; // 20개 노마드 도시 대규모 데이터 (2024년 기준, Nomad List 등 참조) const nomadCities = [ // 유럽 (최고 노마드 도시들) { name:",
      "포르투갈3059": "포르투갈",
      "유럽타임존3060": "유럽 타임존",
      "강한노마드커뮤니티3061": "강한 노마드 커뮤니티",
      "좋은날씨3062": "좋은 날씨",
      "베르린3063": "베르린",
      "독일3064": "독일",
      "스타트업허브3065": "스타트업 허브",
      "풍부한문화3066": "풍부한 문화",
      "저렴한맥주3067": "저렴한 맥주",
      "암스테르담3068": "암스테르담",
      "네덜란드3069": "네덜란드",
      "자전거문화3070": "자전거 문화",
      "영어친화적3071": "영어 친화적",
      "테크허브3072": "테크 허브",
      "바르셀로나3073": "바르셀로나",
      "스페인3074": "스페인",
      "해변과도시3075": "해변과 도시",
      "따뜻한날씨3076": "따뜻한 날씨",
      "활발한나이트라이프3077": "활발한 나이트라이프",
      "프라하3078": "프라하",
      "체코3079": "체코",
      "저렴한생활비3080": "저렴한 생활비",
      "아름다운건축3081": "아름다운 건축",
      "중부유럽중심3082": "중부유럽 중심",
      "아시아태평양저렴하고인기name3083": "}, // 아시아 태평양 (저렴하고 인기) { name:",
      "인도네시아3084": "인도네시아",
      "저렴한생활비3085": "저렴한 생활비",
      "비치라이프3086": "비치 라이프",
      "서핑문화3087": "서핑 문화",
      "발리우붓3088": "발리 (우붓)",
      "인도네시아3089": "인도네시아",
      "정글뷰3090": "정글 뷰",
      "요가문화3091": "요가 문화",
      "저렴한마사지3092": "저렴한 마사지",
      "치앙마이3093": "치앙마이",
      "태국3094": "태국",
      "극저렴생활비3095": "극저렴 생활비",
      "노마드커뮤니티3096": "노마드 커뮤니티",
      "맛있는음식3097": "맛있는 음식",
      "방콕3098": "방콕",
      "태국3099": "태국",
      "대도시편의시설3100": "대도시 편의시설",
      "국제적환경3101": "국제적 환경",
      "교통접근성3102": "교통 접근성",
      "호치민3103": "호치민",
      "베트남3104": "베트남",
      "매우저렴3105": "매우 저렴",
      "맛있는음식3106": "맛있는 음식",
      "성장하는스타트업3107": "성장하는 스타트업",
      "쿠알라룸푸르3108": "쿠알라룸푸르",
      "말레이시아3109": "말레이시아",
      "다문화환경3110": "다문화 환경",
      "영어통용3111": "영어 통용",
      "저렴한생활비3112": "저렴한 생활비",
      "아메리카높은품질높은비용na3113": "}, // 아메리카 (높은 품질, 높은 비용) { name:",
      "멕시코3114": "멕시코",
      "풍부한문화3115": "풍부한 문화",
      "미국시간대3116": "미국 시간대",
      "훌륭한음식3117": "훌륭한 음식",
      "플라야델카르멘3118": "플라야 델 카르멘",
      "멕시코3119": "멕시코",
      "카리브해해변3120": "카리브해 해변",
      "리조트지역3121": "리조트 지역",
      "따뜻한날씨3122": "따뜻한 날씨",
      "메데인3123": "메데인",
      "콜롬비아3124": "콜롬비아",
      "영원한봄날씨3125": "영원한 봄 날씨",
      "친절한사람들3126": "친절한 사람들",
      "저렴한생활비3127": "저렴한 생활비",
      "부에노스아이레스3128": "부에노스아이레스",
      "아르헨티나3129": "아르헨티나",
      "유럽느낌3130": "유럽 느낌",
      "저렴한와인3131": "저렴한 와인",
      "탱고문화3132": "탱고 문화",
      "동유럽코카서스가성비최고name3133": "}, // 동유럽/코카서스 (가성비 최고) { name:",
      "조지아3134": "조지아",
      "1년비자프리3135": "1년 비자 프리",
      "매우저렴3136": "매우 저렴",
      "유럽근접3137": "유럽 근접",
      "부다페스트3138": "부다페스트",
      "헝가리3139": "헝가리",
      "아름다운건축3140": "아름다운 건축",
      "온천문화3141": "온천 문화",
      "저렴한eu도시3142": "저렴한 EU 도시",
      "크라코프3143": "크라코프",
      "폴란드3144": "폴란드",
      "중세건축3145": "중세 건축",
      "저렴한맥주3146": "저렴한 맥주",
      "활발한it씬3147": "활발한 IT 씬",
      "중동아프리카신흥지역name3148": "}, // 중동/아프리카 (신흥 지역) { name:",
      "무세금3149": "무세금",
      "미래도시3150": "미래 도시",
      "안전한환경3151": "안전한 환경",
      "케이프타운3152": "케이프타운",
      "남아프리카3153": "남아프리카",
      "아름다운자연3154": "아름다운 자연",
      "와인지역3155": "와인 지역",
      "저렴한생활비3156": "저렴한 생활비",
      "디지털노마드계산기3157": "디지털노마드 계산기",
      "comparemode비교중s3166": "}`} > {compareMode ? `비교중 (${selectedCities.length}/3)` :",
      "기본30mbpsoptionoption3170": "기본 (30+ Mbps)</option> <option value=",
      "좋음50mbpsoptionoption3171": "좋음 (50+ Mbps)</option> <option value=",
      "매우좋음80mbpsoptionopt3172": "매우 좋음 (80+ Mbps)</option> <option value=",
      "최고100mbpsoptionsele3173": "최고 (100+ Mbps)</option> </select> </div> <div> <label className=",
      "유럽시간대optionoptionvalue3175": "유럽 시간대</option> <option value=",
      "아시아시간대optionoptionvalue3176": "아시아 시간대</option> <option value=",
      "미국시간대optionselectdi3177": "미국 시간대</option> </select> </div> <div> <label className=",
      "즐겨찾기labelselectclassname3178": "즐겨찾기</label> <select className=",
      "전체filteredcitieslength개3179": "전체 ({filteredCities.length}개)</option> <option value=",
      "선택한도시비교selectedcitieslen3181": "선택한 도시 비교 ({selectedCities.length}개)</h3> <div className=",
      "도시ththclassname3182": "도시</th> <th className=",
      "월예산ththclassname3183": "월 예산</th> <th className=",
      "노마드점수ththclassname3184": "노마드 점수</th> <th className=",
      "비자thtrtheadtbody3185": "비자</th> </tr> </thead> <tbody> {selectedCities.map(cityName => { const city = nomadCities.find(c => c.name === cityName)!; return ( <tr key={cityName} className=",
      "cityvisafree일tdtr3186": "{city.visaFree}일</td> </tr> ); })} </tbody> </table> </div> </div> )} {/* City Comparison Grid */} <div className=",
      "비자cityvisafree일divdi3187": "비자 {city.visaFree}일</div> </div> </div> {/* Budget Range */} <div className=",
      "더많은spanclassname3189": "더 많은 <span className=",
      "노마드도구들spanh2pclassn3190": "노마드 도구들</span> </h2> <p className=",
      "성공적인디지털노마드생활을위한필수도구들p3191": "성공적인 디지털노마드 생활을 위한 필수 도구들</p> </div> <div className=",
      "비자체커h3divpclassname3192": "비자 체커</h3> </div> <p className=",
      "국적별비자요구사항과디지털노마드비자정보를확인하3193": "국적별 비자 요구사항과 디지털노마드 비자 정보를 확인하세요 </p> </Link> <Link href=",
      "코워킹파인더h3divpclassna3194": "코워킹 파인더</h3> </div> <p className=",
      "전세계코워킹스페이스와카페정보를실시간으로찾아보3195": "전세계 코워킹 스페이스와 카페 정보를 실시간으로 찾아보세요 </p> </Link> <Link href=",
      "노마드플래너h3divpclassna3196": "노마드 플래너</h3> </div> <p className=",
      "비교중selectedcitieslength3197": "비교중 (${selectedCities.length}/3)",
      "savedcitiesincludescity3198": "} > {savedCities.includes(city.name) ? '❤️' : '🤍'} </button> </div> <p className=\"text-sm text-gray-600\">{city.country} • {city.region}</p> </div> </div> <div className=\"text-right\"> <div className=\"bg-green-100 text-green-800 px-2 py-1 rounded text-sm font-medium\"> {city.nomadScore}/10 </div> <div className=\"text-xs text-gray-500 mt-1\">비자 {city.visaFree}일</div> </div> </div> {/* Budget Range */} <div className=\"mb-4\"> <div className=\"flex justify-between items-center mb-2\"> <span className=\"text-sm font-medium text-gray-700\">{t('tools.nomadCalculator.card.monthlyBudget')}</span> <span className=\"text-lg font-semibold text-gray-900\"> {city.monthlyBudget.currency}{city.monthlyBudget.min} - {city.monthlyBudget.max} </span> </div> </div> {/* Key Metrics */} <div className=\"grid grid-cols-2 gap-4 mb-4\"> <div className=\"text-center p-3 bg-gray-50 rounded-lg\"> <div className=\"text-2xl font-light text-gray-900\">{city.wifiSpeed.avg}</div> <div className=\"text-xs text-gray-600\">{t('tools.nomadCalculator.card.wifiAvg')}</div> </div> <div className=\"text-center p-3 bg-gray-50 rounded-lg\"> <div className=\"text-2xl font-light text-gray-900\">{city.coworkingSpaces}</div> <div className=\"text-xs text-gray-600\">{t('tools.nomadCalculator.card.coworking')}</div> </div> </div> {/* Highlights */} <div className=\"mb-4\"> <div className=\"flex flex-wrap gap-2\"> {city.highlights.map((highlight, hIndex) => ( <span key={hIndex} className=\"bg-gray-100 text-gray-700 px-2 py-1 rounded text-xs\"> {highlight} </span> ))} </div> </div> {/* Cost Breakdown */} <div className=\"mb-4\"> <h4 className=\"text-sm font-medium text-gray-900 mb-2\">{t('tools.nomadCalculator.card.costBreakdown')}</h4> <div className=\"space-y-1 text-sm\"> <div className=\"flex justify-between\"> <span className=\"text-gray-600\">{t('tools.nomadCalculator.card.costs.accommodation')}</span> <span>${city.livingCosts.accommodation}</span> </div> <div className=\"flex justify-between\"> <span className=\"text-gray-600\">{t('tools.nomadCalculator.card.costs.food')}</span> <span>${city.livingCosts.food}</span> </div> <div className=\"flex justify-between\"> <span className=\"text-gray-600\">{t('tools.nomadCalculator.card.costs.transport')}</span> <span>${city.livingCosts.transport}</span> </div> <div className=\"flex justify-between\"> <span className=\"text-gray-600\">{t('tools.nomadCalculator.card.costs.coworking')}</span> <span>${city.livingCosts.coworking}</span> </div> </div> </div> {/* CTA */} <div className=\"flex gap-2\"> <Link href={",
      "리스본3199": ": '리스본",
      "포르투갈3200": ": '포르투갈",
      "베르린3201": ": '베르린",
      "독일3202": ": '독일",
      "암스테르담3203": ": '암스테르담",
      "네덜란드3204": ": '네덜란드",
      "바르셀로나3205": ": '바르셀로나",
      "스페인3206": ": '스페인",
      "프라하3207": ": '프라하",
      "체코3208": ": '체코",
      "창구3209": ": '창구",
      "인도네시아3210": ": '인도네시아",
      "발리우붓3211": ": '발리 (우붓)",
      "인도네시아3212": ": '인도네시아",
      "치앙마이3213": ": '치앙마이",
      "태국3214": ": '태국",
      "방콕3215": ": '방콕",
      "태국3216": ": '태국",
      "호치민3217": ": '호치민",
      "베트남3218": ": '베트남",
      "쿠알라룸푸르3219": ": '쿠알라룸푸르",
      "말레이시아3220": ": '말레이시아",
      "멕시코시티3221": ": '멕시코시티",
      "멕시코3222": ": '멕시코",
      "플라야델카르멘3223": ": '플라야 델 카르멘",
      "멕시코3224": ": '멕시코",
      "메데인3225": ": '메데인",
      "콜롬비아3226": ": '콜롬비아",
      "부에노스아이레스3227": ": '부에노스아이레스",
      "아르헨티나3228": ": '아르헨티나",
      "트빌리시3229": ": '트빌리시",
      "조지아3230": ": '조지아",
      "부다페스트3231": ": '부다페스트",
      "헝가리3232": ": '헝가리",
      "크라코프3233": ": '크라코프",
      "폴란드3234": ": '폴란드",
      "두바이3235": ": '두바이",
      "케이프타운3236": ": '케이프타운",
      "남아프리카3237": ": '남아프리카",
      "도시비교3238": ": '도시 비교",
      "오류가발생했습니다3239": "오류가 발생했습니다",
      "죄송합니다예상치못한오류가발생했습니다다시시3240": "죄송합니다. 예상치 못한 오류가 발생했습니다. 다시 시도해 주세요.",
      "null상태관리constisload3243": "(null); // 상태 관리 const [isLoaded, setIsLoaded] = useState(false); const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 }); const [query, setQuery] = useState(''); const [isFocused, setIsFocused] = useState(false); const [showSuggestions, setShowSuggestions] = useState(false); const [suggestions, setSuggestions] = useState",
      "constisloadingsuggesti3244": "([]); const [isLoadingSuggestions, setIsLoadingSuggestions] = useState(false); const [selectedSuggestionIndex, setSelectedSuggestionIndex] = useState(-1); const [currentLoadingQuery, setCurrentLoadingQuery] = useState(''); // 🧠 메모리 캐시 (LRU 방식) - useRef로 변경하여 리렌더링 방지 const suggestionCacheRef = useRef",
      "newmapfetchsuggestio3245": "(new Map()); // fetchSuggestions 함수 안정성을 위한 ref const fetchSuggestionsRef = useRef",
      "nullnull기능상태분리된3246": ") | null>(null); // 기능 상태 (분리된 로딩 상태) const [loadingStates, setLoadingStates] = useState({ search: false, guide: false, tour: false, country: false }); const [audioPlaying, setAudioPlaying] = useState(false); // 개별 로딩 상태 헬퍼 함수 const setLoadingState = useCallback((key: keyof typeof loadingStates, value: boolean) => { if (!isMountedRef.current) return; setLoadingStates(prev => ({ ...prev, [key]: value })); }, []); // 전체 로딩 상태 확인 const isAnyLoading = useMemo(() => Object.values(loadingStates).some(loading => loading), [loadingStates] ); // 지역별 탭 상태 const [activeRegion, setActiveRegion] = useState('korea'); // API 요청 관리 const abortControllerRef = useRef",
      "null컴포넌트마운트상태consti3247": "(null); // 컴포넌트 마운트 상태 const isMountedRef = useRef(true); // 에러 모달 상태 const [errorModal, setErrorModal] = useState",
      "newsetconstimagesprel3250": "(new Set()); const [imagesPreloaded, setImagesPreloaded] = useState(false); const [isMobile, setIsMobile] = useState(false); // 화면 크기 감지 useEffect(() => { const checkMobile = () => { setIsMobile(window.innerWidth",
      "windowremoveeventlistenerre3251": "window.removeEventListener('resize', checkMobile); }, []); // 언어 변경 시 인덱스 리셋 useEffect(() => { setCurrentLandmarkIndex(0); }, [currentLanguage]); useEffect(() => { setIsLoaded(true); // 명소 회전 (천천히 - 6초) const landmarkInterval = setInterval(() => { setCurrentLandmarkIndex((prev) => (prev + 1) % landmarks.length); }, 6000); return () => { clearInterval(landmarkInterval); }; }, [currentLanguage, landmarks.length]); // 이미지 프리로드 및 에러 처리 useEffect(() => { const preloadImages = async () => { const imagePromises = landmarks.map((landmark) => { return new Promise",
      "resolveconstimgne3252": "((resolve) => { const img = new Image(); const handleLoad = () => { console.log(`✅ 이미지 로드 성공: ${landmark} (${landmarkImages[landmark]})`); resolve(); }; const handleError = (e: Event) => { console.error(`❌ 이미지 로드 실패: ${landmark}`, { src: landmarkImages[landmark], error: e, naturalWidth: img.naturalWidth, naturalHeight: img.naturalHeight }); setImageLoadErrors(prev => new Set([...prev, landmark])); resolve(); }; img.addEventListener('load', handleLoad); img.addEventListener('error', handleError); // 캐시 무시하고 항상 새로 로드 img.crossOrigin = 'anonymous'; // CORS 이슈 방지 img.src = landmarkImages[landmark]; }); }); try { await Promise.all(imagePromises); console.log('🎉 모든 이미지 프리로드 완료'); setImagesPreloaded(true); } catch (error) { console.error('이미지 프리로드 중 오류:', error); setImagesPreloaded(true); // 에러가 있어도 UI는 표시 } }; preloadImages(); }, [landmarks, landmarkImages]); // 이미지 로드 에러 처리 헬퍼 const getBackgroundStyle = useCallback((landmark: string) => { const hasError = imageLoadErrors.has(landmark); if (hasError) { // 폴백: 그라데이션 배경 (텍스트 가독성을 위한 오버레이 추가) return { background: 'linear-gradient(135deg, rgba(102, 126, 234, 0.8) 0%, rgba(118, 75, 162, 0.8) 100%)' }; } return { // 이미지가 전체를 채우지 못할 경우를 대비한 기본 그라데이션 background: `linear-gradient(135deg, rgba(20, 20, 40, 0.9) 0%, rgba(40, 40, 60, 0.9) 100%)`, backgroundImage: `linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.4)), url('${landmarkImages[landmark]}')`, backgroundSize: 'cover', // cover로 변경하여 전체 영역을 채움 backgroundPosition: 'top center', // 이미지 상단부터 표시하여 전체 이미지 보여줌 backgroundRepeat: 'no-repeat' }; }, [imageLoadErrors, landmarkImages]); useEffect(() => { const handleMouseMove = (e: MouseEvent) => { setMousePosition({ x: e.clientX, y: e.clientY }); }; window.addEventListener('mousemove', handleMouseMove); return () => window.removeEventListener('mousemove', handleMouseMove); }, []); // 자동완성 API 호출 (메모리 안전, API 중복 방지, 캐시 적용) const fetchSuggestions = useCallback(async (searchQuery: string) => { console.log('🚀 fetchSuggestions 함수 실행 시작:', searchQuery); // 🧠 캐시 확인 (30분 만료) const cacheKey = `${searchQuery}-${currentLanguage}`; const cachedResult = suggestionCacheRef.current.get(cacheKey); const now = Date.now(); if (cachedResult && (now - cachedResult.timestamp)",
      "0consolelog첫번째항목3253": "0) { console.log('📋 첫 번째 항목:', data.data[0]); console.log('📋 첫 번째 항목 구조:', Object.keys(data.data[0])); } // 컴포넌트가 마운트되어 있을 때만 상태 업데이트 if (!isMountedRef.current) return; if (data.success && isValidSuggestionsArray(data.data)) { const suggestionsData = data.data.slice(0, 5); // 최대 5개 제안 // 🧠 캐시에 저장 (LRU 방식, 최대 100개) const cache = suggestionCacheRef.current; cache.set(cacheKey, { data: suggestionsData, timestamp: Date.now() }); // LRU: 100개 초과시 가장 오래된 항목 제거 if (cache.size > 100) { const firstKey = cache.keys().next().value; if (firstKey) cache.delete(firstKey); } if (isMountedRef.current) { setSuggestions(suggestionsData); setSelectedSuggestionIndex(-1); // 새로운 제안이 오면 선택 초기화 setShowSuggestions(true); // 성공적으로 받으면 드롭다운 표시 console.log('✅ 자동완성 결과 설정 및 캐시 저장 완료:', suggestionsData.length, '개'); } } else { if (isMountedRef.current) { setSuggestions([]); setSelectedSuggestionIndex(-1); setShowSuggestions(false); console.log('⚠️ 자동완성 결과 없음 또는 invalid'); } } } catch (error) { // AbortError는 의도적인 취소이므로 무시 if (error instanceof Error && error.name === 'AbortError') return; console.error('Suggestions fetch error:', error); if (isMountedRef.current) { if (isMountedRef.current) setSuggestions([]); } } finally { if (isMountedRef.current) { if (isMountedRef.current) setIsLoadingSuggestions(false); } } }, [currentLanguage, t]); // fetchSuggestions를 ref에 할당하여 안정적인 참조 유지 fetchSuggestionsRef.current = fetchSuggestions; // 디바운스된 검색 함수 (메모리 안전) useEffect(() => { console.log('🔍 디바운스 트리거:', { query: query.trim(), isFocused, isMountedRef: isMountedRef.current }); if (!isMountedRef.current) return; const timeoutId = setTimeout(() => { console.log('⏰ 디바운스 실행 전:', { query: query.trim(), isFocused, isMountedRef: isMountedRef.current }); if (query.trim() && isFocused && isMountedRef.current) { console.log('✅ 자동완성 API 호출:', query.trim()); fetchSuggestionsRef.current?.(query.trim()); } else { console.log('❌ 자동완성 조건 불충족:', { hasQuery: !!query.trim(), isFocused, isMounted: isMountedRef.current }); } }, 150); // 150ms 디바운스 (속도 최적화) return () => { clearTimeout(timeoutId); }; }, [query, currentLanguage, isFocused]); // fetchSuggestions 의존성 제거하여 순환참조 방지 // URL 파라미터 처리 효과 useEffect(() => { if (typeof window !== 'undefined') { const params = new URLSearchParams(window.location.search); setUrlParams(params); // 도구에서 온 파라미터 처리 const destination = params.get('destination'); const purpose = params.get('purpose'); const film = params.get('film'); const nomad = params.get('nomad'); const visa = params.get('visa'); if (destination) { setQuery(destination); // 자동으로 가이드 생성 시작 (옵션) // handleSearch(); } // 특수 목적 파라미터 처리 if (purpose === 'travel' || purpose === 'coworking') { // 해당 목적에 맞는 UI 모드 활성화 가능 console.log('🎯 특수 목적 모드:', purpose); } if (film === 'experience') { console.log('🎬 영화 촬영지 체험 모드 활성화'); } if (nomad === 'true') { console.log('💻 노마드 모드 활성화'); } if (visa === 'ready') { console.log('📋 비자 준비 완료 모드'); } } }, []); // 컴포넌트 마운트/언마운트 관리 (React Strict Mode 대응) useEffect(() => { // 컴포넌트 마운트 시 초기화 isMountedRef.current = true; console.log('🚀 컴포넌트 마운트: isMountedRef =', isMountedRef.current); return () => { // 컴포넌트 언마운트 표시 console.log('🔚 컴포넌트 언마운트: isMountedRef 설정 false'); isMountedRef.current = false; // 진행 중인 API 요청 취소 if (abortControllerRef.current) { abortControllerRef.current.abort(); } }; }, []); // 검색 실행 (메모리 안전, 분리된 로딩 상태) const handleSearch = useCallback(async () => { if (!query.trim() || !isMountedRef.current) return; setCurrentLoadingQuery(query.trim()); setLoadingState('search', true); try { router.push(`/guide/${encodeURIComponent(query.trim())}?lang=${currentLanguage}`); } catch (error) { console.error('Search error:', error); } finally { if (isMountedRef.current) { setLoadingState('search', false); setCurrentLoadingQuery(''); } } }, [query, router, setLoadingState, currentLanguage]); const handleKeyDown = (e: React.KeyboardEvent) => { if (!isFocused || suggestions.length === 0) { if (e.key === 'Enter') { handleSearch(); } return; } switch (e.key) { case 'ArrowDown': e.preventDefault(); setSelectedSuggestionIndex(prev => prev",
      "ifquerytrimshowerr3254": "{ if (!query.trim()) { showError(t('home.alerts.enterLocation') as string, { errorType: 'validation', title: '입력 확인' }); return; } const location = query.trim(); setCurrentLoadingQuery(location); setLoadingState('guide', true); console.group('🚀 AI 가이드 생성 시작'); console.log('📍 요청 정보:', { location, language: currentLanguage, timestamp: new Date().toISOString(), userAgent: navigator.userAgent, url: window.location.href }); try { // 1단계: 환경 변수 사전 체크 console.log('🔍 1단계: 환경 설정 체크 중...'); const envCheck = await fetch('/api/debug/env', { method: 'GET', cache: 'no-cache' }); if (envCheck.ok) { const envData = await envCheck.json(); console.log('🔧 환경 설정 상태:', envData.diagnostics); if (envData.criticalMissing.length > 0) { console.error('🚨 필수 환경 변수 누락:', envData.criticalMissing); showError( `서비스 설정에 문제가 있습니다. 관리자에게 문의하세요.`, { errorType: 'config', title: '설정 오류', details: `누락된 설정: ${envData.criticalMissing.join(', ')}`, retryAction: () => handleAIGeneration() } ); return; } } else { console.warn('⚠️ 환경 설정 체크 실패, 계속 진행'); } // 2단계: AI 가이드 생성 API 호출 console.log('🤖 2단계: AI 가이드 생성 요청 시작'); const startTime = Date.now(); const response = await fetch('/api/ai/generate-guide-with-gemini', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json', 'User-Agent': 'GuideAI/1.0' }, body: JSON.stringify({ location, userProfile: { language: currentLanguage, interests: ['문화', '역사'], knowledgeLevel: '중급', ageGroup: '30대', preferredStyle: '친근함', tourDuration: 90, companions: 'solo' }, enhanceCoordinates: true, useEnhancedChapters: true }), signal: AbortSignal.timeout(60000) // 60초 타임아웃 }); const responseTime = Date.now() - startTime; console.log('📡 API 응답 수신:', { status: response.status, statusText: response.statusText, responseTime: `${responseTime}ms`, contentType: response.headers.get('content-type'), contentLength: response.headers.get('content-length') }); if (response.ok) { try { const data = await response.json(); console.log('✅ 가이드 생성 성공:', { success: data.success, location: data.location, language: data.language, hasData: !!data.data, dataIntegration: data.dataIntegration?.hasIntegratedData, coordinateEnhancement: data.coordinateEnhancement?.success, cached: data.cached, totalTime: `${responseTime}ms` }); // 3단계: 성공적인 페이지 이동 console.log('🔄 가이드 페이지로 이동 중...'); router.push(`/guide/${encodeURIComponent(location)}/tour?lang=${currentLanguage}`); } catch (jsonError) { console.error('❌ JSON 파싱 오류:', jsonError); const responseText = await response.text(); console.log('원본 응답 텍스트 (처음 500자):', responseText); showError( '서버 응답 처리 중 오류가 발생했습니다. 다시 시도해주세요.', { errorType: 'server', title: '서버 응답 오류', details: `JSON 파싱 실패: ${jsonError instanceof Error ? jsonError.message : 'Unknown error'}`, retryAction: () => handleAIGeneration() } ); } } else { // 4단계: API 에러 처리 let errorData; try { errorData = await response.json(); } catch { errorData = { error: `HTTP ${response.status}: ${response.statusText}`, details: '서버에서 오류 응답을 받았습니다.' }; } console.error('❌ API 가이드 생성 실패:', { status: response.status, statusText: response.statusText, error: errorData.error, details: errorData.details, retryAfter: response.headers.get('retry-after'), responseTime: `${responseTime}ms` }); // 사용자 친화적 에러 메시지 if (response.status === 429) { const retryAfter = response.headers.get('retry-after') || '60'; showError( `요청 한도를 초과했습니다. ${retryAfter}초 후 다시 시도해주세요.`, { errorType: 'server', title: '요청 제한', details: `HTTP 429: Rate limit exceeded. Retry after ${retryAfter} seconds`, retryAction: () => { setTimeout(() => handleAIGeneration(), parseInt(retryAfter) * 1000); } } ); } else if (response.status === 500) { showError( 'AI 서비스에 일시적인 문제가 발생했습니다. 잠시 후 다시 시도해주세요.', { errorType: 'server', title: '서버 오류', details: `HTTP 500: ${errorData.error || 'Internal Server Error'}`, retryAction: () => handleAIGeneration() } ); } else if (response.status === 400) { showError( '입력하신 장소 정보를 확인해주세요.', { errorType: 'validation', title: '입력 오류', details: `HTTP 400: ${errorData.error || 'Bad Request'}`, retryAction: () => handleAIGeneration() } ); } else { const defaultMessage = errorData.error || `${t('home.alerts.generationFailed')} (${response.status})`; showError( defaultMessage, { errorType: 'server', title: '가이드 생성 실패', details: `HTTP ${response.status}: ${response.statusText}`, retryAction: () => handleAIGeneration() } ); } } } catch (error) { const responseTime = Date.now() - Date.now(); console.error('❌ AI 생성 예외 발생:', { error: error instanceof Error ? error.message : String(error), stack: error instanceof Error ? error.stack : undefined, name: error instanceof Error ? error.name : 'UnknownError', location, language: currentLanguage, timestamp: new Date().toISOString() }); // 네트워크 에러별 사용자 친화적 메시지 if (error instanceof Error) { if (error.name === 'AbortError' || error.message.includes('timeout')) { showError( '요청 시간이 초과되었습니다. 네트워크 연결을 확인하고 다시 시도해주세요.', { errorType: 'timeout', title: '시간 초과', details: `${error.name}: ${error.message}`, retryAction: () => handleAIGeneration() } ); } else if (error.message.includes('Failed to fetch')) { showError( '네트워크 연결에 문제가 있습니다. 인터넷 연결을 확인해주세요.', { errorType: 'network', title: '연결 실패', details: `Network Error: ${error.message}`, retryAction: () => handleAIGeneration() } ); } else if (error.message.includes('NetworkError')) { showError( '네트워크 오류가 발생했습니다. 잠시 후 다시 시도해주세요.', { errorType: 'network', title: '네트워크 오류', details: `Network Error: ${error.message}`, retryAction: () => handleAIGeneration() } ); } else { showError( t('home.alerts.networkError') as string, { errorType: 'unknown', title: '알 수 없는 오류', details: `${error.name}: ${error.message}`, retryAction: () => handleAIGeneration() } ); } } else { showError( t('home.alerts.networkError') as string, { errorType: 'unknown', title: '알 수 없는 오류', details: `Unknown error: ${String(error)}`, retryAction: () => handleAIGeneration() } ); } } finally { console.groupEnd(); setLoadingState('guide', false); setCurrentLoadingQuery(''); } }; // 오디오 재생 (지연 제거, 분리된 로딩 상태) const handleAudioPlayback = useCallback(() => { if (!query.trim() || !isMountedRef.current) { showError(t('home.alerts.enterLocation') as string, { errorType: 'validation', title: '입력 확인' }); return; } setCurrentLoadingQuery(query.trim()); if (isMountedRef.current) setAudioPlaying(!audioPlaying); setLoadingState('tour', true); router.push(`/guide/${encodeURIComponent(query.trim())}/tour?lang=${currentLanguage}`); }, [query, audioPlaying, router, t, setLoadingState, currentLanguage, showError]); // 가이드 생성 중일 때 모노크롬 로딩 화면 표시 if (isAnyLoading) { const currentLoadingType = Object.entries(loadingStates).find(([_, loading]) => loading)?.[0] || 'search'; return (",
      "배경헤더의끝선에맞춰서시작하고검색박3255": "{/* 배경 - 헤더의 끝선에 맞춰서 시작하고, 검색박스 위까지로 제한 - 모바일 반응형 */}",
      "herosection모바일반응형패딩3257": "{/* Hero Section - 모바일 반응형 패딩 */}",
      "첫번째줄명소pc에서40작게3259": "{/* 첫 번째 줄: [명소] - PC에서 40% 작게, 모바일 그대로 */}",
      "두번째줄앞에서만드는오디오가이드3260": "{/* 두 번째 줄: 앞에서 만드는 오디오 가이드 */}",
      "모든화면에서가로배열50압축하여중3262": "{/* 모든 화면에서 가로 배열 - 50% 압축하여 중앙 집중 */}",
      "장소입력모바일최적화3263": "{/* 장소 입력 - 모바일 최적화 */}",
      "ai생성모바일최적화3265": "{/* AI 생성 - 모바일 최적화 */}",
      "오디오재생모바일최적화3267": "{/* 오디오 재생 - 모바일 최적화 */}",
      "setqueryetargetvalueonke3269": "setQuery(e.target.value)} onKeyDown={handleKeyDown} onFocus={() => { setIsFocused(true); // 기존에 검색 결과가 있으면 다시 표시 if (suggestions.length > 0) { setShowSuggestions(true); } }} onBlur={(e) => { // 클릭이 제안 목록 내부에서 일어나는지 확인 const relatedTarget = e.relatedTarget as HTMLElement; if (!relatedTarget || !relatedTarget.closest('.suggestions-container')) { // 자동완성 API 응답 대기 시간 확보 (300ms 지연) setTimeout(() => { setIsFocused(false); setShowSuggestions(false); }, 300); } }} placeholder={String(t('home.searchPlaceholder'))} className=\"w-full px-4 sm:px-6 md:px-8 py-3 sm:py-4 md:py-5 lg:py-6 text-base sm:text-lg md:text-xl font-light text-black bg-transparent rounded-3xl focus:outline-none transition-all duration-300 placeholder-gray-400 focus:ring-2 focus:ring-black focus:ring-opacity-20\" aria-label={String(t('home.searchPlaceholder'))} aria-describedby=\"search-help\" aria-expanded={isFocused && suggestions.length > 0} aria-autocomplete=\"list\" aria-activedescendant={selectedSuggestionIndex >= 0 ? `suggestion-${selectedSuggestionIndex}` : undefined} aria-controls={isFocused && suggestions.length > 0 ? \"suggestions-listbox\" : undefined} role=\"combobox\" />",
      "검색중3272": "검색 중...",
      "전략적광고배치1검색박스하단3274": "{/* 전략적 광고 배치 1: 검색박스 하단 */}",
      "섹션제목3275": "{/* 섹션 제목 */}",
      "메인카드모던모노크롬스타일3278": "{/* 메인 카드 - 모던 모노크롬 스타일 */}",
      "상단모노크롬헤더3279": "{/* 상단 모노크롬 헤더 */}",
      "미니멀패턴3280": "{/* 미니멀 패턴 */}",
      "인기배지모노크롬3282": "{/* 인기 배지 - 모노크롬 */}",
      "카드콘텐츠모노크롬스타일3283": "{/* 카드 콘텐츠 - 모노크롬 스타일 */}",
      "설명3284": "{/* 설명 */}",
      "모바일스크롤힌트3288": "{/* 모바일 스크롤 힌트 */}",
      "전략적광고배치2지역별국가섹션하단3289": "{/* 전략적 광고 배치 2: 지역별 국가 섹션 하단 */}",
      "주요서비스3290": "주요 서비스",
      "오디오가이드3291": "오디오가이드",
      "ai도슨트3292": "AI 도슨트",
      "투어라디오3293": "투어라디오",
      "여행라디오3294": "여행라디오",
      "ai여행3295": "AI여행",
      "여행도구3296": "{/* 여행 도구 */}",
      "여행도구3297": "여행 도구",
      "ai여행계획3298": "AI 여행 계획",
      "노마드계산기3299": "노마드 계산기",
      "영화촬영지3300": "영화 촬영지",
      "비자체커3301": "비자 체커",
      "오류가발생했습니다h2pclassname3304": "오류가 발생했습니다</h2> <p className=",
      "죄송합니다예상치못한오류가발생했습니다다시시3305": "죄송합니다. 예상치 못한 오류가 발생했습니다. 다시 시도해 주세요.</p> <div className=",
      "다시시도buttondivdiv3306": "다시 시도 </button> </div> </div> ); } return this.props.children; } } // 검색 제안 인터페이스 interface Suggestion { id?: string; name: string; location: string; } // 번역된 제안 타입 가드 interface TranslatedSuggestion { name: string; location: string; } // 타입 가드 함수들 const isValidSuggestionsArray = (data: any): data is TranslatedSuggestion[] => { console.log(",
      "array체크3307": "🔬 Array 체크:",
      "길이체크3308": "🔬 길이 체크:",
      "길이3309": "길이:",
      "consolelog항목index3310": "; console.log(`🔬 항목 ${index}:`, { isObject, hasName, hasLocation, itemKeys: item ? Object.keys(item) :",
      "모든항목유효3311": "🔬 모든 항목 유효:",
      "arrayisarraydatafu3312": "&& !Array.isArray(data); }; function Home() { const router = useRouter(); const { currentLanguage, t } = useLanguage(); // URL 파라미터 처리를 위한 상태 추가 const [urlParams, setUrlParams] = useState<URLSearchParams | null>(null); // 상태 관리 const [isLoaded, setIsLoaded] = useState(false); const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 }); const [query, setQuery] = useState(",
      "메모리캐시lru방식use3313": "); // 🧠 메모리 캐시 (LRU 방식) - useRef로 변경하여 리렌더링 방지 const suggestionCacheRef = useRef<Map<string, { data: TranslatedSuggestion[], timestamp: number }>>(new Map()); // fetchSuggestions 함수 안정성을 위한 ref const fetchSuggestionsRef = useRef<((query: string) => Promise<void>) | null>(null); // 기능 상태 (분리된 로딩 상태) const [loadingStates, setLoadingStates] = useState({ search: false, guide: false, tour: false, country: false }); const [audioPlaying, setAudioPlaying] = useState(false); // 개별 로딩 상태 헬퍼 함수 const setLoadingState = useCallback((key: keyof typeof loadingStates, value: boolean) => { if (!isMountedRef.current) return; setLoadingStates(prev => ({ ...prev, [key]: value })); }, []); // 전체 로딩 상태 확인 const isAnyLoading = useMemo(() => Object.values(loadingStates).some(loading => loading), [loadingStates] ); // 지역별 탭 상태 const [activeRegion, setActiveRegion] = useState(",
      "api요청관리constabortcon3314": "); // API 요청 관리 const abortControllerRef = useRef<AbortController | null>(null); // 컴포넌트 마운트 상태 const isMountedRef = useRef(true); // 에러 모달 상태 const [errorModal, setErrorModal] = useState<{ isOpen: boolean; title?: string; message: string; errorType?:",
      "에러표시헬퍼함수constshowe3315": "}); // 에러 표시 헬퍼 함수 const showError = useCallback(( message: string, options?: { title?: string; errorType?:",
      "asany번역데이터유효성검증if3317": ") as any; // 번역 데이터 유효성 검증 if (!isValidCountriesData(countries)) { return { korea: [], europe: [], asia: [], americas: [] }; } return { korea: [ { id:",
      "서울3318": "서울",
      "경복궁3319": "경복궁",
      "남산타워3320": "남산타워",
      "명동3321": "명동",
      "해운대해수욕장3324": "해운대해수욕장",
      "감천문화마을3325": "감천문화마을",
      "자갈치시장3326": "자갈치시장",
      "한라산3329": "한라산",
      "성산일출봉3330": "성산일출봉",
      "중문관광단지3331": "중문관광단지",
      "불국사3334": "불국사",
      "석굴암3335": "석굴암",
      "첨성대3336": "첨성대",
      "타지마할3340": "타지마할",
      "자유의여신상3341": "자유의 여신상",
      "경복궁3342": "경복궁",
      "마추픽추3343": "마추픽추",
      "사그라다파밀리아3344": "사그라다 파밀리아",
      "캐시버스팅을위한고정타임스탬프컴포넌트3345": "; // 캐시 버스팅을 위한 고정 타임스탬프 (컴포넌트 마운트 시점) const cacheBuster = isDev ? `?t=${1723122651000}` :",
      "고정타임스탬프사용return3346": "; // 고정 타임스탬프 사용 return {",
      "콜로세움3347": "콜로세움",
      "타지마할3348": "타지마할",
      "자유의여신상3349": "자유의 여신상",
      "경복궁3350": "경복궁",
      "마추픽추3351": "마추픽추",
      "사그라다파밀리아3352": "사그라다 파밀리아",
      "checkmobile언어3353": ", checkMobile); }, []); // 언어 변경 시 인덱스 리셋 useEffect(() => { setCurrentLandmarkIndex(0); }, [currentLanguage]); useEffect(() => { setIsLoaded(true); // 명소 회전 (천천히 - 6초) const landmarkInterval = setInterval(() => { setCurrentLandmarkIndex((prev) => (prev + 1) % landmarks.length); }, 6000); return () => { clearInterval(landmarkInterval); }; }, [currentLanguage, landmarks.length]); // 이미지 프리로드 및 에러 처리 useEffect(() => { const preloadImages = async () => { const imagePromises = landmarks.map((landmark) => { return new Promise<void>((resolve) => { const img = new Image(); const handleLoad = () => { console.log(`✅ 이미지 로드 성공: ${landmark} (${landmarkImages[landmark]})`); resolve(); }; const handleError = (e: Event) => { console.error(`❌ 이미지 로드 실패: ${landmark}`, { src: landmarkImages[landmark], error: e, naturalWidth: img.naturalWidth, naturalHeight: img.naturalHeight }); setImageLoadErrors(prev => new Set([...prev, landmark])); resolve(); }; img.addEventListener(",
      "handleerror캐시무시하고항상3354": ", handleError); // 캐시 무시하고 항상 새로 로드 img.crossOrigin =",
      "cors이슈방지imgsrcland3355": "; // CORS 이슈 방지 img.src = landmarkImages[landmark]; }); }); try { await Promise.all(imagePromises); console.log(",
      "이미지프리로드중오류3356": "이미지 프리로드 중 오류:",
      "return이미지가전체를채우지3357": "}; } return { // 이미지가 전체를 채우지 못할 경우를 대비한 기본 그라데이션 background: `linear-gradient(135deg, rgba(20, 20, 40, 0.9) 0%, rgba(40, 40, 60, 0.9) 100%)`, backgroundImage: `linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.4)), url(",
      "cover로변경하여전체영역을채움bac3358": ", // cover로 변경하여 전체 영역을 채움 backgroundPosition:",
      "이미지상단부터표시하여전체이미지보여줌3359": ", // 이미지 상단부터 표시하여 전체 이미지 보여줌 backgroundRepeat:",
      "handlemousemove3360": ", handleMouseMove); }, []); // 자동완성 API 호출 (메모리 안전, API 중복 방지, 캐시 적용) const fetchSuggestions = useCallback(async (searchQuery: string) => { console.log(",
      "searchquery캐시확인33361": ", searchQuery); // 🧠 캐시 확인 (30분 만료) const cacheKey = `${searchQuery}-${currentLanguage}`; const cachedResult = suggestionCacheRef.current.get(cacheKey); const now = Date.now(); if (cachedResult && (now - cachedResult.timestamp) < 30 * 60 * 1000) { console.log(",
      "defaultsuggestions는객체배3362": "); // defaultSuggestions는 객체 배열이어야 하므로 타입 체크 if (isValidSuggestionsArray(translated)) { if (isMountedRef.current) setSuggestions(translated); } else { if (isMountedRef.current) { const defaultSuggestions = t(",
      "ifisvalidsuggestionsarray3363": "); if (isValidSuggestionsArray(defaultSuggestions)) { setSuggestions(defaultSuggestions); } else { // 번역이 없을 경우 기본값 setSuggestions([ { name:",
      "프랑스파리3364": "프랑스 파리",
      "타지마할3365": "타지마할",
      "인도아그라3366": "인도 아그라",
      "마추픽추3367": "마추픽추",
      "페루쿠스코3368": "페루 쿠스코",
      "api호출시작3369": "🌐 API 호출 시작:",
      "api응답받음3370": "📡 API 응답 받음:",
      "api응답데이터3371": "🔍 API 응답 데이터:",
      "datadata타입3372": "📋 data.data 타입:",
      "datadataarray인지3373": "📋 data.data Array인지:",
      "첫번째항목3374": "📋 첫 번째 항목:",
      "첫번째항목구조3375": "📋 첫 번째 항목 구조:",
      "자동완성결과설정및캐시저장완료3376": "✅ 자동완성 결과 설정 및 캐시 저장 완료:",
      "자동완성결과없음또는invalid3377": "⚠️ 자동완성 결과 없음 또는 invalid",
      "errorifismountedrefcur3378": ", error); if (isMountedRef.current) { if (isMountedRef.current) setSuggestions([]); } } finally { if (isMountedRef.current) { if (isMountedRef.current) setIsLoadingSuggestions(false); } } }, [currentLanguage, t]); // fetchSuggestions를 ref에 할당하여 안정적인 참조 유지 fetchSuggestionsRef.current = fetchSuggestions; // 디바운스된 검색 함수 (메모리 안전) useEffect(() => { console.log(",
      "디바운스실행전3379": "⏰ 디바운스 실행 전:",
      "자동완성api호출3380": "✅ 자동완성 API 호출:",
      "자동완성조건불충족3381": "❌ 자동완성 조건 불충족:",
      "constparamsnewurlsear3382": ") { const params = new URLSearchParams(window.location.search); setUrlParams(params); // 도구에서 온 파라미터 처리 const destination = params.get(",
      "ifdestinationsetquery3383": "); if (destination) { setQuery(destination); // 자동으로 가이드 생성 시작 (옵션) // handleSearch(); } // 특수 목적 파라미터 처리 if (purpose ===",
      "해당목적에맞는ui모드활성화가능3384": ") { // 해당 목적에 맞는 UI 모드 활성화 가능 console.log(",
      "영화촬영지체험모드활성화3385": "🎬 영화 촬영지 체험 모드 활성화",
      "노마드모드활성화3386": "💻 노마드 모드 활성화",
      "비자준비완료모드3387": "📋 비자 준비 완료 모드",
      "컴포넌트마운트ismountedref3388": "🚀 컴포넌트 마운트: isMountedRef =",
      "컴포넌트언마운트ismountedref설정3389": "🔚 컴포넌트 언마운트: isMountedRef 설정 false",
      "setisfocusedfalsesetshow3390": ": setIsFocused(false); setShowSuggestions(false); setSelectedSuggestionIndex(-1); break; } }; // AI 가이드 생성 (강화된 에러 처리 및 디버깅) const handleAIGeneration = async () => { if (!query.trim()) { showError(t(",
      "요청정보3393": "📍 요청 정보:",
      "환경설정상태3395": "🔧 환경 설정 상태:",
      "필수환경변수누락3396": "🚨 필수 환경 변수 누락:",
      "환경설정체크실패계속진행3398": "⚠️ 환경 설정 체크 실패, 계속 진행",
      "2단계ai가이드생성요청시작3399": "🤖 2단계: AI 가이드 생성 요청 시작",
      "문화3400": "문화",
      "역사3401": "역사",
      "중급3402": "중급",
      "30대3403": "30대",
      "친근함3404": "친근함",
      "enhancecoordinatestrueu3405": "}, enhanceCoordinates: true, useEnhancedChapters: true }), signal: AbortSignal.timeout(60000) // 60초 타임아웃 }); const responseTime = Date.now() - startTime; console.log(",
      "가이드생성성공3406": "✅ 가이드 생성 성공:",
      "가이드페이지로이동중3407": "🔄 가이드 페이지로 이동 중...",
      "json파싱오류3408": "❌ JSON 파싱 오류:",
      "원본응답텍스트처음500자3409": "원본 응답 텍스트 (처음 500자):",
      "서버응답처리중오류가발생했습니다다시시도해주3410": "서버 응답 처리 중 오류가 발생했습니다. 다시 시도해주세요.",
      "api가이드생성실패3413": "❌ API 가이드 생성 실패:",
      "responsetimeresponseti3414": "), responseTime: `${responseTime}ms` }); // 사용자 친화적 에러 메시지 if (response.status === 429) { const retryAfter = response.headers.get(",
      "showerror요청한도를초과했습니다3415": "; showError( `요청 한도를 초과했습니다. ${retryAfter}초 후 다시 시도해주세요.`, { errorType:",
      "ai서비스에일시적인문제가발생했습니다잠시후3417": "AI 서비스에 일시적인 문제가 발생했습니다. 잠시 후 다시 시도해주세요.",
      "입력하신장소정보를확인해주세요3419": "입력하신 장소 정보를 확인해주세요.",
      "ai생성예외발생3422": "❌ AI 생성 예외 발생:",
      "locationlanguagecurrentl3423": ", location, language: currentLanguage, timestamp: new Date().toISOString() }); // 네트워크 에러별 사용자 친화적 메시지 if (error instanceof Error) { if (error.name ===",
      "요청시간이초과되었습니다네트워크연결을확인하고3424": "요청 시간이 초과되었습니다. 네트워크 연결을 확인하고 다시 시도해주세요.",
      "네트워크연결에문제가있습니다인터넷연결을확인해3426": "네트워크 연결에 문제가 있습니다. 인터넷 연결을 확인해주세요.",
      "네트워크오류가발생했습니다잠시후다시시도해주세3428": "네트워크 오류가 발생했습니다. 잠시 후 다시 시도해주세요.",
      "오디오재생지연제거분리된3432": "); } }; // 오디오 재생 (지연 제거, 분리된 로딩 상태) const handleAudioPlayback = useCallback(() => { if (!query.trim() || !isMountedRef.current) { showError(t(",
      "배경헤더의끝선에맞춰서시작하고검색박3435": "{/* 배경 - 헤더의 끝선에 맞춰서 시작하고, 검색박스 위까지로 제한 - 모바일 반응형 */} <div className=",
      "style이미지가전체를채우지못3437": "}`} style={{ // 이미지가 전체를 채우지 못할 경우를 대비한 기본 그라데이션 background: `linear-gradient(135deg, rgba(20, 20, 40, 0.9) 0%, rgba(40, 40, 60, 0.9) 100%)`, backgroundImage: `linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.4)), url(",
      "cover로변경하여전체영역을채움bac3438": ", // cover로 변경하여 전체 영역을 채움 backgroundPosition:",
      "이미지상단부터표시하여전체이미지보여줌3439": ", // 이미지 상단부터 표시하여 전체 이미지 보여줌 backgroundRepeat:",
      "herosection모바일반응형패딩3440": "{/* Hero Section - 모바일 반응형 패딩 */} <section className=",
      "첫번째줄명소pc에서40작게3442": "{/* 첫 번째 줄: [명소] - PC에서 40% 작게, 모바일 그대로 */} <div className=",
      "모바일18px24px4px증가3443": "// 모바일: 18px ~ 24px (4px 증가) :",
      "pc30px고정4px증가heig3444": ", // PC: 30px 고정 (4px 증가) height: isMobile ?",
      "높이증가로글자간격개선spanc3445": "// 높이 증가로 글자 간격 개선 }}> <span className=",
      "높이증가로글자간격개선lineheigh3446": ", // 높이 증가로 글자 간격 개선 lineHeight: isMobile ?",
      "라인높이증가textalign3447": ", // 라인 높이 증가 textAlign:",
      "높이증가로글자간격개선lineheigh3450": ", // 높이 증가로 글자 간격 개선 lineHeight: isMobile ?",
      "라인높이증가textalign3451": ", // 라인 높이 증가 textAlign:",
      "30증가기본1em13eml3452": ", // 30% 증가 (기본 1em → 1.3em) letterSpacing:",
      "글자간격약간늘려서가독성향상t3453": "// 글자 간격 약간 늘려서 가독성 향상 }}> {t(`home.landmarks.${landmark}` as any) || landmark} </span> ))} </span> </span> </div> {/* 두 번째 줄: 앞에서 만드는 오디오 가이드 */} <div className=",
      "모든화면에서가로배열50압축하여중3455": "{/* 모든 화면에서 가로 배열 - 50% 압축하여 중앙 집중 */} <div className=",
      "장소입력모바일최적화divc3456": "{/* 장소 입력 - 모바일 최적화 */} <div className=",
      "svgdivai생성모3458": "/> </svg> </div> {/* AI 생성 - 모바일 최적화 */} <div className=",
      "ai가이드생성중3459": "AI 가이드 생성 중...",
      "svgdiv오디오재생3461": "/> </svg> </div> {/* 오디오 재생 - 모바일 최적화 */} <div className=",
      "오디오일시정지3462": "오디오 일시정지",
      "valuequeryonchangee3464": "value={query} onChange={(e) => setQuery(e.target.value)} onKeyDown={handleKeyDown} onFocus={() => { setIsFocused(true); // 기존에 검색 결과가 있으면 다시 표시 if (suggestions.length > 0) { setShowSuggestions(true); } }} onBlur={(e) => { // 클릭이 제안 목록 내부에서 일어나는지 확인 const relatedTarget = e.relatedTarget as HTMLElement; if (!relatedTarget || !relatedTarget.closest(",
      "자동완성api응답대기시간확보3465": ")) { // 자동완성 API 응답 대기 시간 확보 (300ms 지연) setTimeout(() => { setIsFocused(false); setShowSuggestions(false); }, 300); } }} placeholder={String(t(",
      "검색중3466": "검색 중...",
      "svgbuttondiv3467": "/> </svg> )} </button> </div> {/* 검색 도움말 (화면 판독기용) */} <div id=",
      "검색제안목록3469": "검색 제안 목록",
      "검색중spandivdiv3470": "검색 중...</span> </div> </div> ) : suggestions.length > 0 ? ( suggestions.map((suggestion, index) => ( <button key={index} id={`suggestion-${index}`} onClick={() => { const selectedLocation = suggestion.name; setQuery(selectedLocation); setIsFocused(false); setShowSuggestions(false); setSelectedSuggestionIndex(-1); router.push(`/guide/${encodeURIComponent(selectedLocation)}?lang=${currentLanguage}`); }} onMouseEnter={() => setSelectedSuggestionIndex(index)} onMouseLeave={() => setSelectedSuggestionIndex(-1)} className={`w-full px-6 py-4 text-left transition-all duration-200 group suggestion-item focus:outline-none focus:ring-2 focus:ring-inset focus:ring-black ${ selectedSuggestionIndex === index ?",
      "ariaselectedselectedsuggest3471": "aria-selected={selectedSuggestionIndex === index} aria-label={`${suggestion.name}, ${suggestion.location}로 이동`} > <div className=",
      "섹션제목divclassname3473": "{/* 섹션 제목 */} <div className=",
      "ariaselectedactiveregion3475": "aria-selected={activeRegion === region.id} aria-controls={`${region.id}-panel`} tabIndex={activeRegion === region.id ? 0 : -1} > {region.label} </button> ))} </div> </div> </div> {/* 국가 카드 슬라이드 - 인기여행지 스타일 */} <div className=",
      "메인카드모던모노크롬스타일d3476": "{/* 메인 카드 - 모던 모노크롬 스타일 */} <div className=",
      "상단모노크롬헤더divclassn3477": "{/* 상단 모노크롬 헤더 */} <div className=",
      "미니멀패턴divclassname3478": "{/* 미니멀 패턴 */} <div className=",
      "spandivdiv카드3481": ")}</span> </div> </div> {/* 카드 콘텐츠 - 모노크롬 스타일 */} <div className=",
      "설명pclassname3482": "{/* 설명 */} <p className=",
      "countrydescriptionp3483": "{country.description} </p> {/* 인기 관광지 - 클릭 가능한 버튼들 */} <div className=",
      "true특정명소에대해지역컨텍스트3484": ", true); // 특정 명소에 대해 지역 컨텍스트 추가 let url = `/guide/${encodeURIComponent(attraction)}?lang=${currentLanguage}`; if (country.id ===",
      "방콕대왕궁3485": "방콕 대왕궁",
      "방콕3486": "방콕",
      "arialabelattraction가이드3487": "aria-label={`${attraction} 가이드 생성하기`} > <div className=",
      "svgdivdivdiv3489": "/> </svg> </div> </div> </div> </div> </div> </div> ))} </div> </div> {/* 모바일 스크롤 힌트 */} <div className=",
      "spandivdiv전략3490": ")}</span> </div> </div> {/* 전략적 광고 배치 2: 지역별 국가 섹션 하단 */} <div className=",
      "주요서비스h4ulclassname3491": "주요 서비스</h4> <ul className=",
      "오디오가이드aliliahref3492": "오디오가이드 </a> </li> <li> <a href=",
      "ai도슨트aliliahref3493": "AI 도슨트 </a> </li> <li> <a href=",
      "투어라디오aliliahref3494": "투어라디오 </a> </li> <li> <a href=",
      "여행라디오aliliahref3495": "여행라디오 </a> </li> <li> <a href=",
      "ai여행aliuldiv3496": "AI여행 </a> </li> </ul> </div> {/* 여행 도구 */} <div> <h4 className=",
      "여행도구h4ulclassname3497": "여행 도구</h4> <ul className=",
      "ai여행계획aliliahr3498": "AI 여행 계획 </a> </li> <li> <a href=",
      "노마드계산기aliliahre3499": "노마드 계산기 </a> </li> <li> <a href=",
      "영화촬영지aliliahref3500": "영화 촬영지 </a> </li> <li> <a href=",
      "비자체커aliuldiv3501": "비자 체커 </a> </li> </ul> </div> {/* Support */} <div> <h4 className=",
      "항목index3502": "🔬 항목 ${index}:",
      "고정타임스탬프사용return3503": ": ''; // 고정 타임스탬프 사용 return { '에펠탑':",
      "콜로세움3504": ", '콜로세움':",
      "타지마할3505": ", '타지마할':",
      "자유의여신상3506": ", '자유의 여신상':",
      "경복궁3507": ", '경복궁':",
      "마추픽추3508": ", '마추픽추':",
      "사그라다파밀리아3509": ", '사그라다 파밀리아':",
      "constcurrentlandm3510": "}; }, []); const [currentLandmarkIndex, setCurrentLandmarkIndex] = useState(0); const [imageLoadErrors, setImageLoadErrors] = useState<Set<string>>(new Set()); const [imagesPreloaded, setImagesPreloaded] = useState(false); const [isMobile, setIsMobile] = useState(false); // 화면 크기 감지 useEffect(() => { const checkMobile = () => { setIsMobile(window.innerWidth < 640); }; checkMobile(); window.addEventListener('resize', checkMobile); return () => window.removeEventListener('resize', checkMobile); }, []); // 언어 변경 시 인덱스 리셋 useEffect(() => { setCurrentLandmarkIndex(0); }, [currentLanguage]); useEffect(() => { setIsLoaded(true); // 명소 회전 (천천히 - 6초) const landmarkInterval = setInterval(() => { setCurrentLandmarkIndex((prev) => (prev + 1) % landmarks.length); }, 6000); return () => { clearInterval(landmarkInterval); }; }, [currentLanguage, landmarks.length]); // 이미지 프리로드 및 에러 처리 useEffect(() => { const preloadImages = async () => { const imagePromises = landmarks.map((landmark) => { return new Promise<void>((resolve) => { const img = new Image(); const handleLoad = () => { console.log(",
      "이미지로드실패landmark3511": "❌ 이미지 로드 실패: ${landmark}",
      "backgroundsizecover3512": ", backgroundSize: 'cover', // cover로 변경하여 전체 영역을 채움 backgroundPosition: 'top center', // 이미지 상단부터 표시하여 전체 이미지 보여줌 backgroundRepeat: 'no-repeat' }; }, [imageLoadErrors, landmarkImages]); useEffect(() => { const handleMouseMove = (e: MouseEvent) => { setMousePosition({ x: e.clientX, y: e.clientY }); }; window.addEventListener('mousemove', handleMouseMove); return () => window.removeEventListener('mousemove', handleMouseMove); }, []); // 자동완성 API 호출 (메모리 안전, API 중복 방지, 캐시 적용) const fetchSuggestions = useCallback(async (searchQuery: string) => { console.log('🚀 fetchSuggestions 함수 실행 시작:', searchQuery); // 🧠 캐시 확인 (30분 만료) const cacheKey =",
      "constcachedresultsuggest3513": "; const cachedResult = suggestionCacheRef.current.get(cacheKey); const now = Date.now(); if (cachedResult && (now - cachedResult.timestamp) < 30 * 60 * 1000) { console.log('⚡ 캐시에서 결과 반환:', searchQuery); if (isMountedRef.current) { setSuggestions(cachedResult.data); setShowSuggestions(true); } return; } if (searchQuery.length < 1) { const translated = t('home.defaultSuggestions'); // defaultSuggestions는 객체 배열이어야 하므로 타입 체크 if (isValidSuggestionsArray(translated)) { if (isMountedRef.current) setSuggestions(translated); } else { if (isMountedRef.current) { const defaultSuggestions = t('home.defaultSuggestions'); if (isValidSuggestionsArray(defaultSuggestions)) { setSuggestions(defaultSuggestions); } else { // 번역이 없을 경우 기본값 setSuggestions([ { name: '에펠탑', location: '프랑스 파리' }, { name: '타지마할', location: '인도 아그라' }, { name: '마추픽추', location: '페루 쿠스코' } ]); } } } return; } // 이전 요청 취소 if (abortControllerRef.current) { abortControllerRef.current.abort(); } abortControllerRef.current = new AbortController(); if (isMountedRef.current) setIsLoadingSuggestions(true); try { const apiUrl =",
      "consolelogapi호출시작3514": "; console.log('🌐 API 호출 시작:', apiUrl); const response = await fetch(apiUrl, { signal: abortControllerRef.current.signal, cache: 'no-cache' }); console.log('📡 API 응답 받음:', response.status, response.statusText); if (!response.ok) { throw new Error(",
      "constdataawaitrespon3515": "); } const data = await response.json(); console.log('🔍 API 응답 데이터:', data); console.log('📋 data.success:', data.success); console.log('📋 data.data:', data.data); console.log('📋 data.data 타입:', typeof data.data); console.log('📋 data.data Array인지:', Array.isArray(data.data)); if (Array.isArray(data.data) && data.data.length > 0) { console.log('📋 첫 번째 항목:', data.data[0]); console.log('📋 첫 번째 항목 구조:', Object.keys(data.data[0])); } // 컴포넌트가 마운트되어 있을 때만 상태 업데이트 if (!isMountedRef.current) return; if (data.success && isValidSuggestionsArray(data.data)) { const suggestionsData = data.data.slice(0, 5); // 최대 5개 제안 // 🧠 캐시에 저장 (LRU 방식, 최대 100개) const cache = suggestionCacheRef.current; cache.set(cacheKey, { data: suggestionsData, timestamp: Date.now() }); // LRU: 100개 초과시 가장 오래된 항목 제거 if (cache.size > 100) { const firstKey = cache.keys().next().value; if (firstKey) cache.delete(firstKey); } if (isMountedRef.current) { setSuggestions(suggestionsData); setSelectedSuggestionIndex(-1); // 새로운 제안이 오면 선택 초기화 setShowSuggestions(true); // 성공적으로 받으면 드롭다운 표시 console.log('✅ 자동완성 결과 설정 및 캐시 저장 완료:', suggestionsData.length, '개'); } } else { if (isMountedRef.current) { setSuggestions([]); setSelectedSuggestionIndex(-1); setShowSuggestions(false); console.log('⚠️ 자동완성 결과 없음 또는 invalid'); } } } catch (error) { // AbortError는 의도적인 취소이므로 무시 if (error instanceof Error && error.name === 'AbortError') return; console.error('Suggestions fetch error:', error); if (isMountedRef.current) { if (isMountedRef.current) setSuggestions([]); } } finally { if (isMountedRef.current) { if (isMountedRef.current) setIsLoadingSuggestions(false); } } }, [currentLanguage, t]); // fetchSuggestions를 ref에 할당하여 안정적인 참조 유지 fetchSuggestionsRef.current = fetchSuggestions; // 디바운스된 검색 함수 (메모리 안전) useEffect(() => { console.log('🔍 디바운스 트리거:', { query: query.trim(), isFocused, isMountedRef: isMountedRef.current }); if (!isMountedRef.current) return; const timeoutId = setTimeout(() => { console.log('⏰ 디바운스 실행 전:', { query: query.trim(), isFocused, isMountedRef: isMountedRef.current }); if (query.trim() && isFocused && isMountedRef.current) { console.log('✅ 자동완성 API 호출:', query.trim()); fetchSuggestionsRef.current?.(query.trim()); } else { console.log('❌ 자동완성 조건 불충족:', { hasQuery: !!query.trim(), isFocused, isMounted: isMountedRef.current }); } }, 150); // 150ms 디바운스 (속도 최적화) return () => { clearTimeout(timeoutId); }; }, [query, currentLanguage, isFocused]); // fetchSuggestions 의존성 제거하여 순환참조 방지 // URL 파라미터 처리 효과 useEffect(() => { if (typeof window !== 'undefined') { const params = new URLSearchParams(window.location.search); setUrlParams(params); // 도구에서 온 파라미터 처리 const destination = params.get('destination'); const purpose = params.get('purpose'); const film = params.get('film'); const nomad = params.get('nomad'); const visa = params.get('visa'); if (destination) { setQuery(destination); // 자동으로 가이드 생성 시작 (옵션) // handleSearch(); } // 특수 목적 파라미터 처리 if (purpose === 'travel' || purpose === 'coworking') { // 해당 목적에 맞는 UI 모드 활성화 가능 console.log('🎯 특수 목적 모드:', purpose); } if (film === 'experience') { console.log('🎬 영화 촬영지 체험 모드 활성화'); } if (nomad === 'true') { console.log('💻 노마드 모드 활성화'); } if (visa === 'ready') { console.log('📋 비자 준비 완료 모드'); } } }, []); // 컴포넌트 마운트/언마운트 관리 (React Strict Mode 대응) useEffect(() => { // 컴포넌트 마운트 시 초기화 isMountedRef.current = true; console.log('🚀 컴포넌트 마운트: isMountedRef =', isMountedRef.current); return () => { // 컴포넌트 언마운트 표시 console.log('🔚 컴포넌트 언마운트: isMountedRef 설정 false'); isMountedRef.current = false; // 진행 중인 API 요청 취소 if (abortControllerRef.current) { abortControllerRef.current.abort(); } }; }, []); // 검색 실행 (메모리 안전, 분리된 로딩 상태) const handleSearch = useCallback(async () => { if (!query.trim() || !isMountedRef.current) return; setCurrentLoadingQuery(query.trim()); setLoadingState('search', true); try { router.push(",
      "elsehandlesearch3516": "); } else { handleSearch(); } break; case 'Escape': setIsFocused(false); setShowSuggestions(false); setSelectedSuggestionIndex(-1); break; } }; // AI 가이드 생성 (강화된 에러 처리 및 디버깅) const handleAIGeneration = async () => { if (!query.trim()) { showError(t('home.alerts.enterLocation') as string, { errorType: 'validation', title: '입력 확인' }); return; } const location = query.trim(); setCurrentLoadingQuery(location); setLoadingState('guide', true); console.group('🚀 AI 가이드 생성 시작'); console.log('📍 요청 정보:', { location, language: currentLanguage, timestamp: new Date().toISOString(), userAgent: navigator.userAgent, url: window.location.href }); try { // 1단계: 환경 변수 사전 체크 console.log('🔍 1단계: 환경 설정 체크 중...'); const envCheck = await fetch('/api/debug/env', { method: 'GET', cache: 'no-cache' }); if (envCheck.ok) { const envData = await envCheck.json(); console.log('🔧 환경 설정 상태:', envData.diagnostics); if (envData.criticalMissing.length > 0) { console.error('🚨 필수 환경 변수 누락:', envData.criticalMissing); showError(",
      "errortypeconfigtitle3517": ", { errorType: 'config', title: '설정 오류', details:",
      "contenttyperesponseheader3519": ", contentType: response.headers.get('content-type'), contentLength: response.headers.get('content-length') }); if (response.ok) { try { const data = await response.json(); console.log('✅ 가이드 생성 성공:', { success: data.success, location: data.location, language: data.language, hasData: !!data.data, dataIntegration: data.dataIntegration?.hasIntegratedData, coordinateEnhancement: data.coordinateEnhancement?.success, cached: data.cached, totalTime:",
      "3단계성공적인페이지이동consol3520": "}); // 3단계: 성공적인 페이지 이동 console.log('🔄 가이드 페이지로 이동 중...'); router.push(",
      "catchjsonerrorconso3521": "); } catch (jsonError) { console.error('❌ JSON 파싱 오류:', jsonError); const responseText = await response.text(); console.log('원본 응답 텍스트 (처음 500자):', responseText); showError( '서버 응답 처리 중 오류가 발생했습니다. 다시 시도해주세요.', { errorType: 'server', title: '서버 응답 오류', details:",
      "details서버에서오류응답을받았습니다3523": ", details: '서버에서 오류 응답을 받았습니다.' }; } console.error('❌ API 가이드 생성 실패:', { status: response.status, statusText: response.statusText, error: errorData.error, details: errorData.details, retryAfter: response.headers.get('retry-after'), responseTime:",
      "사용자친화적에러메시지ifresp3524": "}); // 사용자 친화적 에러 메시지 if (response.status === 429) { const retryAfter = response.headers.get('retry-after') || '60'; showError(",
      "errortypeservertitle3525": ", { errorType: 'server', title: '요청 제한', details:",
      "showerrordefaultmessage3528": "; showError( defaultMessage, { errorType: 'server', title: '가이드 생성 실패', details:",
      "queryaudioplayingro3535": "); }, [query, audioPlaying, router, t, setLoadingState, currentLanguage, showError]); // 가이드 생성 중일 때 모노크롬 로딩 화면 표시 if (isAnyLoading) { const currentLoadingType = Object.entries(loadingStates).find(([_, loading]) => loading)?.[0] || 'search'; return ( <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\"> <GuideLoading type=\"generating\" message={String(t('guide.generatingWithLocation', { location: currentLoadingQuery || query || '' }))} subMessage={String(t('guide.generatingSubMessage'))} showProgress={true} /> </div> ); } return ( <div className=\"min-h-screen bg-white font-sans relative\"> {/* 배경 - 헤더의 끝선에 맞춰서 시작하고, 검색박스 위까지로 제한 - 모바일 반응형 */} <div className=\"hero-background-container\"> {/* 회전하는 배경 이미지들 */} {landmarks.map((landmark, index) => ( <div key={landmark} className={",
      "style이미지가전체를채우지못할3536": "} style={{ // 이미지가 전체를 채우지 못할 경우를 대비한 기본 그라데이션 background:",
      "backgroundsizecover3537": ", backgroundSize: 'cover', // cover로 변경하여 전체 영역을 채움 backgroundPosition: 'top center', // 이미지 상단부터 표시하여 전체 이미지 보여줌 backgroundRepeat: 'no-repeat', zIndex: -2, borderRadius: 'inherit' }} /> ))} </div> {/* SEO Structured Data */} <StructuredData type=\"WebSite\" /> <StructuredData type=\"TravelAgency\" /> <StructuredData type=\"SoftwareApplication\" /> <FAQSchema faqs={getDefaultFAQs(currentLanguage as 'ko' | 'en' | 'ja' | 'zh' | 'es')} language={currentLanguage as 'ko' | 'en' | 'ja' | 'zh' | 'es'} /> <BreadcrumbSchema items={generateHomeBreadcrumb()} /> {/* Main Content */} <main className=\"relative z-10 overflow-hidden\"> {/* Hero Section - 모바일 반응형 패딩 */} <section className=\"relative flex flex-col items-center justify-center px-3 sm:px-4 md:px-6 lg:px-8 pt-20 sm:pt-24 md:pt-32 pb-6 sm:pb-8 md:pb-12 min-h-screen\"> {/* 중앙 명소 텍스트 - 2줄 레이아웃 (명소 부분만 회전) */} <div className=\"text-center text-white mb-4 sm:mb-6 w-full flex flex-col items-center justify-center\"> {/* 첫 번째 줄: [명소] - PC에서 40% 작게, 모바일 그대로 */} <div className=\"font-bold mb-2 flex items-center justify-center w-full\" style={{ textShadow: '2px 2px 8px rgba(0,0,0,0.8)', fontSize: isMobile ? 'clamp(1.125rem, 4vw, 1.5rem)' // 모바일: 18px ~ 24px (4px 증가) : 'clamp(1.875rem, 2.6vw, 1.875rem)', // PC: 30px 고정 (4px 증가) height: isMobile ? '42px' : '40px' // 높이 증가로 글자 간격 개선 }}> <span className=\"inline-block overflow-hidden whitespace-nowrap w-full max-w-none\" style={{ height: isMobile ? '42px' : '40px', // 높이 증가로 글자 간격 개선 lineHeight: isMobile ? '42px' : '40px', // 라인 높이 증가 textAlign: 'center' }}> <span className=\"inline-block transition-transform duration-1000 ease-out w-full\" style={{ transform:",
      "asanylandmarkspan3539": "as any) || landmark} </span> ))} </span> </span> </div> {/* 두 번째 줄: 앞에서 만드는 오디오 가이드 */} <div className=\"text-sm sm:text-base md:text-lg lg:text-xl xl:text-2xl font-medium\" style={{ textShadow: '2px 2px 6px rgba(0,0,0,0.8)' }}> {t('home.audioGuidePrefix')} </div> <div className=\"text-xs sm:text-sm md:text-base lg:text-lg font-light mb-1 text-gray-300\" style={{ textShadow: '2px 2px 6px rgba(0,0,0,0.8)' }}> {t('home.subtitle')} </div> <div className=\"text-xs sm:text-sm md:text-base lg:text-lg font-light text-gray-300\" style={{ textShadow: '2px 2px 6px rgba(0,0,0,0.8)' }}> {t('home.subtitle2')} </div> </div> {/* How to Use - 3 Steps - 모바일 반응형 */} <div className=\"relative z-10 py-4 sm:py-6 md:py-8 w-full max-w-4xl\"> <div className=\"max-w-4xl mx-auto px-3 sm:px-4 md:px-6\"> {/* 모든 화면에서 가로 배열 - 50% 압축하여 중앙 집중 */} <div className=\"flex flex-row justify-center items-start gap-2 sm:gap-3 md:gap-4 lg:gap-5 xl:gap-6\"> {/* 장소 입력 - 모바일 최적화 */} <div className=\"text-center relative z-10 flex-1 max-w-24 sm:max-w-28 md:max-w-32 lg:max-w-xs\"> <div className=\"w-10 h-10 sm:w-12 sm:h-12 md:w-16 md:h-16 lg:w-20 lg:h-20 mx-auto rounded-full flex items-center justify-center bg-white text-black mb-2 sm:mb-3 md:mb-4 shadow-lg border-2 border-gray-200\"> <svg className=\"w-3 h-3 sm:w-4 sm:h-4 md:w-5 md:h-5 lg:w-6 lg:h-6 text-black\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"> <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" /> <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" /> </svg> </div> <div className=\"min-h-10 sm:min-h-12 md:min-h-16 lg:min-h-20 flex flex-col justify-start pt-1 sm:pt-2\"> <div className=\"text-xs sm:text-sm md:text-base lg:text-lg xl:text-xl font-medium text-gray-200 mb-0 sm:mb-1 whitespace-nowrap overflow-hidden text-ellipsis\" style={{ textShadow: '2px 2px 6px rgba(0,0,0,0.8)' }}>{t('home.stepTitles.inputLocation')}</div> <div className=\"text-xs sm:text-xs md:text-sm lg:text-base font-light text-gray-300 opacity-80 whitespace-nowrap overflow-hidden text-ellipsis\" style={{ textShadow: '2px 2px 6px rgba(0,0,0,0.8)' }}>{t('home.stepTitles.inputLocationSub')}</div> </div> </div> {/* 화살표 1 - 모바일 최적화 */} <div className=\"flex items-center justify-center pt-3 sm:pt-4 md:pt-6 lg:pt-8\"> <svg className=\"w-2 h-2 sm:w-3 sm:h-3 md:w-4 md:h-4 lg:w-6 lg:h-6 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"> <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" /> </svg> </div> {/* AI 생성 - 모바일 최적화 */} <div className=\"text-center relative z-10 flex-1 max-w-24 sm:max-w-28 md:max-w-32 lg:max-w-xs\"> <button onClick={handleAIGeneration} disabled={!query.trim() || loadingStates.search} className={",
      "arialabelloadingstatesgu3540": "} aria-label={loadingStates.guide ? 'AI 가이드 생성 중...' : String(t('home.stepTitles.aiGenerate'))} aria-disabled={!query.trim() || loadingStates.search} > {loadingStates.guide ? ( <div className=\"w-3 h-3 sm:w-4 sm:h-4 md:w-5 md:h-5 lg:w-6 lg:h-6 border-2 border-black border-t-transparent rounded-full animate-spin\"></div> ) : ( <svg className=\"w-3 h-3 sm:w-4 sm:h-4 md:w-5 md:h-5 lg:w-6 lg:h-6 text-black\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"> <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" /> </svg> )} </button> <div className=\"min-h-10 sm:min-h-12 md:min-h-16 lg:min-h-20 flex flex-col justify-start pt-1 sm:pt-2\"> <div className=\"text-xs sm:text-sm md:text-base lg:text-lg xl:text-xl font-medium text-gray-200 mb-0 sm:mb-1 whitespace-nowrap overflow-hidden text-ellipsis\" style={{ textShadow: '2px 2px 6px rgba(0,0,0,0.8)' }}>{t('home.stepTitles.aiGenerate')}</div> <div className=\"text-xs sm:text-xs md:text-sm lg:text-base font-light text-gray-300 opacity-80 whitespace-nowrap overflow-hidden text-ellipsis\" style={{ textShadow: '2px 2px 6px rgba(0,0,0,0.8)' }}>{t('home.stepTitles.aiGenerateSub')}</div> </div> </div> {/* 화살표 2 - 모바일 최적화 */} <div className=\"flex items-center justify-center pt-3 sm:pt-4 md:pt-6 lg:pt-8\"> <svg className=\"w-2 h-2 sm:w-3 sm:h-3 md:w-4 md:h-4 lg:w-6 lg:h-6 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"> <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" /> </svg> </div> {/* 오디오 재생 - 모바일 최적화 */} <div className=\"text-center relative z-10 flex-1 max-w-24 sm:max-w-28 md:max-w-32 lg:max-w-xs\"> <button onClick={handleAudioPlayback} disabled={!query.trim()} className={",
      "arialabelaudioplaying3541": "} aria-label={audioPlaying ? '오디오 일시정지' : String(t('home.stepTitles.audioPlay'))} aria-pressed={audioPlaying} > {audioPlaying ? ( <svg className=\"w-3 h-3 sm:w-4 sm:h-4 md:w-5 md:h-5 lg:w-6 lg:h-6 text-black\" fill=\"currentColor\" viewBox=\"0 0 24 24\"> <path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"/> </svg> ) : ( <svg className=\"w-3 h-3 sm:w-4 sm:h-4 md:w-5 md:h-5 lg:w-6 lg:h-6 text-black\" fill=\"currentColor\" viewBox=\"0 0 24 24\"> <path d=\"M8 5v14l11-7z\"/> </svg> )} </button> <div className=\"min-h-10 sm:min-h-12 md:min-h-16 lg:min-h-20 flex flex-col justify-start pt-1 sm:pt-2\"> <div className=\"text-xs sm:text-sm md:text-base lg:text-lg xl:text-xl font-medium text-gray-200 mb-0 sm:mb-1 whitespace-nowrap overflow-hidden text-ellipsis\" style={{ textShadow: '2px 2px 6px rgba(0,0,0,0.8)' }}>{t('home.stepTitles.audioPlay')}</div> <div className=\"text-xs sm:text-xs md:text-sm lg:text-base font-light text-gray-300 opacity-80 whitespace-nowrap overflow-hidden text-ellipsis\" style={{ textShadow: '2px 2px 6px rgba(0,0,0,0.8)' }}>{t('home.stepTitles.audioPlaySub')}</div> </div> </div> </div> </div> </div> {/* Search Box - 모바일 반응형 */} <div className=\"relative z-[9998] w-full max-w-2xl mx-auto px-3 sm:px-4 md:px-6 lg:px-0\"> <div className={",
      "inputtypetextvalueq3542": "}> <input type=\"text\" value={query} onChange={(e) => setQuery(e.target.value)} onKeyDown={handleKeyDown} onFocus={() => { setIsFocused(true); // 기존에 검색 결과가 있으면 다시 표시 if (suggestions.length > 0) { setShowSuggestions(true); } }} onBlur={(e) => { // 클릭이 제안 목록 내부에서 일어나는지 확인 const relatedTarget = e.relatedTarget as HTMLElement; if (!relatedTarget || !relatedTarget.closest('.suggestions-container')) { // 자동완성 API 응답 대기 시간 확보 (300ms 지연) setTimeout(() => { setIsFocused(false); setShowSuggestions(false); }, 300); } }} placeholder={String(t('home.searchPlaceholder'))} className=\"w-full px-4 sm:px-6 md:px-8 py-3 sm:py-4 md:py-5 lg:py-6 text-base sm:text-lg md:text-xl font-light text-black bg-transparent rounded-3xl focus:outline-none transition-all duration-300 placeholder-gray-400 focus:ring-2 focus:ring-black focus:ring-opacity-20\" aria-label={String(t('home.searchPlaceholder'))} aria-describedby=\"search-help\" aria-expanded={isFocused && suggestions.length > 0} aria-autocomplete=\"list\" aria-activedescendant={selectedSuggestionIndex >= 0 ?",
      "arialabelloadingstatesse3543": "} aria-label={loadingStates.search ? '검색 중...' : String(t('home.searchButton'))} type=\"submit\" > {loadingStates.search ? ( <div className=\"w-3 h-3 sm:w-4 sm:h-4 md:w-5 md:h-5 lg:w-6 lg:h-6 border-2 border-white border-t-transparent rounded-full animate-spin\" /> ) : ( <svg className=\"w-3 h-3 sm:w-4 sm:h-4 md:w-5 md:h-5 lg:w-6 lg:h-6 transition-transform group-hover:scale-110\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"> <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" /> </svg> )} </button> </div> {/* 검색 도움말 (화면 판독기용) */} <div id=\"search-help\" className=\"sr-only\"> 검색어를 입력하고 Enter키를 누르거나 제안 목록에서 선택하세요. 화살표 키로 제안을 탐색할 수 있습니다. </div> {/* Suggestions Dropdown */} {(isFocused || showSuggestions) && query.length > 0 && ( <div className=\"absolute top-full left-0 right-0 bg-white rounded-2xl shadow-2xl shadow-black/15 border border-gray-100 overflow-hidden z-[9999] autocomplete-dropdown suggestions-container\" role=\"listbox\" id=\"suggestions-listbox\" aria-label=\"검색 제안 목록\" > {isLoadingSuggestions ? ( <div className=\"px-6 py-4 text-center\"> <div className=\"flex items-center justify-center gap-2\"> <div className=\"w-4 h-4 border-2 border-gray-300 border-t-black rounded-full animate-spin\"></div> <span className=\"text-sm text-gray-500\">검색 중...</span> </div> </div> ) : suggestions.length > 0 ? ( suggestions.map((suggestion, index) => ( <button key={index} id={",
      "suggestionnamesuggesti3544": "${suggestion.name}, ${suggestion.location}로 이동",
      "tabindexactiveregionr3545": "} tabIndex={activeRegion === region.id ? 0 : -1} > {region.label} </button> ))} </div> </div> </div> {/* 국가 카드 슬라이드 - 인기여행지 스타일 */} <div className=\"overflow-x-auto pb-4\" role=\"tabpanel\" id={",
      "divclassnameflexspace3546": "} > <div className=\"flex space-x-6 min-w-max px-2\"> {regionCountries[activeRegion as keyof typeof regionCountries].map((country, index) => ( <div key={country.id} className=\"flex-shrink-0 w-64 group\" > {/* 메인 카드 - 모던 모노크롬 스타일 */} <div className=\"relative bg-white rounded-2xl border border-gray-100 hover:border-gray-200 hover:shadow-xl transition-all duration-500 overflow-hidden group-hover:scale-[1.02]\"> {/* 상단 모노크롬 헤더 */} <div className=\"relative h-32 bg-gradient-to-br from-gray-900 to-black overflow-hidden\"> {/* 미니멀 패턴 */} <div className=\"absolute inset-0 bg-white/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div> <div className=\"absolute top-0 right-0 w-32 h-32 bg-white/3 rounded-full transform translate-x-8 -translate-y-8\"></div> <div className=\"absolute bottom-0 left-0 w-20 h-20 bg-white/3 rounded-full transform -translate-x-4 translate-y-4\"></div> {/* 국기와 국가명 */} <div className=\"absolute inset-0 flex flex-col items-center justify-center text-white\"> <div className=\"text-4xl mb-2 transform group-hover:scale-110 transition-transform duration-300 filter drop-shadow-sm\"> {country.flag} </div> <h3 className=\"font-light text-lg tracking-wider\"> {country.name} </h3> </div> {/* 인기 배지 - 모노크롬 */} <div className=\"absolute top-3 right-3 bg-white/10 backdrop-blur-sm px-3 py-1 rounded-full border border-white/20\"> <span className=\"text-xs text-white font-light tracking-wide\">{t('home.popularBadge')}</span> </div> </div> {/* 카드 콘텐츠 - 모노크롬 스타일 */} <div className=\"p-6\"> {/* 설명 */} <p className=\"text-sm text-gray-600 mb-5 leading-relaxed font-light\"> {country.description} </p> {/* 인기 관광지 - 클릭 가능한 버튼들 */} <div className=\"space-y-3 mb-5\"> <h4 className=\"text-xs font-medium text-gray-900 uppercase tracking-[0.1em] letter-spacing-wider\"> {t('home.countryAttraction')} </h4> {country.attractions.slice(0, 3).map((attraction, idx) => ( <button key={idx} onClick={(e) => { e.stopPropagation(); setLoadingState('country', true); // 특정 명소에 대해 지역 컨텍스트 추가 let url =",
      "ifcountryidthailand3547": "; if (country.id === 'thailand' && attraction === '방콕 대왕궁') { url += '&parent=' + encodeURIComponent('방콕'); } router.push(url); }} className=\"flex items-center text-sm text-gray-700 hover:text-black transition-colors w-full text-left py-1 px-2 -mx-2 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-black focus:ring-opacity-20\" aria-label={",
      "errorsetimagespreloaded3548": ":', error); setImagesPreloaded(true); // 에러가 있어도 UI는 표시 } }; preloadImages(); }, [landmarks, landmarkImages]); // 이미지 로드 에러 처리 헬퍼 const getBackgroundStyle = useCallback((landmark: string) => { const hasError = imageLoadErrors.has(landmark); if (hasError) { // 폴백: 그라데이션 배경 (텍스트 가독성을 위한 오버레이 추가) return { background:",
      "searchquery캐시확인3549": ":', searchQuery); // 🧠 캐시 확인 (30분 만료) const cacheKey = `${searchQuery}-${currentLanguage}`; const cachedResult = suggestionCacheRef.current.get(cacheKey); const now = Date.now(); if (cachedResult && (now - cachedResult.timestamp) < 30 * 60 * 1000) { console.log(",
      "에펠탑3550": ": '에펠탑",
      "프랑스파리3551": ": '프랑스 파리",
      "타지마할3552": ": '타지마할",
      "인도아그라3553": ": '인도 아그라",
      "마추픽추3554": ": '마추픽추",
      "페루쿠스코3555": ": '페루 쿠스코",
      "objectkeysdatadata03556": ":', Object.keys(data.data[0])); } // 컴포넌트가 마운트되어 있을 때만 상태 업데이트 if (!isMountedRef.current) return; if (data.success && isValidSuggestionsArray(data.data)) { const suggestionsData = data.data.slice(0, 5); // 최대 5개 제안 // 🧠 캐시에 저장 (LRU 방식, 최대 100개) const cache = suggestionCacheRef.current; cache.set(cacheKey, { data: suggestionsData, timestamp: Date.now() }); // LRU: 100개 초과시 가장 오래된 항목 제거 if (cache.size > 100) { const firstKey = cache.keys().next().value; if (firstKey) cache.delete(firstKey); } if (isMountedRef.current) { setSuggestions(suggestionsData); setSelectedSuggestionIndex(-1); // 새로운 제안이 오면 선택 초기화 setShowSuggestions(true); // 성공적으로 받으면 드롭다운 표시 console.log(",
      "errorifismountedrefc3557": ":', error); if (isMountedRef.current) { if (isMountedRef.current) setSuggestions([]); } } finally { if (isMountedRef.current) { if (isMountedRef.current) setIsLoadingSuggestions(false); } } }, [currentLanguage, t]); // fetchSuggestions를 ref에 할당하여 안정적인 참조 유지 fetchSuggestionsRef.current = fetchSuggestions; // 디바운스된 검색 함수 (메모리 안전) useEffect(() => { console.log(",
      "hasqueryquerytrim3558": ":', { hasQuery: !!query.trim(), isFocused, isMounted: isMountedRef.current }); } }, 150); // 150ms 디바운스 (속도 최적화) return () => { clearTimeout(timeoutId); }; }, [query, currentLanguage, isFocused]); // fetchSuggestions 의존성 제거하여 순환참조 방지 // URL 파라미터 처리 효과 useEffect(() => { if (typeof window !==",
      "locationlanguagecurr3560": ":', { location, language: currentLanguage, timestamp: new Date().toISOString(), userAgent: navigator.userAgent, url: window.location.href }); try { // 1단계: 환경 변수 사전 체크 console.log(",
      "envdatacriticalmissing3561": ":', envData.criticalMissing); showError( `서비스 설정에 문제가 있습니다. 관리자에게 문의하세요.`, { errorType:",
      "중급3563": ": '중급",
      "30대3564": ": '30대",
      "친근함3565": ": '친근함",
      "successdatasuccessl3566": ":', { success: data.success, location: data.location, language: data.language, hasData: !!data.data, dataIntegration: data.dataIntegration?.hasIntegratedData, coordinateEnhancement: data.coordinateEnhancement?.success, cached: data.cached, totalTime: `${responseTime}ms` }); // 3단계: 성공적인 페이지 이동 console.log(",
      "서버에서오류응답을받았습니다3568": ": '서버에서 오류 응답을 받았습니다.",
      "헤더3595": "{/* 헤더 */}",
      "업데이트날짜3597": "{/* 업데이트 날짜 */}",
      "헤더divclassname3598": "{/* 헤더 */} <div className=",
      "p업데이트날짜divc3600": ")} </p> {/* 업데이트 날짜 */} <div className=",
      "헤더3617": "{/* 헤더 */}",
      "업데이트날짜3619": "{/* 업데이트 날짜 */}",
      "헤더divclassname3620": "{/* 헤더 */} <div className=",
      "p업데이트날짜divc3622": ")} </p> {/* 업데이트 날짜 */} <div className=",
      "interests문화역사ag3623": "({ interests: ['문화', '역사'], ageGroup: '30대', knowledgeLevel: '중급', companions: 'solo', tourDuration: 90, preferredStyle: '친근함', language: 'ko' }); const testLocations = [ '경복궁', '에펠탑', '타지마할', '콜로세움', '자유의 여신상', '마추픽추', '판교 아브뉴프랑', '강남역', '부산 해운대' ]; const handleGenerateGuide = async () => { if (!location.trim()) { setError('위치를 입력해주세요.'); return; } setLoading(true); setError(null); setResult(null); try { console.log('🚀 사실 검증된 가이드 생성 요청:', location); const response = await fetch('/api/ai/generate-guide-with-gemini', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ location: location.trim(), userProfile }), }); const data = await response.json(); if (!response.ok) { throw new Error(data.error || `HTTP ${response.status}`); } if (data.success) { setResult(data); console.log('✅ 가이드 생성 성공:', data); } else { throw new Error(data.error || '가이드 생성에 실패했습니다.'); } } catch (err) { const errorMessage = err instanceof Error ? err.message : '알 수 없는 오류가 발생했습니다.'; setError(errorMessage); console.error('❌ 가이드 생성 실패:', err); } finally { setLoading(false); } }; return (",
      "헤더3624": "{/* 헤더 */}",
      "사실검증된가이드생성테스트3625": "🔍 사실 검증된 가이드 생성 테스트",
      "다중데이터소스unescowikidatago3626": "다중 데이터 소스(UNESCO, Wikidata, Government, Google Places)를 통합하여 사실 기반으로 검증된 고품질 여행 가이드를 생성합니다.",
      "입력섹션3627": "{/* 입력 섹션 */}",
      "위치입력3628": "📍 위치 입력",
      "여행지이름3629": "여행지 이름",
      "setlocationetargetvaluep3630": "setLocation(e.target.value)} placeholder=\"예: 경복궁, 에펠탑, 타지마할...\" className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\" disabled={loading} />",
      "빠른테스트용위치들3631": "빠른 테스트용 위치들:",
      "사실검증된가이드생성중3632": "사실 검증된 가이드 생성 중...",
      "사실검증된가이드생성하기3633": ") : ( '🚀 사실 검증된 가이드 생성하기' )}",
      "오류발생3635": "오류 발생",
      "결과표시result3636": ")} {/* 결과 표시 */} {result && (",
      "사실검증상태3637": "{/* 사실 검증 상태 */}",
      "사실검증결과3638": "🔍 사실 검증 결과",
      "검증상태3639": "검증 상태",
      "resultfactverificationisfac3640": "{result.factVerification.isFactVerified ? '✅ 검증됨' : '⚠️ 부분 검증'}",
      "신뢰도점수3641": "신뢰도 점수",
      "데이터소스3642": "데이터 소스",
      "resultfactverificationdatas3643": "{result.factVerification.dataSourceCount}개",
      "데이터품질3644": "데이터 품질",
      "사용된데이터소스3645": "{/* 사용된 데이터 소스 */}",
      "사용된데이터소스3646": "📊 사용된 데이터 소스",
      "검증방법3647": "{/* 검증 방법 */}",
      "검증방법3648": "🔬 검증 방법",
      "resultfactverificationverif3649": "{result.factVerification.verificationMethod === 'multi_source_cross_reference' ? '다중 소스 교차 검증' : result.factVerification.verificationMethod}",
      "에러가있는경우표시resultd3650": "{/* 에러가 있는 경우 표시 */} {result.dataIntegration.errors && result.dataIntegration.errors.length > 0 && (",
      "데이터수집중발생한문제3651": "⚠️ 데이터 수집 중 발생한 문제",
      "생성된가이드3652": "{/* 생성된 가이드 */}",
      "생성된가이드3653": "📖 생성된 가이드",
      "개요3654": "{/* 개요 */}",
      "개요3655": "개요",
      "하이라이트resultdatahig3656": "{/* 하이라이트 */} {result.data.highlights && (",
      "주요특징3657": "주요 특징",
      "방문경로resultdata3658": ")} {/* 방문 경로 */} {result.data.visitRoute && (",
      "방문경로3659": "방문 경로",
      "총소요시간resultdatavisitrout3660": "총 소요시간: {result.data.visitRoute.totalDuration}분",
      "개인화메시지resultdat3661": ")} {/* 개인화 메시지 */} {result.data.personalizedNote && (",
      "개인화메시지3662": "💝 개인화 메시지",
      "기술적세부사항3663": "{/* 기술적 세부사항 */}",
      "기술적세부사항3664": "🔧 기술적 세부사항",
      "경복궁3665": "경복궁",
      "문화3666": "문화",
      "역사3667": "역사",
      "30대3668": "30대",
      "중급3669": "중급",
      "친근함3670": "친근함",
      "경복궁3671": "경복궁",
      "에펠탑3672": "에펠탑",
      "타지마할3673": "타지마할",
      "콜로세움3674": "콜로세움",
      "자유의여신상3675": "자유의 여신상",
      "마추픽추3676": "마추픽추",
      "판교아브뉴프랑3677": "판교 아브뉴프랑",
      "강남역3678": "강남역",
      "부산해운대3679": "부산 해운대",
      "위치를입력해주세요3680": "위치를 입력해주세요.",
      "사실검증된가이드생성요청3681": "🚀 사실 검증된 가이드 생성 요청:",
      "가이드생성성공3682": "✅ 가이드 생성 성공:",
      "가이드생성에실패했습니다3683": "가이드 생성에 실패했습니다.",
      "알수없는오류가발생했습니다3684": "알 수 없는 오류가 발생했습니다.",
      "가이드생성실패3685": "❌ 가이드 생성 실패:",
      "헤더divclassname3686": "{/* 헤더 */} <div className=",
      "사실검증된가이드생성테스트h1p3687": "🔍 사실 검증된 가이드 생성 테스트 </h1> <p className=",
      "다중데이터소스unescowikidatago3688": "다중 데이터 소스(UNESCO, Wikidata, Government, Google Places)를 통합하여 사실 기반으로 검증된 고품질 여행 가이드를 생성합니다. </p> </div> {/* 입력 섹션 */} <div className=",
      "위치입력h2divclassname3689": "📍 위치 입력</h2> <div className=",
      "여행지이름labelinputtype3690": "여행지 이름 </label> <input type=",
      "예경복궁에펠탑타지마할3691": "예: 경복궁, 에펠탑, 타지마할...",
      "빠른테스트용위치들pdivclassnam3692": "빠른 테스트용 위치들:</p> <div className=",
      "div사실검증된가이드생성중di3693": "</div> 사실 검증된 가이드 생성 중... </div> ) : (",
      "buttondiv에러표시3694": ")} </button> </div> {/* 에러 표시 */} {error && ( <div className=",
      "오류발생h3pclassname3695": "오류 발생</h3> <p className=",
      "errorpdivdivdi3696": "{error}</p> </div> </div> </div> )} {/* 결과 표시 */} {result && ( <div className=",
      "사실검증상태divclassnam3697": "{/* 사실 검증 상태 */} <div className=",
      "사실검증결과h2divclassnam3698": "🔍 사실 검증 결과</h2> <div className=",
      "검증상태h3pclassname3699": "검증 상태</h3> <p className=",
      "검증됨3700": "✅ 검증됨",
      "부분검증3701": "⚠️ 부분 검증",
      "신뢰도점수h3pclassname3702": "신뢰도 점수</h3> <p className=",
      "데이터소스h3pclassname3703": "데이터 소스</h3> <p className=",
      "resultfactverificationdatas3704": "{result.factVerification.dataSourceCount}개 </p> </div> <div className=",
      "데이터품질h3pclassname3705": "데이터 품질</h3> <p className=",
      "resultdataintegrationdataq3706": "{(result.dataIntegration.dataQuality * 100).toFixed(1)}% </p> </div> </div> {/* 사용된 데이터 소스 */} <div className=",
      "사용된데이터소스h3divclassn3707": "📊 사용된 데이터 소스</h3> <div className=",
      "sourcespandiv3708": "{source} </span> ))} </div> </div> {/* 검증 방법 */} <div> <h3 className=",
      "검증방법h3pclassname3709": "🔬 검증 방법</h3> <p className=",
      "다중소스교차검증3710": "다중 소스 교차 검증",
      "데이터수집중발생한문제h3ulcl3711": "⚠️ 데이터 수집 중 발생한 문제</h3> <ul className=",
      "resultdataintegrationerrors3712": "{result.dataIntegration.errors.map((error, index) => ( <li key={index}>• {error}</li> ))} </ul> </div> )} </div> {/* 생성된 가이드 */} <div className=",
      "생성된가이드h2resultdata3713": "📖 생성된 가이드</h2> {result.data && ( <div className=",
      "개요divh3classname3714": "{/* 개요 */} <div> <h3 className=",
      "개요h3pclassname3715": "개요</h3> <p className=",
      "resultdataoverviewpd3716": "{result.data.overview}</p> </div> {/* 하이라이트 */} {result.data.highlights && ( <div> <h3 className=",
      "주요특징h3ulclassname3717": "주요 특징</h3> <ul className=",
      "highlightliul3718": "• {highlight}</li> ))} </ul> </div> )} {/* 방문 경로 */} {result.data.visitRoute && ( <div> <h3 className=",
      "방문경로h3pclassname3719": "방문 경로</h3> <p className=",
      "총소요시간resultdatavisitrout3720": "총 소요시간: {result.data.visitRoute.totalDuration}분 </p> <p className=",
      "stepdurationstepdescri3721": "{step.duration} • {step.description}</p> </div> </div> ))} </div> )} </div> )} {/* 개인화 메시지 */} {result.data.personalizedNote && ( <div className=",
      "개인화메시지h3pclassname3722": "💝 개인화 메시지</h3> <p className=",
      "resultdatapersonalizednote3723": "{result.data.personalizedNote}</p> </div> )} </div> )} </div> {/* 기술적 세부사항 */} <div className=",
      "기술적세부사항h2preclassnam3724": "🔧 기술적 세부사항</h2> <pre className=",
      "30대3725": ": '30대",
      "중급3726": ": '중급",
      "친근함3727": ": '친근함",
      "알수없는오류가발생했습니다3728": ": '알 수 없는 오류가 발생했습니다.",
      "부분검증3729": ": '⚠️ 부분 검증",
      "간단한가이드테스트3730": "간단한 가이드 테스트",
      "테스트데이터3731": "테스트 데이터:",
      "상태3732": "상태:",
      "컴포넌트가정상적으로렌더링되었습니다3733": "컴포넌트가 정상적으로 렌더링되었습니다.",
      "오류3734": "오류:",
      "오류발생3735": "오류 발생!",
      "캐치된오류3736": "캐치된 오류:",
      "errasanymessage알수3737": "{(err as any)?.message || '알 수 없는 오류'}",
      "간단한테스트데이터constsampleg3738": "; // 간단한 테스트 데이터 const sampleGuideData = { content: { route: { steps: [ { step: 1, title:",
      "간단한가이드테스트h1divclassnam3748": "간단한 가이드 테스트</h1> <div className=",
      "strong테스트데이터strongpre3749": "<strong>테스트 데이터:</strong> <pre className=",
      "strong상태strong컴포넌트가정상적3750": "<strong>상태:</strong> 컴포넌트가 정상적으로 렌더링되었습니다. </div> {error && ( <div className=",
      "strong오류strongerror3751": "<strong>오류:</strong> {error} </div> )} </div> ); } catch (err) { return ( <div className=",
      "오류발생h1divclassname3752": "오류 발생!</h1> <div className=",
      "strong캐치된오류strongerr3753": "<strong>캐치된 오류:</strong> {(err as any)?.message ||",
      "가이드데이터로드테스트3764": "가이드 데이터 로드 테스트",
      "검색조건3765": "검색 조건:",
      "locationnamequotnormlocat3766": "locationname: &quot;{normLocation}&quot; (정규화됨)",
      "원본이름quotlocationnamequ3767": "원본 이름: &quot;{locationName}&quot;",
      "오류3768": "오류:",
      "가이드데이터발견3769": "가이드 데이터 발견!",
      "가이드데이터가없습니다3770": "가이드 데이터가 없습니다.",
      "db에서해당위치와언어에맞는가이드를찾을수없3771": "DB에서 해당 위치와 언어에 맞는 가이드를 찾을 수 없습니다.",
      "replacews가힣g3772": ") .replace(/[^\\w\\s가-힣]/g,",
      "특수문자제거한글유지export3773": "); // 특수문자 제거, 한글 유지 } export default async function TestGuidePage() { const locationName =",
      "constnormlocationnormali3774": "; const normLocation = normalizeString(locationName); let guideData = null; let error: any = null; try { console.log(`🔍 서버 사이드 가이드 조회: ${locationName} (${language})`); const { data, error: queryError } = await supabase .from(",
      "languagetolowercasemay3775": ", language.toLowerCase()) .maybeSingle(); if (!queryError && data && data.content) { guideData = data.content; console.log(`✅ 서버에서 ${language} 가이드 발견:`, locationName); } else { console.log(`📭 서버에서 ${language} 가이드 없음:`, locationName); error = queryError ||",
      "서버사이드가이드조회오류3776": "❌ 서버 사이드 가이드 조회 오류:",
      "가이드데이터로드테스트h1divclass3777": "가이드 데이터 로드 테스트</h1> <div className=",
      "strong검색조건strongul3778": "<strong>검색 조건:</strong> <ul> <li>locationname: &quot;{normLocation}&quot; (정규화됨)</li> <li>language: &quot;{language}&quot;</li> <li>원본 이름: &quot;{locationName}&quot;</li> </ul> </div> {error && ( <div className=",
      "strong오류strongerrorme3779": "<strong>오류:</strong> {error.message || JSON.stringify(error, null, 2)} </div> )} {guideData ? ( <div className=",
      "strong가이드데이터발견strong3780": "<strong>가이드 데이터 발견!</strong> <div className=",
      "서버사이드가이드조회locationna3781": "🔍 서버 사이드 가이드 조회: ${locationName} (${language})",
      "서버에서language가이드발견3782": "✅ 서버에서 ${language} 가이드 발견:",
      "서버에서language가이드없음3783": "📭 서버에서 ${language} 가이드 없음:",
      "ssrfalsesimpletes3784": ", ssr: false }); // Simple test data similar to what MultiLangGuideClient receives const testGuideData = { content: { overview: { title: \"경복궁\", location: \"서울 종로구\", keyFeatures: \"조선 법궁 건축\", background: \"조선 왕조의 정궁\" }, route: { steps: [ { step: 1, title: \"광화문\", location: \"광화문\" }, { step: 2, title: \"근정전\", location: \"근정전\" } ] }, realTimeGuide: { chapters: [ { id: 0, title: \"광화문 테스트\", narrative: \"테스트 내용입니다.\", coordinates: { lat: 37.5758, lng: 126.9766 } } ] }, metadata: { originalLocationName: \"경복궁\", generatedAt: new Date().toISOString(), version: \"1.0\", language: \"ko\" } } }; export default function TestMultiLangPage() { const [testStep, setTestStep] = useState(1); const [error, setError] = useState",
      "supabase연결테스트3807": "Supabase 연결 테스트",
      "연결상태3808": "연결 상태:",
      "오류3809": "오류:",
      "guides테이블샘플데이터3810": "guides 테이블 샘플 데이터:",
      "환경변수확인3811": "환경변수 확인",
      "processenvnextpublicsupab3812": "{process.env.NEXT_PUBLIC_SUPABASE_URL ? '설정됨' : '설정 안됨'}",
      "processenvnextpublicsupab3813": "{process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '설정됨' : '설정 안됨'}",
      "연결실패3814": "❌ 연결 실패",
      "연결성공3815": "✅ 연결 성공",
      "supabase연결테스트h1divclas3816": "Supabase 연결 테스트</h1> <div className=",
      "strong연결상태strongconne3817": "<strong>연결 상태:</strong> {connectionStatus} </div> {error && ( <div className=",
      "strong오류strongerrorme3818": "<strong>오류:</strong> {error.message || JSON.stringify(error)} </div> )} {tableData && ( <div className=",
      "strongguides테이블샘플데이터st3819": "<strong>guides 테이블 샘플 데이터:</strong> <pre className=",
      "환경변수확인h2pstrongsupaba3820": "환경변수 확인</h2> <p><strong>SUPABASE_URL:</strong> {process.env.NEXT_PUBLIC_SUPABASE_URL ?",
      "설정안됨3821": "설정 안됨",
      "설정됨3822": "설정됨",
      "설정안됨3823": "설정 안됨",
      "설정안됨3824": ": '설정 안됨",
      "설정안됨3825": ": '설정 안됨",
      "ai투어라디오로3826": "AI 투어라디오로",
      "특별한여행방송3827": "특별한 여행 방송",
      "ai가당신이있는곳의이야기를실시간으로들려주는3828": "AI가 당신이 있는 곳의 이야기를 실시간으로 들려주는 개인 전용 투어라디오 방송을 경험하세요",
      "무료로시작하기3829": "무료로 시작하기",
      "서비스소개3830": "서비스 소개",
      "기존여행에서3831": "기존 여행에서",
      "아쉬웠던점들3832": "아쉬웠던 점들",
      "조용한여행3833": "조용한 여행",
      "혼자여행할때너무조용하고심심해서그곳의이야기3834": "혼자 여행할 때 너무 조용하고 심심해서 그 곳의 이야기를 알 수 없었어요",
      "딱딱한설명3835": "딱딱한 설명",
      "가이드북이나안내판의딱딱한설명보다는재미있는이야기3836": "가이드북이나 안내판의 딱딱한 설명보다는 재미있는 이야기로 듣고 싶었어요",
      "비싼가이드3837": "비싼 가이드",
      "현지가이드나투어프로그램은비싸고다른사람들과3838": "현지 가이드나 투어 프로그램은 비싸고, 다른 사람들과 맞춰야 해서 불편해요",
      "tripradioai만의3839": "TripRadio.AI만의",
      "특별한경험3840": "특별한 경험",
      "실시간방송형태3841": "실시간 방송 형태",
      "딱딱한해설이아닌마치현지dj가들려주는것같3842": "딱딱한 해설이 아닌, 마치 현지 DJ가 들려주는 것 같은 자연스러운 방송 형태로 여행 이야기를 전달합니다",
      "재미있는스토리텔링3843": "재미있는 스토리텔링",
      "역사적사실을지루하게나열하는것이아니라흥미진진3844": "역사적 사실을 지루하게 나열하는 것이 아니라, 흥미진진한 이야기로 포장해서 들려드립니다",
      "위치기반자동재생3845": "위치 기반 자동 재생",
      "gps를통해당신이어디에있는지자동으로인식하고3846": "GPS를 통해 당신이 어디에 있는지 자동으로 인식하고, 그 장소에 맞는 투어라디오를 자동 시작합니다",
      "배경음악과효과음3847": "배경음악과 효과음",
      "적절한배경음악과효과음으로마치진짜라디오방송을3848": "적절한 배경음악과 효과음으로 마치 진짜 라디오 방송을 듣는 것 같은 몰입감을 제공합니다",
      "대화형진행3849": "대화형 진행",
      "혹시이런생각해본적있나요같은대화형진행으로3850": "혹시 이런 생각해본 적 있나요?\" 같은 대화형 진행으로 마치 친구와 대화하는 것 같은 느낌을 줍니다",
      "전세계어디든3851": "전 세계 어디든",
      "한국의작은골목부터파리의에펠탑까지전세계어떤3852": "한국의 작은 골목부터 파리의 에펠탑까지, 전 세계 어떤 곳이든 그 장소만의 투어라디오를 즉시 생성합니다",
      "다양한투어라디오3853": "다양한 투어라디오",
      "경험의종류3854": "경험의 종류",
      "문화유적투어라디오3855": "문화유적 투어라디오",
      "경복궁불국사같은문화유적에서들을수있는역사3856": "경복궁, 불국사 같은 문화유적에서 들을 수 있는 역사 이야기 라디오",
      "자연명소투어라디오3857": "자연 명소 투어라디오",
      "제주도설악산같은자연명소에서들을수있는자연3858": "제주도, 설악산 같은 자연 명소에서 들을 수 있는 자연과 생태 이야기 라디오",
      "도시탐방투어라디오3859": "도시 탐방 투어라디오",
      "홍대명동같은도시곳곳에서들을수있는동네이3860": "홍대, 명동 같은 도시 곳곳에서 들을 수 있는 동네 이야기와 문화 라디오",
      "맛집투어라디오3861": "맛집 투어라디오",
      "유명맛집주변에서들을수있는음식문화와역사이3862": "유명 맛집 주변에서 들을 수 있는 음식 문화와 역사 이야기 라디오",
      "예술투어라디오3863": "예술 투어라디오",
      "미술관갤러리에서들을수있는예술작품과작가이3864": "미술관, 갤러리에서 들을 수 있는 예술 작품과 작가 이야기 라디오",
      "계절특집투어라디오3865": "계절 특집 투어라디오",
      "벚꽃단풍같은계절별명소에서들을수있는계절3866": "벚꽃, 단풍 같은 계절별 명소에서 들을 수 있는 계절 이야기 라디오",
      "투어라디오3867": "투어라디오",
      "이용방법3868": "이용 방법",
      "앱실행3869": "앱 실행",
      "여행지에도착하면tripradioai앱을실행하세3870": "여행지에 도착하면 TripRadio.AI 앱을 실행하세요",
      "위치감지3871": "위치 감지",
      "gps가자동으로현재위치를감지하고해당장소를인3872": "GPS가 자동으로 현재 위치를 감지하고 해당 장소를 인식합니다",
      "라디오시작3873": "라디오 시작",
      "ai가그장소만의특별한투어라디오를실시간으로생성3874": "AI가 그 장소만의 특별한 투어라디오를 실시간으로 생성합니다",
      "감상3875": "감상",
      "이어폰을끼고편안하게투어라디오를들으며여행을즐기3876": "이어폰을 끼고 편안하게 투어라디오를 들으며 여행을 즐기세요",
      "당신만의특별한투어라디오를지금시작하세요3877": "당신만의 특별한 투어라디오를 지금 시작하세요",
      "더이상심심한여행은그만재미있는이야기가가득한3878": "더 이상 심심한 여행은 그만! 재미있는 이야기가 가득한 여행을 경험하세요",
      "무료로시작하기3879": "무료로 시작하기",
      "투어라디오앱ai가만드는실시간여행해설방송3880": "투어라디오 앱 | AI가 만드는 실시간 여행 해설 방송 TripRadio.AI",
      "여행지에서들을수있는특별한투어라디오ai3881": "📻 여행지에서 들을 수 있는 특별한 투어라디오! AI가 실시간으로 만들어주는 개인 맞춤형 여행 해설 방송을 무료로 경험하세요",
      "투어라디오3882": "투어라디오",
      "여행라디오3883": "여행라디오",
      "투어방송3884": "투어방송",
      "여행방송3885": "여행방송",
      "관광라디오3886": "관광라디오",
      "여행해설3887": "여행해설",
      "투어해설3888": "투어해설",
      "여행가이드라디오3889": "여행가이드라디오",
      "관광방송3890": "관광방송",
      "여행오디오3891": "여행오디오",
      "트립라디오ai3892": "트립라디오AI",
      "투어라디오3893": "투어라디오",
      "ai투어라디오로spanclassname3902": "AI 투어라디오로 <span className=",
      "특별한여행방송spanh1pclas3903": "특별한 여행 방송</span> </h1> <p className=",
      "ai가당신이있는곳의이야기를실시간으로들려주는3904": "AI가 당신이 있는 곳의 이야기를 실시간으로 들려주는 개인 전용 투어라디오 방송을 경험하세요 </p> </div> <div className=",
      "무료로시작하기linklinkhref3905": "무료로 시작하기 </Link> <Link href=",
      "서비스소개linkdivdiv3906": "서비스 소개 </Link> </div> </div> </section> {/* Problem Section */} <section className=",
      "기존여행에서spanclassname3907": "기존 여행에서 <span className=",
      "아쉬웠던점들spanh2divclas3908": "아쉬웠던 점들</span> </h2> <div className=",
      "조용한여행h3pclassname3909": "조용한 여행</h3> <p className=",
      "혼자여행할때너무조용하고심심해서그곳의이야기3910": "혼자 여행할 때 너무 조용하고 심심해서 그 곳의 이야기를 알 수 없었어요 </p> </div> <div className=",
      "딱딱한설명h3pclassname3911": "딱딱한 설명</h3> <p className=",
      "가이드북이나안내판의딱딱한설명보다는재미있는이야기3912": "가이드북이나 안내판의 딱딱한 설명보다는 재미있는 이야기로 듣고 싶었어요 </p> </div> <div className=",
      "비싼가이드h3pclassname3913": "비싼 가이드</h3> <p className=",
      "현지가이드나투어프로그램은비싸고다른사람들과3914": "현지 가이드나 투어 프로그램은 비싸고, 다른 사람들과 맞춰야 해서 불편해요 </p> </div> </div> </div> </section> {/* Features Section */} <section id=",
      "tripradioai만의spanclassname3915": "TripRadio.AI만의 <span className=",
      "특별한경험spanh2divclass3916": "특별한 경험</span> </h2> <div className=",
      "실시간방송형태h3pclassname3917": "실시간 방송 형태</h3> <p className=",
      "딱딱한해설이아닌마치현지dj가들려주는것같3918": "딱딱한 해설이 아닌, 마치 현지 DJ가 들려주는 것 같은 자연스러운 방송 형태로 여행 이야기를 전달합니다 </p> </div> <div className=",
      "재미있는스토리텔링h3pclassname3919": "재미있는 스토리텔링</h3> <p className=",
      "역사적사실을지루하게나열하는것이아니라흥미진진3920": "역사적 사실을 지루하게 나열하는 것이 아니라, 흥미진진한 이야기로 포장해서 들려드립니다 </p> </div> <div className=",
      "위치기반자동재생h3pclassname3921": "위치 기반 자동 재생</h3> <p className=",
      "gps를통해당신이어디에있는지자동으로인식하고3922": "GPS를 통해 당신이 어디에 있는지 자동으로 인식하고, 그 장소에 맞는 투어라디오를 자동 시작합니다 </p> </div> <div className=",
      "배경음악과효과음h3pclassname3923": "배경음악과 효과음</h3> <p className=",
      "적절한배경음악과효과음으로마치진짜라디오방송을3924": "적절한 배경음악과 효과음으로 마치 진짜 라디오 방송을 듣는 것 같은 몰입감을 제공합니다 </p> </div> <div className=",
      "대화형진행h3pclassname3925": "대화형 진행</h3> <p className=",
      "혹시이런생각해본적있나요3926": "혹시 이런 생각해본 적 있나요?",
      "전세계어디든h3pclassname3927": "전 세계 어디든</h3> <p className=",
      "한국의작은골목부터파리의에펠탑까지전세계어떤3928": "한국의 작은 골목부터 파리의 에펠탑까지, 전 세계 어떤 곳이든 그 장소만의 투어라디오를 즉시 생성합니다 </p> </div> </div> </div> </section> {/* Experience Types Section */} <section className=",
      "다양한투어라디오spanclassname3929": "다양한 투어라디오 <span className=",
      "경험의종류spanh2divclass3930": "경험의 종류</span> </h2> <div className=",
      "문화유적투어라디오h3pclassname3931": "문화유적 투어라디오</h3> <p className=",
      "경복궁불국사같은문화유적에서들을수있는역사3932": "경복궁, 불국사 같은 문화유적에서 들을 수 있는 역사 이야기 라디오 </p> </div> </div> </div> <div className=",
      "자연명소투어라디오h3pclassname3933": "자연 명소 투어라디오</h3> <p className=",
      "제주도설악산같은자연명소에서들을수있는자연3934": "제주도, 설악산 같은 자연 명소에서 들을 수 있는 자연과 생태 이야기 라디오 </p> </div> </div> </div> <div className=",
      "도시탐방투어라디오h3pclassname3935": "도시 탐방 투어라디오</h3> <p className=",
      "홍대명동같은도시곳곳에서들을수있는동네이3936": "홍대, 명동 같은 도시 곳곳에서 들을 수 있는 동네 이야기와 문화 라디오 </p> </div> </div> </div> </div> <div className=",
      "맛집투어라디오h3pclassname3937": "맛집 투어라디오</h3> <p className=",
      "유명맛집주변에서들을수있는음식문화와역사이3938": "유명 맛집 주변에서 들을 수 있는 음식 문화와 역사 이야기 라디오 </p> </div> </div> </div> <div className=",
      "예술투어라디오h3pclassname3939": "예술 투어라디오</h3> <p className=",
      "미술관갤러리에서들을수있는예술작품과작가이3940": "미술관, 갤러리에서 들을 수 있는 예술 작품과 작가 이야기 라디오 </p> </div> </div> </div> <div className=",
      "계절특집투어라디오h3pclassname3941": "계절 특집 투어라디오</h3> <p className=",
      "벚꽃단풍같은계절별명소에서들을수있는계절3942": "벚꽃, 단풍 같은 계절별 명소에서 들을 수 있는 계절 이야기 라디오 </p> </div> </div> </div> </div> </div> </div> </section> {/* How to Use Section */} <section className=",
      "투어라디오spanclassname3943": "투어라디오 <span className=",
      "이용방법spanh2divclassn3944": "이용 방법</span> </h2> <div className=",
      "앱실행h3pclassname3945": "앱 실행</h3> <p className=",
      "여행지에도착하면tripradioai앱을실행하세3946": "여행지에 도착하면 TripRadio.AI 앱을 실행하세요 </p> </div> <div className=",
      "위치감지h3pclassname3947": "위치 감지</h3> <p className=",
      "gps가자동으로현재위치를감지하고해당장소를인3948": "GPS가 자동으로 현재 위치를 감지하고 해당 장소를 인식합니다 </p> </div> <div className=",
      "라디오시작h3pclassname3949": "라디오 시작</h3> <p className=",
      "ai가그장소만의특별한투어라디오를실시간으로생성3950": "AI가 그 장소만의 특별한 투어라디오를 실시간으로 생성합니다 </p> </div> <div className=",
      "감상h3pclassname3951": "감상</h3> <p className=",
      "이어폰을끼고편안하게투어라디오를들으며여행을즐기3952": "이어폰을 끼고 편안하게 투어라디오를 들으며 여행을 즐기세요 </p> </div> </div> </div> </section> {/* CTA Section */} <section className=",
      "당신만의특별한투어라디오를지금시작하세요h23953": "당신만의 특별한 투어라디오를 지금 시작하세요 </h2> <p className=",
      "더이상심심한여행은그만재미있는이야기가가득한3954": "더 이상 심심한 여행은 그만! 재미있는 이야기가 가득한 여행을 경험하세요 </p> <Link href=",
      "나만의여행라디오가3955": "나만의 여행라디오가",
      "시작됩니다3956": "시작됩니다",
      "ai가당신을위해특별히만드는개인맞춤형여행라디3957": "AI가 당신을 위해 특별히 만드는 개인 맞춤형 여행라디오로 특별한 여행 경험을 시작하세요",
      "무료로시작하기3958": "무료로 시작하기",
      "서비스소개3959": "서비스 소개",
      "왜여행라디오가3960": "왜 여행라디오가",
      "필요할까요3961": "필요할까요?",
      "조용한혼자여행3962": "조용한 혼자 여행",
      "혼자여행할때너무조용해서심심하고그장소의특3963": "혼자 여행할 때 너무 조용해서 심심하고, 그 장소의 특별한 이야기를 놓치고 있어요",
      "스마트폰만보는여행3964": "스마트폰만 보는 여행",
      "여행중에도계속스마트폰을보게되어진짜여행의재3965": "여행 중에도 계속 스마트폰을 보게 되어 진짜 여행의 재미를 놓치고 있어요",
      "비싼가이드투어3966": "비싼 가이드 투어",
      "가이드투어는비싸고다른사람들과일정을맞춰야해3967": "가이드 투어는 비싸고, 다른 사람들과 일정을 맞춰야 해서 자유롭지 못해요",
      "tripradioai여행라디오의3968": "TripRadio.AI 여행라디오의",
      "특별한경험3969": "특별한 경험",
      "실시간라디오제작3970": "실시간 라디오 제작",
      "미리녹음된콘텐츠가아닌ai가당신이있는곳에서3971": "미리 녹음된 콘텐츠가 아닌, AI가 당신이 있는 곳에서 실시간으로 제작하는 생생한 여행라디오",
      "개인맞춤형콘텐츠3972": "개인 맞춤형 콘텐츠",
      "당신의여행스타일관심사나이대에맞춰완전히다3973": "당신의 여행 스타일, 관심사, 나이대에 맞춰 완전히 다른 스타일의 여행라디오를 제공",
      "전세계어디든3974": "전 세계 어디든",
      "부산해운대부터파리샹젤리제까지전세계어떤곳이3975": "부산 해운대부터 파리 샹젤리제까지, 전 세계 어떤 곳이든 그 장소만의 여행라디오 즉시 제작",
      "진짜라디오느낌3976": "진짜 라디오 느낌",
      "딱딱한가이드가아닌친근한라디오dj가들려주는3977": "딱딱한 가이드가 아닌, 친근한 라디오 DJ가 들려주는 것 같은 자연스러운 진행 스타일",
      "완전무료3978": "완전 무료",
      "비싼오디오가이드대여비나투어비용없이언제든무3979": "비싼 오디오가이드 대여비나 투어 비용 없이, 언제든 무료로 나만의 여행라디오를 이용",
      "편안한청취3980": "편안한 청취",
      "이어폰만끼면되는간편함걸으면서쉬면서언제든3981": "이어폰만 끼면 되는 간편함! 걸으면서, 쉬면서, 언제든 편안하게 여행라디오 청취",
      "다양한여행라디오3982": "다양한 여행라디오",
      "채널의종류3983": "채널의 종류",
      "역사여행라디오3984": "역사 여행라디오",
      "고궁유적지에서들을수있는흥미진진한역사이야기3985": "고궁, 유적지에서 들을 수 있는 흥미진진한 역사 이야기와 숨겨진 비화",
      "자연여행라디오3986": "자연 여행라디오",
      "산바다공원에서들을수있는자연의아름다움과3987": "산, 바다, 공원에서 들을 수 있는 자연의 아름다움과 생태 이야기",
      "맛집여행라디오3988": "맛집 여행라디오",
      "맛집탐방과함께들을수있는음식문화와현지인들의3989": "맛집 탐방과 함께 들을 수 있는 음식 문화와 현지인들의 이야기",
      "문화여행라디오3990": "문화 여행라디오",
      "미술관박물관에서들을수있는예술작품과문화에3991": "미술관, 박물관에서 들을 수 있는 예술 작품과 문화에 대한 깊이 있는 해설",
      "도시여행라디오3992": "도시 여행라디오",
      "번화가골목길에서들을수있는도시의역동적인이야3993": "번화가, 골목길에서 들을 수 있는 도시의 역동적인 이야기와 트렌드",
      "야경여행라디오3994": "야경 여행라디오",
      "밤에들을수있는특별한야경명소와낭만적인여행3995": "밤에 들을 수 있는 특별한 야경 명소와 낭만적인 여행 이야기",
      "여행라디오3996": "여행라디오",
      "청취방법3997": "청취 방법",
      "여행지도착3998": "여행지 도착",
      "여행하고싶은곳에도착하면tripradioai를3999": "여행하고 싶은 곳에 도착하면 TripRadio.AI를 실행하세요",
      "취향설정4000": "취향 설정",
      "어떤스타일의여행라디오를들을지간단히선택하세요4001": "어떤 스타일의 여행라디오를 들을지 간단히 선택하세요",
      "라디오생성4002": "라디오 생성",
      "ai가당신만을위한특별한여행라디오를실시간으로제4003": "AI가 당신만을 위한 특별한 여행라디오를 실시간으로 제작합니다",
      "여행즐기기4004": "여행 즐기기",
      "이어폰을끼고여행라디오를들으며특별한여행을즐기세4005": "이어폰을 끼고 여행라디오를 들으며 특별한 여행을 즐기세요",
      "여행라디오와함께한4006": "여행라디오와 함께한",
      "특별한경험들4007": "특별한 경험들",
      "혼자제주도여행이심심했는데여행라디오덕분에마치4008": "혼자 제주도 여행이 심심했는데, 여행라디오 덕분에 마치 친구와 함께 여행하는 기분이었어요!",
      "20대직장인김님4009": "- 20대 직장인 김○○님",
      "경복궁에서들은역사이야기가너무재미있어서시간가4010": "경복궁에서 들은 역사 이야기가 너무 재미있어서 시간 가는 줄 몰랐어요. 무료인 게 믿기지 않아요!",
      "30대주부박님4011": "- 30대 주부 박○○님",
      "파리여행에서루브르박물관해설을한국어로들을수4012": "파리 여행에서 루브르 박물관 해설을 한국어로 들을 수 있어서 정말 좋았습니다!",
      "50대여행객이님4013": "- 50대 여행객 이○○님",
      "지금바로나만의여행라디오를시작하세요4014": "지금 바로 나만의 여행라디오를 시작하세요",
      "더이상심심한혼자여행은그만특별한여행라디오와4015": "더 이상 심심한 혼자 여행은 그만! 특별한 여행라디오와 함께 떠나세요",
      "무료로시작하기4016": "무료로 시작하기",
      "여행라디오앱여행중들을수있는특별한라디오4017": "여행라디오 앱 | 여행 중 들을 수 있는 특별한 라디오 TripRadio.AI",
      "지루한여행은이제그만ai가실시간으로만4018": "🎙️ 지루한 여행은 이제 그만! AI가 실시간으로 만들어주는 나만의 여행라디오로 특별한 여행 경험을 시작하세요. 완전 무료!",
      "여행라디오4019": "여행라디오",
      "트립라디오4020": "트립라디오",
      "여행방송4021": "여행방송",
      "여행팟캐스트4022": "여행팟캐스트",
      "여행음성4023": "여행음성",
      "여행오디오4024": "여행오디오",
      "여행해설4025": "여행해설",
      "여행가이드4026": "여행가이드",
      "여행스토리4027": "여행스토리",
      "여행이야기4028": "여행이야기",
      "트립라디오ai4029": "트립라디오AI",
      "여행라디오4030": "여행라디오",
      "나만의여행라디오가spanclassname4039": "나만의 여행라디오가 <span className=",
      "시작됩니다spanh1pclassnam4040": "시작됩니다</span> </h1> <p className=",
      "ai가당신을위해특별히만드는개인맞춤형여행라디4041": "AI가 당신을 위해 특별히 만드는 개인 맞춤형 여행라디오로 특별한 여행 경험을 시작하세요 </p> </div> <div className=",
      "무료로시작하기linklinkhref4042": "무료로 시작하기 </Link> <Link href=",
      "서비스소개linkdivdiv4043": "서비스 소개 </Link> </div> </div> </section> {/* Why Travel Radio Section */} <section id=",
      "왜여행라디오가spanclassname4044": "왜 여행라디오가 <span className=",
      "필요할까요spanh2divclass4045": "필요할까요?</span> </h2> <div className=",
      "조용한혼자여행h3pclassname4046": "조용한 혼자 여행</h3> <p className=",
      "혼자여행할때너무조용해서심심하고그장소의특4047": "혼자 여행할 때 너무 조용해서 심심하고, 그 장소의 특별한 이야기를 놓치고 있어요 </p> </div> <div className=",
      "스마트폰만보는여행h3pclassname4048": "스마트폰만 보는 여행</h3> <p className=",
      "여행중에도계속스마트폰을보게되어진짜여행의재4049": "여행 중에도 계속 스마트폰을 보게 되어 진짜 여행의 재미를 놓치고 있어요 </p> </div> <div className=",
      "비싼가이드투어h3pclassname4050": "비싼 가이드 투어</h3> <p className=",
      "가이드투어는비싸고다른사람들과일정을맞춰야해4051": "가이드 투어는 비싸고, 다른 사람들과 일정을 맞춰야 해서 자유롭지 못해요 </p> </div> </div> </div> </section> {/* Features Section */} <section className=",
      "tripradioai여행라디오의spanclas4052": "TripRadio.AI 여행라디오의 <span className=",
      "특별한경험spanh2divclass4053": "특별한 경험</span> </h2> <div className=",
      "실시간라디오제작h3pclassname4054": "실시간 라디오 제작</h3> <p className=",
      "미리녹음된콘텐츠가아닌ai가당신이있는곳에서4055": "미리 녹음된 콘텐츠가 아닌, AI가 당신이 있는 곳에서 실시간으로 제작하는 생생한 여행라디오 </p> </div> <div className=",
      "개인맞춤형콘텐츠h3pclassname4056": "개인 맞춤형 콘텐츠</h3> <p className=",
      "당신의여행스타일관심사나이대에맞춰완전히다4057": "당신의 여행 스타일, 관심사, 나이대에 맞춰 완전히 다른 스타일의 여행라디오를 제공 </p> </div> <div className=",
      "전세계어디든h3pclassname4058": "전 세계 어디든</h3> <p className=",
      "부산해운대부터파리샹젤리제까지전세계어떤곳이4059": "부산 해운대부터 파리 샹젤리제까지, 전 세계 어떤 곳이든 그 장소만의 여행라디오 즉시 제작 </p> </div> <div className=",
      "진짜라디오느낌h3pclassname4060": "진짜 라디오 느낌</h3> <p className=",
      "딱딱한가이드가아닌친근한라디오dj가들려주는4061": "딱딱한 가이드가 아닌, 친근한 라디오 DJ가 들려주는 것 같은 자연스러운 진행 스타일 </p> </div> <div className=",
      "완전무료h3pclassname4062": "완전 무료</h3> <p className=",
      "비싼오디오가이드대여비나투어비용없이언제든무4063": "비싼 오디오가이드 대여비나 투어 비용 없이, 언제든 무료로 나만의 여행라디오를 이용 </p> </div> <div className=",
      "편안한청취h3pclassname4064": "편안한 청취</h3> <p className=",
      "이어폰만끼면되는간편함걸으면서쉬면서언제든4065": "이어폰만 끼면 되는 간편함! 걸으면서, 쉬면서, 언제든 편안하게 여행라디오 청취 </p> </div> </div> </div> </section> {/* Radio Types Section */} <section className=",
      "다양한여행라디오spanclassname4066": "다양한 여행라디오 <span className=",
      "채널의종류spanh2divclass4067": "채널의 종류</span> </h2> <div className=",
      "역사여행라디오h3pclassname4068": "역사 여행라디오</h3> <p className=",
      "고궁유적지에서들을수있는흥미진진한역사이야기4069": "고궁, 유적지에서 들을 수 있는 흥미진진한 역사 이야기와 숨겨진 비화 </p> </div> </div> </div> <div className=",
      "자연여행라디오h3pclassname4070": "자연 여행라디오</h3> <p className=",
      "산바다공원에서들을수있는자연의아름다움과4071": "산, 바다, 공원에서 들을 수 있는 자연의 아름다움과 생태 이야기 </p> </div> </div> </div> <div className=",
      "맛집여행라디오h3pclassname4072": "맛집 여행라디오</h3> <p className=",
      "맛집탐방과함께들을수있는음식문화와현지인들의4073": "맛집 탐방과 함께 들을 수 있는 음식 문화와 현지인들의 이야기 </p> </div> </div> </div> </div> <div className=",
      "문화여행라디오h3pclassname4074": "문화 여행라디오</h3> <p className=",
      "미술관박물관에서들을수있는예술작품과문화에4075": "미술관, 박물관에서 들을 수 있는 예술 작품과 문화에 대한 깊이 있는 해설 </p> </div> </div> </div> <div className=",
      "도시여행라디오h3pclassname4076": "도시 여행라디오</h3> <p className=",
      "번화가골목길에서들을수있는도시의역동적인이야4077": "번화가, 골목길에서 들을 수 있는 도시의 역동적인 이야기와 트렌드 </p> </div> </div> </div> <div className=",
      "야경여행라디오h3pclassname4078": "야경 여행라디오</h3> <p className=",
      "밤에들을수있는특별한야경명소와낭만적인여행4079": "밤에 들을 수 있는 특별한 야경 명소와 낭만적인 여행 이야기 </p> </div> </div> </div> </div> </div> </div> </section> {/* How to Listen Section */} <section className=",
      "여행라디오spanclassname4080": "여행라디오 <span className=",
      "청취방법spanh2divclassn4081": "청취 방법</span> </h2> <div className=",
      "여행지도착h3pclassname4082": "여행지 도착</h3> <p className=",
      "여행하고싶은곳에도착하면tripradioai를4083": "여행하고 싶은 곳에 도착하면 TripRadio.AI를 실행하세요 </p> </div> <div className=",
      "취향설정h3pclassname4084": "취향 설정</h3> <p className=",
      "어떤스타일의여행라디오를들을지간단히선택하세요4085": "어떤 스타일의 여행라디오를 들을지 간단히 선택하세요 </p> </div> <div className=",
      "라디오생성h3pclassname4086": "라디오 생성</h3> <p className=",
      "ai가당신만을위한특별한여행라디오를실시간으로제4087": "AI가 당신만을 위한 특별한 여행라디오를 실시간으로 제작합니다 </p> </div> <div className=",
      "여행즐기기h3pclassname4088": "여행 즐기기</h3> <p className=",
      "이어폰을끼고여행라디오를들으며특별한여행을즐기세4089": "이어폰을 끼고 여행라디오를 들으며 특별한 여행을 즐기세요 </p> </div> </div> </div> </section> {/* Testimonial Section */} <section className=",
      "여행라디오와함께한spanclassname4090": "여행라디오와 함께한 <span className=",
      "특별한경험들spanh2divclas4091": "특별한 경험들</span> </h2> <div className=",
      "혼자제주도여행이심심했는데여행라디오덕분에마치4092": "혼자 제주도 여행이 심심했는데, 여행라디오 덕분에 마치 친구와 함께 여행하는 기분이었어요!",
      "20대직장인김님pdivdiv4093": "- 20대 직장인 김○○님</p> </div> <div className=",
      "경복궁에서들은역사이야기가너무재미있어서시간가4094": "경복궁에서 들은 역사 이야기가 너무 재미있어서 시간 가는 줄 몰랐어요. 무료인 게 믿기지 않아요!",
      "30대주부박님pdivdiv4095": "- 30대 주부 박○○님</p> </div> <div className=",
      "파리여행에서루브르박물관해설을한국어로들을수4096": "파리 여행에서 루브르 박물관 해설을 한국어로 들을 수 있어서 정말 좋았습니다!",
      "50대여행객이님pdivdi4097": "- 50대 여행객 이○○님</p> </div> </div> </div> </section> {/* CTA Section */} <section className=",
      "지금바로나만의여행라디오를시작하세요h24098": "지금 바로 나만의 여행라디오를 시작하세요 </h2> <p className=",
      "더이상심심한혼자여행은그만특별한여행라디오와4099": "더 이상 심심한 혼자 여행은 그만! 특별한 여행라디오와 함께 떠나세요 </p> <Link href=",
      "어디로가야할지모르겠어요4100": "어디로 가야 할지 모르겠어요",
      "수많은여행지정보에압도되어서정작어디로가야할지4101": "수많은 여행지 정보에 압도되어서 정작 어디로 가야 할지 결정을 못 내리겠어요",
      "정보가너무많고복잡해요4102": "정보가 너무 많고 복잡해요",
      "인터넷에정보는많은데어떤게맞는지내게적합한지4103": "인터넷에 정보는 많은데 어떤 게 맞는지, 내게 적합한지 판단하기 어려워요",
      "가이드비용이부담돼요4104": "가이드 비용이 부담돼요",
      "현지가이드나투어프로그램비용이비싸서자유여행을4105": "현지 가이드나 투어 프로그램 비용이 비싸서 자유여행을 하면 아쉬워요",
      "tripradioai만의4106": "TripRadio.AI만의",
      "스마트여행솔루션4107": "스마트 여행 솔루션",
      "전세계모든여행지4108": "전세계 모든 여행지",
      "파리루브르부터제주도해녀문화까지전세계어떤곳이4109": "파리 루브르부터 제주도 해녀문화까지, 전세계 어떤 곳이든 AI가 즉시 맞춤형 가이드 생성",
      "ai실시간생성4110": "AI 실시간 생성",
      "미리준비된딱딱한정보가아닌당신의관심사와상황4111": "미리 준비된 딱딱한 정보가 아닌, 당신의 관심사와 상황에 맞춰 AI가 실시간으로 생성",
      "개인맞춤추천4112": "개인 맞춤 추천",
      "나이취향동행인예산등을고려해당신만을위한4113": "나이, 취향, 동행인, 예산 등을 고려해 당신만을 위한 완벽한 여행 코스 추천",
      "숨겨진명소발굴4114": "숨겨진 명소 발굴",
      "관광책자에없는현지인만아는숨겨진명소와특별한이4115": "관광책자에 없는 현지인만 아는 숨겨진 명소와 특별한 이야기까지 발견",
      "현지문화체험4116": "현지 문화 체험",
      "단순한관광을넘어서그나라의역사문화생활을4117": "단순한 관광을 넘어서 그 나라의 역사, 문화, 생활을 깊이 있게 이해하는 여행",
      "완전무료4118": "완전 무료",
      "비싼가이드투어나여행앱구독료없이언제든무료로4119": "비싼 가이드 투어나 여행앱 구독료 없이, 언제든 무료로 전문가급 여행 가이드 이용",
      "인기여행지에서4120": "인기 여행지에서",
      "특별한경험4121": "특별한 경험",
      "일본4122": "일본",
      "교토오사카도쿄의숨겨진이야기4123": "교토, 오사카, 도쿄의 숨겨진 이야기",
      "프랑스4124": "프랑스",
      "파리니스리옹의예술과문화4125": "파리, 니스, 리옹의 예술과 문화",
      "제주도4126": "제주도",
      "자연의아름다움과제주고유문화4127": "자연의 아름다움과 제주 고유문화",
      "이탈리아4128": "이탈리아",
      "로마피렌체베네치아의역사4129": "로마, 피렌체, 베네치아의 역사",
      "더많은여행지보기4130": "더 많은 여행지 보기",
      "3단계4131": "3단계",
      "로쉽게시작4132": "로 쉽게 시작",
      "여행지입력4133": "여행지 입력",
      "가고싶은여행지나현재위치를입력하면ai가자동으4134": "가고 싶은 여행지나 현재 위치를 입력하면 AI가 자동으로 인식합니다",
      "취향설정4135": "취향 설정",
      "관심분야동행인예산등간단한정보를입력해맞4136": "관심 분야, 동행인, 예산 등 간단한 정보를 입력해 맞춤 설정을 완료합니다",
      "가이드시작4137": "가이드 시작",
      "ai가생성한맞춤형여행가이드를들으며특별한여행4138": "AI가 생성한 맞춤형 여행 가이드를 들으며 특별한 여행을 시작하세요",
      "지금바로스마트한여행을시작하세요4139": "지금 바로 스마트한 여행을 시작하세요",
      "전세계어디든당신만의ai여행가이드가함께합니다4140": "전세계 어디든 당신만의 AI 여행 가이드가 함께합니다",
      "무료로시작하기4141": "무료로 시작하기",
      "여행가이드추천1위전세계어디든ai여행가4142": "여행 가이드 추천 1위 | 전세계 어디든 AI 여행 가이드 TripRadio.AI",
      "전세계모든여행지의숨겨진이야기를ai가실시4143": "🌍 전세계 모든 여행지의 숨겨진 이야기를 AI가 실시간으로 들려드립니다. 나만의 맞춤형 여행 경험을 무료로 시작하세요!",
      "여행4144": "여행",
      "여행가이드4145": "여행가이드",
      "여행정보4146": "여행정보",
      "관광4147": "관광",
      "관광지4148": "관광지",
      "여행앱4149": "여행앱",
      "맞춤여행4150": "맞춤여행",
      "스마트여행4151": "스마트여행",
      "ai여행가이드4152": "AI여행가이드",
      "무료여행가이드4153": "무료여행가이드",
      "실시간가이드4154": "실시간가이드",
      "전세계여행4155": "전세계여행",
      "트립라디오ai4156": "트립라디오AI",
      "여행4157": "여행",
      "어디로가야할지모르겠어요h3pclassn4166": "어디로 가야 할지 모르겠어요</h3> <p className=",
      "수많은여행지정보에압도되어서정작어디로가야할지4167": "수많은 여행지 정보에 압도되어서 정작 어디로 가야 할지 결정을 못 내리겠어요 </p> </div> <div className=",
      "정보가너무많고복잡해요h3pclassna4168": "정보가 너무 많고 복잡해요</h3> <p className=",
      "인터넷에정보는많은데어떤게맞는지내게적합한지4169": "인터넷에 정보는 많은데 어떤 게 맞는지, 내게 적합한지 판단하기 어려워요 </p> </div> <div className=",
      "가이드비용이부담돼요h3pclassname4170": "가이드 비용이 부담돼요</h3> <p className=",
      "현지가이드나투어프로그램비용이비싸서자유여행을4171": "현지 가이드나 투어 프로그램 비용이 비싸서 자유여행을 하면 아쉬워요 </p> </div> </div> </div> </section> {/* Solution Features */} <section className=",
      "tripradioai만의spanclassname4172": "TripRadio.AI만의 <span className=",
      "스마트여행솔루션spanh2divc4173": "스마트 여행 솔루션</span> </h2> <div className=",
      "전세계모든여행지h3pclassname4174": "전세계 모든 여행지</h3> <p className=",
      "파리루브르부터제주도해녀문화까지전세계어떤곳이4175": "파리 루브르부터 제주도 해녀문화까지, 전세계 어떤 곳이든 AI가 즉시 맞춤형 가이드 생성 </p> </div> <div className=",
      "ai실시간생성h3pclassname4176": "AI 실시간 생성</h3> <p className=",
      "미리준비된딱딱한정보가아닌당신의관심사와상황4177": "미리 준비된 딱딱한 정보가 아닌, 당신의 관심사와 상황에 맞춰 AI가 실시간으로 생성 </p> </div> <div className=",
      "개인맞춤추천h3pclassname4178": "개인 맞춤 추천</h3> <p className=",
      "나이취향동행인예산등을고려해당신만을위한4179": "나이, 취향, 동행인, 예산 등을 고려해 당신만을 위한 완벽한 여행 코스 추천 </p> </div> <div className=",
      "숨겨진명소발굴h3pclassname4180": "숨겨진 명소 발굴</h3> <p className=",
      "관광책자에없는현지인만아는숨겨진명소와특별한이4181": "관광책자에 없는 현지인만 아는 숨겨진 명소와 특별한 이야기까지 발견 </p> </div> <div className=",
      "현지문화체험h3pclassname4182": "현지 문화 체험</h3> <p className=",
      "단순한관광을넘어서그나라의역사문화생활을4183": "단순한 관광을 넘어서 그 나라의 역사, 문화, 생활을 깊이 있게 이해하는 여행 </p> </div> <div className=",
      "완전무료h3pclassname4184": "완전 무료</h3> <p className=",
      "비싼가이드투어나여행앱구독료없이언제든무료로4185": "비싼 가이드 투어나 여행앱 구독료 없이, 언제든 무료로 전문가급 여행 가이드 이용 </p> </div> </div> </div> </section> {/* Popular Destinations */} <section id=",
      "인기여행지에서spanclassname4186": "인기 여행지에서 <span className=",
      "특별한경험spanh2divclass4187": "특별한 경험</span> </h2> <div className=",
      "일본h3pclassname4188": "일본</h3> <p className=",
      "교토오사카도쿄의숨겨진이야기pdiv4189": "교토, 오사카, 도쿄의 숨겨진 이야기</p> </div> </div> <div className=",
      "프랑스h3pclassname4190": "프랑스</h3> <p className=",
      "파리니스리옹의예술과문화pdiv4191": "파리, 니스, 리옹의 예술과 문화</p> </div> </div> <div className=",
      "제주도h3pclassname4192": "제주도</h3> <p className=",
      "자연의아름다움과제주고유문화pdiv4193": "자연의 아름다움과 제주 고유문화</p> </div> </div> <div className=",
      "이탈리아h3pclassname4194": "이탈리아</h3> <p className=",
      "로마피렌체베네치아의역사pdiv4195": "로마, 피렌체, 베네치아의 역사</p> </div> </div> </div> <div className=",
      "더많은여행지보기svgclassname4196": "더 많은 여행지 보기 <svg className=",
      "3단계span로쉽게시작h2divc4197": "3단계</span>로 쉽게 시작 </h2> <div className=",
      "여행지입력h3pclassname4198": "여행지 입력</h3> <p className=",
      "가고싶은여행지나현재위치를입력하면ai가자동으4199": "가고 싶은 여행지나 현재 위치를 입력하면 AI가 자동으로 인식합니다 </p> </div> <div className=",
      "취향설정h3pclassname4200": "취향 설정</h3> <p className=",
      "관심분야동행인예산등간단한정보를입력해맞4201": "관심 분야, 동행인, 예산 등 간단한 정보를 입력해 맞춤 설정을 완료합니다 </p> </div> <div className=",
      "가이드시작h3pclassname4202": "가이드 시작</h3> <p className=",
      "ai가생성한맞춤형여행가이드를들으며특별한여행4203": "AI가 생성한 맞춤형 여행 가이드를 들으며 특별한 여행을 시작하세요 </p> </div> </div> </div> </section> {/* CTA Section */} <section className=",
      "지금바로스마트한여행을시작하세요h2p4204": "지금 바로 스마트한 여행을 시작하세요 </h2> <p className=",
      "전세계어디든당신만의ai여행가이드가함께합니다4205": "전세계 어디든 당신만의 AI 여행 가이드가 함께합니다 </p> <Link href=",
      "constdestpopulardestinat4206": "{ const dest = popularDestinations.find(d => d.name.includes(destination) || destination.includes(d.name)); if (!dest) return null; const templates = { solo: { morning: [\"현지 카페에서 여유로운 아침\", \"도보 탐험으로 골목길 발견\", \"현지 시장 구경\"], afternoon: [\"박물관이나 갤러리 방문\", \"현지 맛집에서 혼밥\", \"공원이나 해변에서 휴식\"], evening: [\"현지인들과 교류\", \"야경 명소에서 사진 촬영\", \"독서하며 여유로운 저녁\"], tips: [\"안전 정보 숙지\", \"현지 언어 몇 마디 배우기\", \"혼자만의 시간 즐기기\"] }, couple: { morning: [\"로맨틱한 브런치\", \"커플 포토존에서 사진 촬영\", \"함께 요리 클래스 참여\"], afternoon: [\"커플 스파 체험\", \"선셋 명소에서 함께\", \"로맨틱한 레스토랑\"], evening: [\"야경이 아름다운 곳에서 산책\", \"와인 바에서 대화\", \"호텔에서 로맨틱한 시간\"], tips: [\"커플 할인 정보 확인\", \"기념품 함께 고르기\", \"추억을 남길 액티비티\"] }, family: { morning: [\"아이들과 함께 할 수 있는 활동\", \"교육적인 체험 프로그램\", \"가족 친화적 레스토랑\"], afternoon: [\"테마파크나 동물원\", \"아이들이 안전하게 놀 수 있는 장소\", \"가족 단위 투어\"], evening: [\"가족 모두가 즐길 수 있는 쇼\", \"호텔에서 가족 시간\", \"일찍 휴식\"], tips: [\"아이 용품 준비\", \"의료진 연락처 확보\", \"비상약 준비\"] }, friends: { morning: [\"활기찬 브런치\", \"그룹 액티비티\", \"인스타 스팟 탐방\"], afternoon: [\"어드벤처 스포츠\", \"쇼핑과 맛집 투어\", \"그룹 게임이나 체험\"], evening: [\"나이트라이프 체험\", \"그룹 파티나 이벤트\", \"늦은 시간까지 놀기\"], tips: [\"그룹 할인 활용\", \"역할 분담하기\", \"모든 친구들 취향 고려\"] }, nomad: { morning: [\"코워킹 스페이스에서 업무\", \"카페에서 업무와 휴식\", \"현지 비즈니스 네트워킹\"], afternoon: [\"업무와 여행의 밸런스\", \"현지 문화 체험\", \"장기 체류에 적합한 활동\"], evening: [\"노마드 커뮤니티 모임\", \"업무 마무리와 휴식\", \"현지 생활 적응\"], tips: [\"안정적인 인터넷 확보\", \"장기 체류 할인\", \"현지 생활비 관리\"] } }; const template = templates[tripType as keyof typeof templates] || templates.solo; const days = parseInt(duration) || 3; return { destination: dest, duration: `${days}일`, budget: dest.budget, schedule: Array.from({length: days}, (_, i) => ({ day: i + 1, morning: template.morning[i % template.morning.length], afternoon: template.afternoon[i % template.afternoon.length], evening: template.evening[i % template.evening.length] })), highlights: dest.highlights, tips: template.tips, bestSeason: dest.bestSeason }; }; export default function TripPlannerPage() { const t = useTranslations(); return (",
      "개인화기능4208": "💾 개인화 기능",
      "개4212": "개)",
      "저장된여행계획4214": "📚 저장된 여행 계획",
      "맞춤여행계획4215": "🎯 맞춤 여행 계획",
      "가이드보기4221": "가이드 보기",
      "ai플래너의4222": "AI 플래너의",
      "특별한기능4223": "특별한 기능",
      "완전맞춤형4224": "완전 맞춤형",
      "당신의취향예산동행인을모두고려한개인맞춤4225": "당신의 취향, 예산, 동행인을 모두 고려한 개인 맞춤 일정",
      "실시간최적화4226": "실시간 최적화",
      "날씨교통현지상황을실시간으로반영한스마트일4227": "날씨, 교통, 현지 상황을 실시간으로 반영한 스마트 일정",
      "상세정보제공4228": "상세 정보 제공",
      "교통편소요시간예약링크까지필요한모든정보4229": "교통편, 소요시간, 예약 링크까지 필요한 모든 정보",
      "예산관리4230": "예산 관리",
      "설정한예산내에서최고의가성비일정을자동생성4231": "설정한 예산 내에서 최고의 가성비 일정을 자동 생성",
      "모바일최적화4232": "모바일 최적화",
      "여행중에도편리하게일정을확인하고수정가능4233": "여행 중에도 편리하게 일정을 확인하고 수정 가능",
      "음성가이드연결4234": "음성 가이드 연결",
      "각장소마다전문오디오가이드가자동으로준비4235": "각 장소마다 전문 오디오 가이드가 자동으로 준비",
      "계획한여행지에서4236": "계획한 여행지에서",
      "ai가이드와함께4237": "AI 가이드와 함께",
      "여행계획이완성되면각장소에서전문ai가이드가4238": "여행 계획이 완성되면, 각 장소에서 전문 AI 가이드가 숨겨진 이야기와 현지 꿀팁을 들려드립니다",
      "도착하자마자4239": "도착하자마자",
      "gps로위치를감지해서해당장소의가이드를자동시4240": "GPS로 위치를 감지해서 해당 장소의 가이드를 자동 시작",
      "맞춤형설명4241": "맞춤형 설명",
      "당신의여행스타일과관심사에맞춘개인화된가이드4242": "당신의 여행 스타일과 관심사에 맞춘 개인화된 가이드",
      "실시간업데이트4243": "실시간 업데이트",
      "날씨혼잡도에따라실시간으로일정과가이드내용조4244": "날씨, 혼잡도에 따라 실시간으로 일정과 가이드 내용 조정",
      "ai가이드체험해보기4245": "AI 가이드 체험해보기",
      "javascript로직4246": "{/* JavaScript 로직 */}",
      "constplanjsonstringif4247": "{ const plan = ${JSON.stringify(generateAITripPlan)}; // 템플릿 데이터 const templates = { solo: { morning: [\"현지 카페에서 여유로운 아침\", \"도보 탐험으로 골목길 발견\", \"현지 시장 구경\"], afternoon: [\"박물관이나 갤러리 방문\", \"현지 맛집에서 혼밥\", \"공원이나 해변에서 휴식\"], evening: [\"현지인들과 교류\", \"야경 명소에서 사진 촬영\", \"독서하며 여유로운 저녁\"] }, couple: { morning: [\"로맨틱한 브런치\", \"커플 포토존에서 사진 촬영\", \"함께 요리 클래스 참여\"], afternoon: [\"커플 스파 체험\", \"선셋 명소에서 함께\", \"로맨틱한 레스토랑\"], evening: [\"야경이 아름다운 곳에서 산책\", \"와인 바에서 대화\", \"호텔에서 로맨틱한 시간\"] } }; const template = templates[selectedType] || templates.solo; const destData = { name: destination, highlights: ['명소1', '명소2', '명소3'], budget: '50-80만원' }; // 계획 HTML 생성 const planHTML = \\",
      "destdataname여행4248": "📍 \\${destData.name} 여행",
      "예상예산destdatabudget4249": "예상 예산: \\${destData.budget}",
      "주요명소destdatahighlights4250": "주요 명소: \\${destData.highlights.join(', ')}",
      "오전4251": "오전:",
      "오후4252": "오후:",
      "저녁4253": "저녁:",
      "contentdivinnerhtmlpla4254": "\\`; contentDiv.innerHTML = planHTML; planDiv.classList.remove('hidden'); // 버튼 상태 복구 btn.disabled = false; btnText.classList.remove('hidden'); btnLoading.classList.add('hidden'); // 스크롤 이동 planDiv.scrollIntoView({ behavior: 'smooth' }); }, 2000); } // 여행 타입 선택 기능 document.addEventListener('DOMContentLoaded', function() { const typeButtons = document.querySelectorAll('[data-type]'); typeButtons.forEach(btn => { btn.addEventListener('click', function() { typeButtons.forEach(b => b.classList.remove('selected', 'border-gray-400', 'bg-gray-50')); this.classList.add('selected', 'border-gray-400', 'bg-gray-50'); }); }); }); // 사용자 설정 저장 function saveUserPreferences() { const prefs = { defaultBudget: document.querySelector('select').value, defaultDuration: document.querySelectorAll('select')[1].value, preferredInterests: Array.from(document.querySelectorAll('input[type=\"checkbox\"]:checked')).map(cb => cb.value), savedAt: new Date().toISOString() }; localStorage.setItem('tripPlannerPrefs', JSON.stringify(prefs)); alert('설정이 저장되었습니다! 🎯'); } // 사용자 설정 불러오기 function loadUserPreferences() { const prefs = JSON.parse(localStorage.getItem('tripPlannerPrefs') || '{}'); if (prefs.defaultBudget) { document.querySelector('select').value = prefs.defaultBudget; } if (prefs.defaultDuration) { document.querySelectorAll('select')[1].value = prefs.defaultDuration; } if (prefs.preferredInterests) { prefs.preferredInterests.forEach(interest => { const checkbox = document.querySelector(`input[value=\"${interest}\"]`); if (checkbox) checkbox.checked = true; }); } alert('저장된 설정을 불러왔습니다! 📂'); } // 계획 저장 함수 (향상됨) function savePlan() { const plans = JSON.parse(localStorage.getItem('savedTripPlans') || '[]'); const formData = new FormData(document.querySelector('form')); const newPlan = { id: Date.now(), destination: document.querySelector('input[type=\"text\"]').value || '제주도', date: new Date().toLocaleDateString(), content: document.getElementById('plan-content').innerHTML, preferences: { budget: document.querySelector('select').value, duration: document.querySelectorAll('select')[1].value, interests: Array.from(document.querySelectorAll('input[type=\"checkbox\"]:checked')).map(cb => cb.value) }, rating: null, tags: [] }; plans.push(newPlan); localStorage.setItem('savedTripPlans', JSON.stringify(plans)); updateSavedCount(); alert('여행 계획이 저장되었습니다! 📝'); } // 저장된 계획 수 업데이트 function updateSavedCount() { const plans = JSON.parse(localStorage.getItem('savedTripPlans') || '[]'); const countElement = document.getElementById('saved-count'); if (countElement) countElement.textContent = plans.length; } // 저장된 계획 보기 function showSavedPlans() { const plans = JSON.parse(localStorage.getItem('savedTripPlans') || '[]'); const container = document.getElementById('saved-plans'); const list = document.getElementById('saved-plans-list'); if (plans.length === 0) { list.innerHTML =",
      "저장된계획이없습니다4255": "저장된 계획이 없습니다.",
      "예산planpreferencesbudget4256": "예산: ${plan.preferences?.budget || 'N/A'} | 기간: ${plan.preferences?.duration || 'N/A'}",
      "ai여행계획도구맞춤형여행일정자동생성4260": "AI 여행 계획 도구 | 맞춤형 여행 일정 자동 생성 TripRadio.AI",
      "ai가당신의취향과예산에맞춰완벽한여행4261": "🗺️ AI가 당신의 취향과 예산에 맞춰 완벽한 여행 일정을 자동으로 생성합니다. 숙소, 교통, 관광지까지 한 번에 계획하세요",
      "ai여행계획4262": "AI 여행 계획",
      "여행일정생성기4263": "여행 일정 생성기",
      "맞춤형여행계획4264": "맞춤형 여행 계획",
      "자동여행계획4265": "자동 여행 계획",
      "여행플래너4266": "여행 플래너",
      "일정관리4267": "일정 관리",
      "여행코스4268": "여행 코스",
      "ai여행플래너4269": "AI 여행 플래너",
      "여행타입별추천데이터const4270": "] ) }; // 여행 타입별 추천 데이터 const tripTypes = [ { id:",
      "자유여행4271": "자유여행",
      "한국4297": "한국",
      "23일4298": "2-3일",
      "3050만원4299": "30-50만원",
      "한라산4300": "한라산",
      "성산일출봉4301": "성산일출봉",
      "우도4302": "우도",
      "봄가을4303": "봄,가을",
      "부산4304": "부산",
      "한국4305": "한국",
      "23일4306": "2-3일",
      "2540만원4307": "25-40만원",
      "해운대4308": "해운대",
      "감천문화마을4309": "감천문화마을",
      "자갈치시장4310": "자갈치시장",
      "여름가을4311": "여름,가을",
      "경주4312": "경주",
      "한국4313": "한국",
      "12일4314": "1-2일",
      "2035만원4315": "20-35만원",
      "불국사4316": "불국사",
      "석굴암4317": "석굴암",
      "안압지4318": "안압지",
      "봄가을4319": "봄,가을",
      "도쿄4320": "도쿄",
      "일본4321": "일본",
      "45일4322": "4-5일",
      "70120만원4323": "70-120만원",
      "도쿄타워4324": "도쿄타워",
      "센소지4325": "센소지",
      "신주쿠4326": "신주쿠",
      "봄가을4327": "봄,가을",
      "오사카4328": "오사카",
      "일본4329": "일본",
      "34일4330": "3-4일",
      "6080만원4331": "60-80만원",
      "오사카성4332": "오사카성",
      "도톤보리4333": "도톤보리",
      "유니버설4334": "유니버설",
      "봄가을4335": "봄,가을",
      "교토4336": "교토",
      "일본4337": "일본",
      "23일4338": "2-3일",
      "5070만원4339": "50-70만원",
      "기요미즈데라4340": "기요미즈데라",
      "후시미이나리4341": "후시미이나리",
      "아라시야마4342": "아라시야마",
      "봄가을4343": "봄,가을",
      "후쿠오카4344": "후쿠오카",
      "일본4345": "일본",
      "23일4346": "2-3일",
      "4565만원4347": "45-65만원",
      "하카타4348": "하카타",
      "모모치해변4349": "모모치해변",
      "텐진4350": "텐진",
      "봄가을4351": "봄,가을",
      "삿포로4352": "삿포로",
      "일본4353": "일본",
      "34일4354": "3-4일",
      "6090만원4355": "60-90만원",
      "삿포로맥주공장4356": "삿포로맥주공장",
      "스스키노4357": "스스키노",
      "오도리공원4358": "오도리공원",
      "겨울여름4359": "겨울,여름",
      "방콕4360": "방콕",
      "태국4361": "태국",
      "46일4362": "4-6일",
      "5070만원4363": "50-70만원",
      "왓포4364": "왓포",
      "차오프라야강4365": "차오프라야강",
      "카오산로드4366": "카오산로드",
      "겨울봄4367": "겨울,봄",
      "치앙마이4368": "치앙마이",
      "태국4369": "태국",
      "35일4370": "3-5일",
      "4060만원4371": "40-60만원",
      "도이수텝4372": "도이수텝",
      "구시가지4373": "구시가지",
      "선데이마켓4374": "선데이마켓",
      "겨울봄4375": "겨울,봄",
      "푸켓4376": "푸켓",
      "태국4377": "태국",
      "46일4378": "4-6일",
      "6080만원4379": "60-80만원",
      "파통비치4380": "파통비치",
      "피피아일랜드4381": "피피아일랜드",
      "빅부다4382": "빅부다",
      "겨울봄4383": "겨울,봄",
      "다낭4384": "다낭",
      "베트남4385": "베트남",
      "45일4386": "4-5일",
      "4060만원4387": "40-60만원",
      "골든브릿지4388": "골든브릿지",
      "한시장4389": "한시장",
      "미케비치4390": "미케비치",
      "봄가을4391": "봄,가을",
      "호치민4392": "호치민",
      "베트남4393": "베트남",
      "34일4394": "3-4일",
      "3555만원4395": "35-55만원",
      "벤탄시장4396": "벤탄시장",
      "통일궁4397": "통일궁",
      "메콩델타4398": "메콩델타",
      "겨울봄4399": "겨울,봄",
      "하노이4400": "하노이",
      "베트남4401": "베트남",
      "23일4402": "2-3일",
      "3050만원4403": "30-50만원",
      "호안키엠4404": "호안키엠",
      "올드쿼터4405": "올드쿼터",
      "하롱베이4406": "하롱베이",
      "봄가을4407": "봄,가을",
      "싱가포르4408": "싱가포르",
      "싱가포르4409": "싱가포르",
      "34일4410": "3-4일",
      "70100만원4411": "70-100만원",
      "마리나베이4412": "마리나베이",
      "센토사4413": "센토사",
      "가든스바이더베이4414": "가든스바이더베이",
      "연중4415": "연중",
      "쿠알라룸푸르4416": "쿠알라룸푸르",
      "말레이시아4417": "말레이시아",
      "23일4418": "2-3일",
      "3555만원4419": "35-55만원",
      "페트로나스타워4420": "페트로나스타워",
      "부킷빈탕4421": "부킷빈탕",
      "바투동굴4422": "바투동굴",
      "여름가을4423": "여름,가을",
      "발리4424": "발리",
      "인도네시아4425": "인도네시아",
      "57일4426": "5-7일",
      "6090만원4427": "60-90만원",
      "우붓4428": "우붓",
      "탄롯사원4429": "탄롯사원",
      "키밍비치4430": "키밍비치",
      "여름가을4431": "여름,가을",
      "자카르타4432": "자카르타",
      "인도네시아4433": "인도네시아",
      "23일4434": "2-3일",
      "4060만원4435": "40-60만원",
      "모나스4436": "모나스",
      "구시가지4437": "구시가지",
      "안촐4438": "안촐",
      "여름가을4439": "여름,가을",
      "마닐라4440": "마닐라",
      "필리핀4441": "필리핀",
      "34일4442": "3-4일",
      "4565만원4443": "45-65만원",
      "이트라무로스4444": "이트라무로스",
      "마카티4445": "마카티",
      "보라카이4446": "보라카이",
      "겨울봄4447": "겨울,봄",
      "세부4448": "세부",
      "필리핀4449": "필리핀",
      "46일4450": "4-6일",
      "5070만원4451": "50-70만원",
      "말라파스쿠아4452": "말라파스쿠아",
      "보홀4453": "보홀",
      "템플오브레아4454": "템플오브레아",
      "겨울봄4455": "겨울,봄",
      "홍콩4456": "홍콩",
      "중국4457": "중국",
      "34일4458": "3-4일",
      "6090만원4459": "60-90만원",
      "빅토리아피크4460": "빅토리아피크",
      "침사추이4461": "침사추이",
      "디즈니랜드4462": "디즈니랜드",
      "가을겨울4463": "가을,겨울",
      "마카오4464": "마카오",
      "중국4465": "중국",
      "23일4466": "2-3일",
      "5080만원4467": "50-80만원",
      "베네시안4468": "베네시안",
      "성바울성당4469": "성바울성당",
      "콜로안4470": "콜로안",
      "가을겨울4471": "가을,겨울",
      "타이베이4472": "타이베이",
      "대만4473": "대만",
      "34일4474": "3-4일",
      "5070만원4475": "50-70만원",
      "101타워4476": "101타워",
      "지우펀4477": "지우펀",
      "야시장4478": "야시장",
      "봄가을4479": "봄,가을",
      "뭄바이4480": "뭄바이",
      "인도4481": "인도",
      "34일4482": "3-4일",
      "3050만원4483": "30-50만원",
      "게이트웨이오브인디아4484": "게이트웨이오브인디아",
      "엘레판타동굴4485": "엘레판타동굴",
      "볼리우드4486": "볼리우드",
      "겨울봄4487": "겨울,봄",
      "델리4488": "델리",
      "인도4489": "인도",
      "23일4490": "2-3일",
      "2545만원4491": "25-45만원",
      "레드포트4492": "레드포트",
      "인디아게이트4493": "인디아게이트",
      "타지마할4494": "타지마할",
      "겨울봄4495": "겨울,봄",
      "파리4496": "파리",
      "프랑스4497": "프랑스",
      "57일4498": "5-7일",
      "100150만원4499": "100-150만원",
      "에펠탑4500": "에펠탑",
      "루브르4501": "루브르",
      "샹젤리제4502": "샹젤리제",
      "봄가을4503": "봄,가을",
      "니스4504": "니스",
      "프랑스4505": "프랑스",
      "34일4506": "3-4일",
      "80120만원4507": "80-120만원",
      "프로마나드4508": "프로마나드",
      "구시가지4509": "구시가지",
      "모나코4510": "모나코",
      "여름가을4511": "여름,가을",
      "런던4512": "런던",
      "영국4513": "영국",
      "57일4514": "5-7일",
      "120180만원4515": "120-180만원",
      "빅벤4516": "빅벤",
      "대영박물관4517": "대영박물관",
      "타워브릿지4518": "타워브릿지",
      "여름가을4519": "여름,가을",
      "에든버러4520": "에든버러",
      "영국4521": "영국",
      "23일4522": "2-3일",
      "70100만원4523": "70-100만원",
      "에든버러성4524": "에든버러성",
      "로열마일4525": "로열마일",
      "아서시트4526": "아서시트",
      "여름가을4527": "여름,가을",
      "로마4528": "로마",
      "이탈리아4529": "이탈리아",
      "46일4530": "4-6일",
      "80120만원4531": "80-120만원",
      "콜로세움4532": "콜로세움",
      "바티칸4533": "바티칸",
      "트레비분수4534": "트레비분수",
      "봄가을4535": "봄,가을",
      "베네치아4536": "베네치아",
      "이탈리아4537": "이탈리아",
      "23일4538": "2-3일",
      "70110만원4539": "70-110만원",
      "산마르코광장4540": "산마르코광장",
      "리알토다리4541": "리알토다리",
      "무라노4542": "무라노",
      "봄가을4543": "봄,가을",
      "피렌체4544": "피렌체",
      "이탈리아4545": "이탈리아",
      "23일4546": "2-3일",
      "6090만원4547": "60-90만원",
      "우피치4548": "우피치",
      "두오모4549": "두오모",
      "폰테베키오4550": "폰테베키오",
      "봄가을4551": "봄,가을",
      "밀라노4552": "밀라노",
      "이탈리아4553": "이탈리아",
      "23일4554": "2-3일",
      "80120만원4555": "80-120만원",
      "두오모4556": "두오모",
      "스칼라극장4557": "스칼라극장",
      "브레라4558": "브레라",
      "봄가을4559": "봄,가을",
      "바르셀로나4560": "바르셀로나",
      "스페인4561": "스페인",
      "45일4562": "4-5일",
      "70100만원4563": "70-100만원",
      "사그라다파밀리아4564": "사그라다파밀리아",
      "구엘공원4565": "구엘공원",
      "람블라스4566": "람블라스",
      "봄가을4567": "봄,가을",
      "마드리드4568": "마드리드",
      "스페인4569": "스페인",
      "34일4570": "3-4일",
      "6090만원4571": "60-90만원",
      "프라도미술관4572": "프라도미술관",
      "레티로공원4573": "레티로공원",
      "그란비아4574": "그란비아",
      "봄가을4575": "봄,가을",
      "베를린4576": "베를린",
      "독일4577": "독일",
      "34일4578": "3-4일",
      "6090만원4579": "60-90만원",
      "브란덴부르크문4580": "브란덴부르크문",
      "박물관섬4581": "박물관섬",
      "이스트사이드갤러리4582": "이스트사이드갤러리",
      "여름가을4583": "여름,가을",
      "뮌헨4584": "뮌헨",
      "독일4585": "독일",
      "34일4586": "3-4일",
      "70100만원4587": "70-100만원",
      "마리엔플라츠4588": "마리엔플라츠",
      "노이슈반슈타인4589": "노이슈반슈타인",
      "옥토버페스트4590": "옥토버페스트",
      "여름가을4591": "여름,가을",
      "암스테르담4592": "암스테르담",
      "네덜란드4593": "네덜란드",
      "34일4594": "3-4일",
      "80110만원4595": "80-110만원",
      "반고흐미술관4596": "반고흐미술관",
      "안네프랑크의집4597": "안네프랑크의집",
      "운하투어4598": "운하투어",
      "봄여름4599": "봄,여름",
      "브뤼셀4600": "브뤼셀",
      "벨기에4601": "벨기에",
      "23일4602": "2-3일",
      "6090만원4603": "60-90만원",
      "그랑플라스4604": "그랑플라스",
      "아토미움4605": "아토미움",
      "와플4606": "와플",
      "봄여름4607": "봄,여름",
      "프라하4608": "프라하",
      "체코4609": "체코",
      "34일4610": "3-4일",
      "5070만원4611": "50-70만원",
      "카를교4612": "카를교",
      "성비투스성당4613": "성비투스성당",
      "구시가지광장4614": "구시가지광장",
      "봄가을4615": "봄,가을",
      "비엔나4616": "비엔나",
      "오스트리아4617": "오스트리아",
      "34일4618": "3-4일",
      "70100만원4619": "70-100만원",
      "쇤부른궁전4620": "쇤부른궁전",
      "슈테판대성당4621": "슈테판대성당",
      "벨베데레4622": "벨베데레",
      "봄가을4623": "봄,가을",
      "취리히4624": "취리히",
      "스위스4625": "스위스",
      "23일4626": "2-3일",
      "120180만원4627": "120-180만원",
      "라인폭포4628": "라인폭포",
      "융프라우4629": "융프라우",
      "체르마트4630": "체르마트",
      "여름가을4631": "여름,가을",
      "스톡홀름4632": "스톡홀름",
      "스웨덴4633": "스웨덴",
      "34일4634": "3-4일",
      "80120만원4635": "80-120만원",
      "감라스탄4636": "감라스탄",
      "바사박물관4637": "바사박물관",
      "스칸센4638": "스칸센",
      "여름가을4639": "여름,가을",
      "코펜하겐4640": "코펜하겐",
      "덴마크4641": "덴마크",
      "23일4642": "2-3일",
      "80120만원4643": "80-120만원",
      "인어공주상4644": "인어공주상",
      "티볼리공원4645": "티볼리공원",
      "뉘하운4646": "뉘하운",
      "여름가을4647": "여름,가을",
      "헬싱키4648": "헬싱키",
      "핀란드4649": "핀란드",
      "23일4650": "2-3일",
      "70100만원4651": "70-100만원",
      "헬싱키성당4652": "헬싱키성당",
      "수오멘린나4653": "수오멘린나",
      "마켓광장4654": "마켓광장",
      "여름겨울4655": "여름,겨울",
      "리스본4656": "리스본",
      "포르투갈4657": "포르투갈",
      "34일4658": "3-4일",
      "6080만원4659": "60-80만원",
      "베렝탑4660": "베렝탑",
      "알파마4661": "알파마",
      "신트라4662": "신트라",
      "봄가을4663": "봄,가을",
      "뉴욕4664": "뉴욕",
      "미국4665": "미국",
      "57일4666": "5-7일",
      "150250만원4667": "150-250만원",
      "자유의여신상4668": "자유의여신상",
      "타임스퀘어4669": "타임스퀘어",
      "센트럴파크4670": "센트럴파크",
      "봄가을4671": "봄,가을",
      "로스앤젤레스4672": "로스앤젤레스",
      "미국4673": "미국",
      "46일4674": "4-6일",
      "120200만원4675": "120-200만원",
      "할리우드4676": "할리우드",
      "베니스비치4677": "베니스비치",
      "디즈니랜드4678": "디즈니랜드",
      "봄가을4679": "봄,가을",
      "라스베이거스4680": "라스베이거스",
      "미국4681": "미국",
      "34일4682": "3-4일",
      "100150만원4683": "100-150만원",
      "스트립4684": "스트립",
      "그랜드캐년4685": "그랜드캐년",
      "봄가을4686": "봄,가을",
      "샌프란시스코4687": "샌프란시스코",
      "미국4688": "미국",
      "34일4689": "3-4일",
      "120180만원4690": "120-180만원",
      "골든게이트4691": "골든게이트",
      "알카트라즈4692": "알카트라즈",
      "피셔맨스워프4693": "피셔맨스워프",
      "여름가을4694": "여름,가을",
      "토론토4695": "토론토",
      "캐나다4696": "캐나다",
      "34일4697": "3-4일",
      "80120만원4698": "80-120만원",
      "cn타워4699": "CN타워",
      "나이아가라4700": "나이아가라",
      "디스틸러리4701": "디스틸러리",
      "여름가을4702": "여름,가을",
      "밴쿠버4703": "밴쿠버",
      "캐나다4704": "캐나다",
      "34일4705": "3-4일",
      "80120만원4706": "80-120만원",
      "스탠리파크4707": "스탠리파크",
      "그라우스마운틴4708": "그라우스마운틴",
      "그랜빌아일랜드4709": "그랜빌아일랜드",
      "여름가을4710": "여름,가을",
      "멕시코시티4711": "멕시코시티",
      "멕시코4712": "멕시코",
      "45일4713": "4-5일",
      "6090만원4714": "60-90만원",
      "테오티우아칸4715": "테오티우아칸",
      "소칼로4716": "소칼로",
      "프리다칼로박물관4717": "프리다칼로박물관",
      "겨울봄4718": "겨울,봄",
      "칸쿤4719": "칸쿤",
      "멕시코4720": "멕시코",
      "57일4721": "5-7일",
      "80120만원4722": "80-120만원",
      "치첸이트사4723": "치첸이트사",
      "코즈멜4724": "코즈멜",
      "마야유적4725": "마야유적",
      "겨울봄4726": "겨울,봄",
      "부에노스아이레스4727": "부에노스아이레스",
      "아르헨티나4728": "아르헨티나",
      "45일4729": "4-5일",
      "70100만원4730": "70-100만원",
      "탱고4731": "탱고",
      "라보카4732": "라보카",
      "레콜레타4733": "레콜레타",
      "봄가을4734": "봄,가을",
      "리우데자네이루4735": "리우데자네이루",
      "브라질4736": "브라질",
      "46일4737": "4-6일",
      "80120만원4738": "80-120만원",
      "예수상4739": "예수상",
      "코파카바나4740": "코파카바나",
      "슈가로프4741": "슈가로프",
      "봄가을4742": "봄,가을",
      "현지카페에서여유로운아침4743": "현지 카페에서 여유로운 아침",
      "도보탐험으로골목길발견4744": "도보 탐험으로 골목길 발견",
      "현지시장구경4745": "현지 시장 구경",
      "박물관이나갤러리방문4746": "박물관이나 갤러리 방문",
      "현지맛집에서혼밥4747": "현지 맛집에서 혼밥",
      "공원이나해변에서휴식4748": "공원이나 해변에서 휴식",
      "현지인들과교류4749": "현지인들과 교류",
      "야경명소에서사진촬영4750": "야경 명소에서 사진 촬영",
      "독서하며여유로운저녁4751": "독서하며 여유로운 저녁",
      "안전정보숙지4752": "안전 정보 숙지",
      "현지언어몇마디배우기4753": "현지 언어 몇 마디 배우기",
      "혼자만의시간즐기기4754": "혼자만의 시간 즐기기",
      "로맨틱한브런치4755": "로맨틱한 브런치",
      "커플포토존에서사진촬영4756": "커플 포토존에서 사진 촬영",
      "함께요리클래스참여4757": "함께 요리 클래스 참여",
      "커플스파체험4758": "커플 스파 체험",
      "선셋명소에서함께4759": "선셋 명소에서 함께",
      "로맨틱한레스토랑4760": "로맨틱한 레스토랑",
      "야경이아름다운곳에서산책4761": "야경이 아름다운 곳에서 산책",
      "와인바에서대화4762": "와인 바에서 대화",
      "호텔에서로맨틱한시간4763": "호텔에서 로맨틱한 시간",
      "커플할인정보확인4764": "커플 할인 정보 확인",
      "기념품함께고르기4765": "기념품 함께 고르기",
      "추억을남길액티비티4766": "추억을 남길 액티비티",
      "아이들과함께할수있는활동4767": "아이들과 함께 할 수 있는 활동",
      "교육적인체험프로그램4768": "교육적인 체험 프로그램",
      "가족친화적레스토랑4769": "가족 친화적 레스토랑",
      "테마파크나동물원4770": "테마파크나 동물원",
      "아이들이안전하게놀수있는장소4771": "아이들이 안전하게 놀 수 있는 장소",
      "가족단위투어4772": "가족 단위 투어",
      "가족모두가즐길수있는쇼4773": "가족 모두가 즐길 수 있는 쇼",
      "호텔에서가족시간4774": "호텔에서 가족 시간",
      "일찍휴식4775": "일찍 휴식",
      "아이용품준비4776": "아이 용품 준비",
      "의료진연락처확보4777": "의료진 연락처 확보",
      "비상약준비4778": "비상약 준비",
      "활기찬브런치4779": "활기찬 브런치",
      "그룹액티비티4780": "그룹 액티비티",
      "인스타스팟탐방4781": "인스타 스팟 탐방",
      "어드벤처스포츠4782": "어드벤처 스포츠",
      "쇼핑과맛집투어4783": "쇼핑과 맛집 투어",
      "그룹게임이나체험4784": "그룹 게임이나 체험",
      "나이트라이프체험4785": "나이트라이프 체험",
      "그룹파티나이벤트4786": "그룹 파티나 이벤트",
      "늦은시간까지놀기4787": "늦은 시간까지 놀기",
      "그룹할인활용4788": "그룹 할인 활용",
      "역할분담하기4789": "역할 분담하기",
      "모든친구들취향고려4790": "모든 친구들 취향 고려",
      "코워킹스페이스에서업무4791": "코워킹 스페이스에서 업무",
      "카페에서업무와휴식4792": "카페에서 업무와 휴식",
      "현지비즈니스네트워킹4793": "현지 비즈니스 네트워킹",
      "업무와여행의밸런스4794": "업무와 여행의 밸런스",
      "현지문화체험4795": "현지 문화 체험",
      "장기체류에적합한활동4796": "장기 체류에 적합한 활동",
      "노마드커뮤니티모임4797": "노마드 커뮤니티 모임",
      "업무마무리와휴식4798": "업무 마무리와 휴식",
      "현지생활적응4799": "현지 생활 적응",
      "안정적인인터넷확보4800": "안정적인 인터넷 확보",
      "장기체류할인4801": "장기 체류 할인",
      "현지생활비관리4802": "현지 생활비 관리",
      "ai여행계획4803": "AI 여행 계획",
      "개인화기능h3divclassname4820": "💾 개인화 기능</h3> <div className=",
      "0span개buttondiv4824": "0</span>개) </button> </div> </div> {/* Generate Button */} <div className=",
      "저장된여행계획h3buttononcl4826": "📚 저장된 여행 계획</h3> <button onClick={() => document.getElementById(",
      "맞춤여행계획h3divclassnam4828": "🎯 맞춤 여행 계획</h3> <div className=",
      "가이드보기linkdestregion4834": "가이드 보기 </Link> {dest.region ===",
      "ai플래너의spanclassname4837": "AI 플래너의 <span className=",
      "특별한기능spanh2divclass4838": "특별한 기능</span> </h2> <div className=",
      "완전맞춤형h3pclassname4839": "완전 맞춤형</h3> <p className=",
      "당신의취향예산동행인을모두고려한개인맞춤4840": "당신의 취향, 예산, 동행인을 모두 고려한 개인 맞춤 일정 </p> </div> <div className=",
      "실시간최적화h3pclassname4841": "실시간 최적화</h3> <p className=",
      "날씨교통현지상황을실시간으로반영한스마트일4842": "날씨, 교통, 현지 상황을 실시간으로 반영한 스마트 일정 </p> </div> <div className=",
      "상세정보제공h3pclassname4843": "상세 정보 제공</h3> <p className=",
      "교통편소요시간예약링크까지필요한모든정보4844": "교통편, 소요시간, 예약 링크까지 필요한 모든 정보 </p> </div> <div className=",
      "예산관리h3pclassname4845": "예산 관리</h3> <p className=",
      "설정한예산내에서최고의가성비일정을자동생성4846": "설정한 예산 내에서 최고의 가성비 일정을 자동 생성 </p> </div> <div className=",
      "모바일최적화h3pclassname4847": "모바일 최적화</h3> <p className=",
      "여행중에도편리하게일정을확인하고수정가능p4848": "여행 중에도 편리하게 일정을 확인하고 수정 가능 </p> </div> <div className=",
      "음성가이드연결h3pclassname4849": "음성 가이드 연결</h3> <p className=",
      "각장소마다전문오디오가이드가자동으로준비p4850": "각 장소마다 전문 오디오 가이드가 자동으로 준비 </p> </div> </div> </div> </div> </section> {/* AI Audio Guide Integration */} <section className=",
      "계획한여행지에서spanclassname4851": "계획한 여행지에서 <span className=",
      "ai가이드와함께spanh2pcla4852": "AI 가이드와 함께</span> </h2> <p className=",
      "여행계획이완성되면각장소에서전문ai가이드가4853": "여행 계획이 완성되면, 각 장소에서 전문 AI 가이드가 숨겨진 이야기와 현지 꿀팁을 들려드립니다 </p> <div className=",
      "도착하자마자h3pclassname4854": "도착하자마자</h3> <p className=",
      "gps로위치를감지해서해당장소의가이드를자동시4855": "GPS로 위치를 감지해서 해당 장소의 가이드를 자동 시작</p> </div> <div className=",
      "맞춤형설명h3pclassname4856": "맞춤형 설명</h3> <p className=",
      "당신의여행스타일과관심사에맞춘개인화된가이드4857": "당신의 여행 스타일과 관심사에 맞춘 개인화된 가이드</p> </div> <div className=",
      "실시간업데이트h3pclassname4858": "실시간 업데이트</h3> <p className=",
      "날씨혼잡도에따라실시간으로일정과가이드내용조4859": "날씨, 혼잡도에 따라 실시간으로 일정과 가이드 내용 조정</p> </div> </div> <Link href=",
      "ai가이드체험해보기linkdiv4860": "AI 가이드 체험해보기 </Link> </div> </div> </section> </div> {/* JavaScript 로직 */} <script dangerouslySetInnerHTML={{ __html: ` // 여행 계획 생성 함수 function generateTripPlan() { const btn = document.getElementById(",
      "버튼상태변경btndisabled4861": "); // 버튼 상태 변경 btn.disabled = true; btnText.classList.add(",
      "폼데이터수집constdestinati4862": "); // 폼 데이터 수집 const destination = document.querySelector(",
      "제주도4863": "제주도",
      "실제계획생성2초후settimeou4864": "; // 실제 계획 생성 (2초 후) setTimeout(() => { const plan = ${JSON.stringify(generateAITripPlan)}; // 템플릿 데이터 const templates = { solo: { morning: [",
      "도보탐험으로골목길발견4865": "도보 탐험으로 골목길 발견",
      "현지시장구경4866": "현지 시장 구경",
      "박물관이나갤러리방문4867": "박물관이나 갤러리 방문",
      "현지맛집에서혼밥4868": "현지 맛집에서 혼밥",
      "공원이나해변에서휴식4869": "공원이나 해변에서 휴식",
      "현지인들과교류4870": "현지인들과 교류",
      "야경명소에서사진촬영4871": "야경 명소에서 사진 촬영",
      "독서하며여유로운저녁4872": "독서하며 여유로운 저녁",
      "로맨틱한브런치4873": "로맨틱한 브런치",
      "커플포토존에서사진촬영4874": "커플 포토존에서 사진 촬영",
      "함께요리클래스참여4875": "함께 요리 클래스 참여",
      "커플스파체험4876": "커플 스파 체험",
      "선셋명소에서함께4877": "선셋 명소에서 함께",
      "로맨틱한레스토랑4878": "로맨틱한 레스토랑",
      "야경이아름다운곳에서산책4879": "야경이 아름다운 곳에서 산책",
      "와인바에서대화4880": "와인 바에서 대화",
      "호텔에서로맨틱한시간4881": "호텔에서 로맨틱한 시간",
      "명소14882": "명소1",
      "명소24883": "명소2",
      "명소34884": "명소3",
      "5080만원4885": "50-80만원",
      "destdataname여행h44886": "📍 \\${destData.name} 여행</h4> <p class=",
      "예상예산destdatabudgetp4887": "예상 예산: \\${destData.budget}</p> <p class=",
      "주요명소destdatahighlights4888": "주요 명소: \\${destData.highlights.join(",
      "오전spanspanclass4889": "오전:</span> <span class=",
      "오후spanspanclass4890": "오후:</span> <span class=",
      "저녁spanspanclass4891": "저녁:</span> <span class=",
      "버튼상태복구btndisabled4892": "); // 버튼 상태 복구 btn.disabled = false; btnText.classList.remove(",
      "스크롤이동plandivscrollint4893": "); // 스크롤 이동 planDiv.scrollIntoView({ behavior:",
      "2000여행타입선택기능4894": "}); }, 2000); } // 여행 타입 선택 기능 document.addEventListener(",
      "설정이저장되었습니다4896": "설정이 저장되었습니다! 🎯",
      "저장된설정을불러왔습니다4897": "저장된 설정을 불러왔습니다! 📂",
      "여행계획이저장되었습니다4899": "여행 계획이 저장되었습니다! 📝",
      "ifcountelementcountelem4900": "); if (countElement) countElement.textContent = plans.length; } // 저장된 계획 보기 function showSavedPlans() { const plans = JSON.parse(localStorage.getItem(",
      "저장된계획이없습니다p4901": "저장된 계획이 없습니다.</p>",
      "예산planpreferencesbudget4902": "예산: ${plan.preferences?.budget ||",
      "기간planpreferencesdu4903": "} | 기간: ${plan.preferences?.duration ||",
      "계획을불러왔습니다4907": "계획을 불러왔습니다! 📂",
      "이계획을삭제하시겠습니까4908": "이 계획을 삭제하시겠습니까?",
      "제주도4910": "제주도",
      "innertextconstblobnew4911": ").innerText; const blob = new Blob([`${destination} 여행 계획 ${content}`], { type:",
      "ahrefurladownload4912": "); a.href = url; a.download = `${destination}_여행계획.txt`; a.click(); URL.revokeObjectURL(url); } // 유사 계획 비교 function compareWithSimilar() { const currentDest = document.querySelector(",
      "제주도4913": "제주도",
      "유사한여행계획이없습니다4914": "유사한 여행 계획이 없습니다.",
      "페이지로드시저장된계획수4915": ")}`); } } // 페이지 로드 시 저장된 계획 수 업데이트 document.addEventListener(",
      "functionupdatesavedcoun4916": ", function() { updateSavedCount(); }); // 계획 재생성 function regeneratePlan() { generateTripPlan(); } // 여행 공유 function shareTrip() { const destination = document.querySelector(",
      "제주도4917": "제주도",
      "days일4920": "${days}일",
      "classnameflex1bgblackt4921": "} className=\"flex-1 bg-black text-white py-2 px-3 rounded text-xs text-center hover:bg-gray-800 transition-colors\" > 가이드 보기 </Link> {dest.region === 'asia' && ( <Link href={",
      "classnamepx3py2bgblue4922": "} className=\"px-3 py-2 bg-blue-100 text-blue-800 rounded text-xs hover:bg-blue-200 transition-colors\" title=\"노마드 정보\" > 💻 </Link> )} <Link href={",
      "classnamepx3py2bggray4923": "} className=\"px-3 py-2 bg-gray-100 text-gray-700 rounded text-xs hover:bg-gray-200 transition-colors\" title=\"비자 정보\" > 📋 </Link> </div> </div> ))} </div> </div> {/* AI Features */} <div className=\"bg-gray-50 p-8 rounded-lg\"> <h2 className=\"text-2xl font-light text-gray-900 mb-8 text-center\"> AI 플래너의 <span className=\"font-semibold\">특별한 기능</span> </h2> <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\"> <div className=\"bg-white p-6 rounded-lg\"> <div className=\"text-2xl mb-4\">🎯</div> <h3 className=\"font-medium text-gray-900 mb-2\">완전 맞춤형</h3> <p className=\"text-sm text-gray-600\"> 당신의 취향, 예산, 동행인을 모두 고려한 개인 맞춤 일정 </p> </div> <div className=\"bg-white p-6 rounded-lg\"> <div className=\"text-2xl mb-4\">⚡</div> <h3 className=\"font-medium text-gray-900 mb-2\">실시간 최적화</h3> <p className=\"text-sm text-gray-600\"> 날씨, 교통, 현지 상황을 실시간으로 반영한 스마트 일정 </p> </div> <div className=\"bg-white p-6 rounded-lg\"> <div className=\"text-2xl mb-4\">🗺️</div> <h3 className=\"font-medium text-gray-900 mb-2\">상세 정보 제공</h3> <p className=\"text-sm text-gray-600\"> 교통편, 소요시간, 예약 링크까지 필요한 모든 정보 </p> </div> <div className=\"bg-white p-6 rounded-lg\"> <div className=\"text-2xl mb-4\">💰</div> <h3 className=\"font-medium text-gray-900 mb-2\">예산 관리</h3> <p className=\"text-sm text-gray-600\"> 설정한 예산 내에서 최고의 가성비 일정을 자동 생성 </p> </div> <div className=\"bg-white p-6 rounded-lg\"> <div className=\"text-2xl mb-4\">📱</div> <h3 className=\"font-medium text-gray-900 mb-2\">모바일 최적화</h3> <p className=\"text-sm text-gray-600\"> 여행 중에도 편리하게 일정을 확인하고 수정 가능 </p> </div> <div className=\"bg-white p-6 rounded-lg\"> <div className=\"text-2xl mb-4\">🎧</div> <h3 className=\"font-medium text-gray-900 mb-2\">음성 가이드 연결</h3> <p className=\"text-sm text-gray-600\"> 각 장소마다 전문 오디오 가이드가 자동으로 준비 </p> </div> </div> </div> </div> </section> {/* AI Audio Guide Integration */} <section className=\"py-16 bg-black text-white\"> <div className=\"container mx-auto px-6 text-center\"> <div className=\"max-w-3xl mx-auto\"> <h2 className=\"text-3xl lg:text-4xl font-light mb-6 tracking-tight\"> 계획한 여행지에서 <span className=\"font-semibold\">AI 가이드와 함께</span> </h2> <p className=\"text-lg lg:text-xl text-gray-300 mb-8 leading-relaxed\"> 여행 계획이 완성되면, 각 장소에서 전문 AI 가이드가 숨겨진 이야기와 현지 꿀팁을 들려드립니다 </p> <div className=\"grid md:grid-cols-3 gap-6 mb-12\"> <div className=\"bg-gray-900 p-6 rounded-lg\"> <div className=\"text-2xl mb-3\">📍</div> <h3 className=\"font-medium mb-2\">도착하자마자</h3> <p className=\"text-sm text-gray-300\">GPS로 위치를 감지해서 해당 장소의 가이드를 자동 시작</p> </div> <div className=\"bg-gray-900 p-6 rounded-lg\"> <div className=\"text-2xl mb-3\">🎯</div> <h3 className=\"font-medium mb-2\">맞춤형 설명</h3> <p className=\"text-sm text-gray-300\">당신의 여행 스타일과 관심사에 맞춘 개인화된 가이드</p> </div> <div className=\"bg-gray-900 p-6 rounded-lg\"> <div className=\"text-2xl mb-3\">🔄</div> <h3 className=\"font-medium mb-2\">실시간 업데이트</h3> <p className=\"text-sm text-gray-300\">날씨, 혼잡도에 따라 실시간으로 일정과 가이드 내용 조정</p> </div> </div> <Link href=\"/?planner=integrated\" className=\"inline-block bg-white text-black px-10 py-4 rounded-lg font-medium hover:bg-gray-100 transition-all duration-200\" > AI 가이드 체험해보기 </Link> </div> </div> </section> </div> {/* JavaScript 로직 */} <script dangerouslySetInnerHTML={{ __html:",
      "divclassspacey4divc4924": "<div class=\"space-y-4\"> <div class=\"bg-blue-50 p-4 rounded-lg\"> <h4 class=\"font-medium text-blue-900 mb-2\">📍 \\${destData.name} 여행</h4> <p class=\"text-sm text-blue-700\">예상 예산: \\${destData.budget}</p> <p class=\"text-sm text-blue-700\">주요 명소: \\${destData.highlights.join(', ')}</p> </div> \\${Array.from({length: 3}, (_, i) => \\",
      "contentdivinnerhtmlplanh4925": "; contentDiv.innerHTML = planHTML; planDiv.classList.remove('hidden'); // 버튼 상태 복구 btn.disabled = false; btnText.classList.remove('hidden'); btnLoading.classList.add('hidden'); // 스크롤 이동 planDiv.scrollIntoView({ behavior: 'smooth' }); }, 2000); } // 여행 타입 선택 기능 document.addEventListener('DOMContentLoaded', function() { const typeButtons = document.querySelectorAll('[data-type]'); typeButtons.forEach(btn => { btn.addEventListener('click', function() { typeButtons.forEach(b => b.classList.remove('selected', 'border-gray-400', 'bg-gray-50')); this.classList.add('selected', 'border-gray-400', 'bg-gray-50'); }); }); }); // 사용자 설정 저장 function saveUserPreferences() { const prefs = { defaultBudget: document.querySelector('select').value, defaultDuration: document.querySelectorAll('select')[1].value, preferredInterests: Array.from(document.querySelectorAll('input[type=\"checkbox\"]:checked')).map(cb => cb.value), savedAt: new Date().toISOString() }; localStorage.setItem('tripPlannerPrefs', JSON.stringify(prefs)); alert('설정이 저장되었습니다! 🎯'); } // 사용자 설정 불러오기 function loadUserPreferences() { const prefs = JSON.parse(localStorage.getItem('tripPlannerPrefs') || '{}'); if (prefs.defaultBudget) { document.querySelector('select').value = prefs.defaultBudget; } if (prefs.defaultDuration) { document.querySelectorAll('select')[1].value = prefs.defaultDuration; } if (prefs.preferredInterests) { prefs.preferredInterests.forEach(interest => { const checkbox = document.querySelector(",
      "ifcheckboxcheckboxchec4926": "); if (checkbox) checkbox.checked = true; }); } alert('저장된 설정을 불러왔습니다! 📂'); } // 계획 저장 함수 (향상됨) function savePlan() { const plans = JSON.parse(localStorage.getItem('savedTripPlans') || '[]'); const formData = new FormData(document.querySelector('form')); const newPlan = { id: Date.now(), destination: document.querySelector('input[type=\"text\"]').value || '제주도', date: new Date().toLocaleDateString(), content: document.getElementById('plan-content').innerHTML, preferences: { budget: document.querySelector('select').value, duration: document.querySelectorAll('select')[1].value, interests: Array.from(document.querySelectorAll('input[type=\"checkbox\"]:checked')).map(cb => cb.value) }, rating: null, tags: [] }; plans.push(newPlan); localStorage.setItem('savedTripPlans', JSON.stringify(plans)); updateSavedCount(); alert('여행 계획이 저장되었습니다! 📝'); } // 저장된 계획 수 업데이트 function updateSavedCount() { const plans = JSON.parse(localStorage.getItem('savedTripPlans') || '[]'); const countElement = document.getElementById('saved-count'); if (countElement) countElement.textContent = plans.length; } // 저장된 계획 보기 function showSavedPlans() { const plans = JSON.parse(localStorage.getItem('savedTripPlans') || '[]'); const container = document.getElementById('saved-plans'); const list = document.getElementById('saved-plans-list'); if (plans.length === 0) { list.innerHTML = '<p class=\"text-gray-500 text-center py-4\">저장된 계획이 없습니다.</p>'; } else { list.innerHTML = plans.map(plan =>",
      "destination여행계획txt4928": "${destination}_여행계획.txt",
      "similarlength개의유사한계획을찾았4929": "${similar.length}개의 유사한 계획을 찾았습니다: ${similar.map(p => p.destination).join(', ')}",
      "destination여행계획을ai가생성했4930": "\\${destination} 여행 계획을 AI가 생성했어요! TripRadio.AI에서 확인해보세요: \\${window.location.href}\\",
      "자유여행4931": ": '자유여행",
      "한국4942": ": '한국",
      "23일4943": ": '2-3일",
      "3050만원4944": ": '30-50만원",
      "봄가을4945": ": '봄,가을",
      "부산4946": ": '부산",
      "한국4947": ": '한국",
      "23일4948": ": '2-3일",
      "2540만원4949": ": '25-40만원",
      "여름가을4950": ": '여름,가을",
      "경주4951": ": '경주",
      "한국4952": ": '한국",
      "12일4953": ": '1-2일",
      "2035만원4954": ": '20-35만원",
      "봄가을4955": ": '봄,가을",
      "도쿄4956": ": '도쿄",
      "일본4957": ": '일본",
      "45일4958": ": '4-5일",
      "70120만원4959": ": '70-120만원",
      "봄가을4960": ": '봄,가을",
      "오사카4961": ": '오사카",
      "일본4962": ": '일본",
      "34일4963": ": '3-4일",
      "6080만원4964": ": '60-80만원",
      "봄가을4965": ": '봄,가을",
      "교토4966": ": '교토",
      "일본4967": ": '일본",
      "23일4968": ": '2-3일",
      "5070만원4969": ": '50-70만원",
      "봄가을4970": ": '봄,가을",
      "후쿠오카4971": ": '후쿠오카",
      "일본4972": ": '일본",
      "23일4973": ": '2-3일",
      "4565만원4974": ": '45-65만원",
      "봄가을4975": ": '봄,가을",
      "삿포로4976": ": '삿포로",
      "일본4977": ": '일본",
      "34일4978": ": '3-4일",
      "6090만원4979": ": '60-90만원",
      "겨울여름4980": ": '겨울,여름",
      "방콕4981": ": '방콕",
      "태국4982": ": '태국",
      "46일4983": ": '4-6일",
      "5070만원4984": ": '50-70만원",
      "겨울봄4985": ": '겨울,봄",
      "치앙마이4986": ": '치앙마이",
      "태국4987": ": '태국",
      "35일4988": ": '3-5일",
      "4060만원4989": ": '40-60만원",
      "겨울봄4990": ": '겨울,봄",
      "푸켓4991": ": '푸켓",
      "태국4992": ": '태국",
      "46일4993": ": '4-6일",
      "6080만원4994": ": '60-80만원",
      "겨울봄4995": ": '겨울,봄",
      "다낭4996": ": '다낭",
      "베트남4997": ": '베트남",
      "45일4998": ": '4-5일",
      "4060만원4999": ": '40-60만원",
      "봄가을5000": ": '봄,가을",
      "호치민5001": ": '호치민",
      "베트남5002": ": '베트남",
      "34일5003": ": '3-4일",
      "3555만원5004": ": '35-55만원",
      "겨울봄5005": ": '겨울,봄",
      "하노이5006": ": '하노이",
      "베트남5007": ": '베트남",
      "23일5008": ": '2-3일",
      "3050만원5009": ": '30-50만원",
      "봄가을5010": ": '봄,가을",
      "싱가포르5011": ": '싱가포르",
      "싱가포르5012": ": '싱가포르",
      "34일5013": ": '3-4일",
      "70100만원5014": ": '70-100만원",
      "연중5015": ": '연중",
      "쿠알라룸푸르5016": ": '쿠알라룸푸르",
      "말레이시아5017": ": '말레이시아",
      "23일5018": ": '2-3일",
      "3555만원5019": ": '35-55만원",
      "여름가을5020": ": '여름,가을",
      "발리5021": ": '발리",
      "인도네시아5022": ": '인도네시아",
      "57일5023": ": '5-7일",
      "6090만원5024": ": '60-90만원",
      "여름가을5025": ": '여름,가을",
      "자카르타5026": ": '자카르타",
      "인도네시아5027": ": '인도네시아",
      "23일5028": ": '2-3일",
      "4060만원5029": ": '40-60만원",
      "여름가을5030": ": '여름,가을",
      "마닐라5031": ": '마닐라",
      "필리핀5032": ": '필리핀",
      "34일5033": ": '3-4일",
      "4565만원5034": ": '45-65만원",
      "겨울봄5035": ": '겨울,봄",
      "세부5036": ": '세부",
      "필리핀5037": ": '필리핀",
      "46일5038": ": '4-6일",
      "5070만원5039": ": '50-70만원",
      "겨울봄5040": ": '겨울,봄",
      "홍콩5041": ": '홍콩",
      "중국5042": ": '중국",
      "34일5043": ": '3-4일",
      "6090만원5044": ": '60-90만원",
      "가을겨울5045": ": '가을,겨울",
      "마카오5046": ": '마카오",
      "중국5047": ": '중국",
      "23일5048": ": '2-3일",
      "5080만원5049": ": '50-80만원",
      "가을겨울5050": ": '가을,겨울",
      "타이베이5051": ": '타이베이",
      "대만5052": ": '대만",
      "34일5053": ": '3-4일",
      "5070만원5054": ": '50-70만원",
      "봄가을5055": ": '봄,가을",
      "뭄바이5056": ": '뭄바이",
      "인도5057": ": '인도",
      "34일5058": ": '3-4일",
      "3050만원5059": ": '30-50만원",
      "겨울봄5060": ": '겨울,봄",
      "델리5061": ": '델리",
      "인도5062": ": '인도",
      "23일5063": ": '2-3일",
      "2545만원5064": ": '25-45만원",
      "겨울봄5065": ": '겨울,봄",
      "파리5066": ": '파리",
      "프랑스5067": ": '프랑스",
      "57일5068": ": '5-7일",
      "100150만원5069": ": '100-150만원",
      "봄가을5070": ": '봄,가을",
      "니스5071": ": '니스",
      "프랑스5072": ": '프랑스",
      "34일5073": ": '3-4일",
      "80120만원5074": ": '80-120만원",
      "여름가을5075": ": '여름,가을",
      "런던5076": ": '런던",
      "영국5077": ": '영국",
      "57일5078": ": '5-7일",
      "120180만원5079": ": '120-180만원",
      "여름가을5080": ": '여름,가을",
      "에든버러5081": ": '에든버러",
      "영국5082": ": '영국",
      "23일5083": ": '2-3일",
      "70100만원5084": ": '70-100만원",
      "여름가을5085": ": '여름,가을",
      "로마5086": ": '로마",
      "이탈리아5087": ": '이탈리아",
      "46일5088": ": '4-6일",
      "80120만원5089": ": '80-120만원",
      "봄가을5090": ": '봄,가을",
      "베네치아5091": ": '베네치아",
      "이탈리아5092": ": '이탈리아",
      "23일5093": ": '2-3일",
      "70110만원5094": ": '70-110만원",
      "봄가을5095": ": '봄,가을",
      "피렌체5096": ": '피렌체",
      "이탈리아5097": ": '이탈리아",
      "23일5098": ": '2-3일",
      "6090만원5099": ": '60-90만원",
      "봄가을5100": ": '봄,가을",
      "밀라노5101": ": '밀라노",
      "이탈리아5102": ": '이탈리아",
      "23일5103": ": '2-3일",
      "80120만원5104": ": '80-120만원",
      "봄가을5105": ": '봄,가을",
      "바르셀로나5106": ": '바르셀로나",
      "스페인5107": ": '스페인",
      "45일5108": ": '4-5일",
      "70100만원5109": ": '70-100만원",
      "봄가을5110": ": '봄,가을",
      "마드리드5111": ": '마드리드",
      "스페인5112": ": '스페인",
      "34일5113": ": '3-4일",
      "6090만원5114": ": '60-90만원",
      "봄가을5115": ": '봄,가을",
      "베를린5116": ": '베를린",
      "독일5117": ": '독일",
      "34일5118": ": '3-4일",
      "6090만원5119": ": '60-90만원",
      "여름가을5120": ": '여름,가을",
      "뮌헨5121": ": '뮌헨",
      "독일5122": ": '독일",
      "34일5123": ": '3-4일",
      "70100만원5124": ": '70-100만원",
      "여름가을5125": ": '여름,가을",
      "암스테르담5126": ": '암스테르담",
      "네덜란드5127": ": '네덜란드",
      "34일5128": ": '3-4일",
      "80110만원5129": ": '80-110만원",
      "봄여름5130": ": '봄,여름",
      "브뤼셀5131": ": '브뤼셀",
      "벨기에5132": ": '벨기에",
      "23일5133": ": '2-3일",
      "6090만원5134": ": '60-90만원",
      "봄여름5135": ": '봄,여름",
      "프라하5136": ": '프라하",
      "체코5137": ": '체코",
      "34일5138": ": '3-4일",
      "5070만원5139": ": '50-70만원",
      "봄가을5140": ": '봄,가을",
      "비엔나5141": ": '비엔나",
      "오스트리아5142": ": '오스트리아",
      "34일5143": ": '3-4일",
      "70100만원5144": ": '70-100만원",
      "봄가을5145": ": '봄,가을",
      "취리히5146": ": '취리히",
      "스위스5147": ": '스위스",
      "23일5148": ": '2-3일",
      "120180만원5149": ": '120-180만원",
      "여름가을5150": ": '여름,가을",
      "스톡홀름5151": ": '스톡홀름",
      "스웨덴5152": ": '스웨덴",
      "34일5153": ": '3-4일",
      "80120만원5154": ": '80-120만원",
      "여름가을5155": ": '여름,가을",
      "코펜하겐5156": ": '코펜하겐",
      "덴마크5157": ": '덴마크",
      "23일5158": ": '2-3일",
      "80120만원5159": ": '80-120만원",
      "여름가을5160": ": '여름,가을",
      "헬싱키5161": ": '헬싱키",
      "핀란드5162": ": '핀란드",
      "23일5163": ": '2-3일",
      "70100만원5164": ": '70-100만원",
      "여름겨울5165": ": '여름,겨울",
      "리스본5166": ": '리스본",
      "포르투갈5167": ": '포르투갈",
      "34일5168": ": '3-4일",
      "6080만원5169": ": '60-80만원",
      "봄가을5170": ": '봄,가을",
      "뉴욕5171": ": '뉴욕",
      "미국5172": ": '미국",
      "57일5173": ": '5-7일",
      "150250만원5174": ": '150-250만원",
      "봄가을5175": ": '봄,가을",
      "로스앤젤레스5176": ": '로스앤젤레스",
      "미국5177": ": '미국",
      "46일5178": ": '4-6일",
      "120200만원5179": ": '120-200만원",
      "봄가을5180": ": '봄,가을",
      "라스베이거스5181": ": '라스베이거스",
      "미국5182": ": '미국",
      "34일5183": ": '3-4일",
      "100150만원5184": ": '100-150만원",
      "봄가을5185": ": '봄,가을",
      "샌프란시스코5186": ": '샌프란시스코",
      "미국5187": ": '미국",
      "34일5188": ": '3-4일",
      "120180만원5189": ": '120-180만원",
      "여름가을5190": ": '여름,가을",
      "토론토5191": ": '토론토",
      "캐나다5192": ": '캐나다",
      "34일5193": ": '3-4일",
      "80120만원5194": ": '80-120만원",
      "여름가을5195": ": '여름,가을",
      "밴쿠버5196": ": '밴쿠버",
      "캐나다5197": ": '캐나다",
      "34일5198": ": '3-4일",
      "80120만원5199": ": '80-120만원",
      "여름가을5200": ": '여름,가을",
      "멕시코시티5201": ": '멕시코시티",
      "멕시코5202": ": '멕시코",
      "45일5203": ": '4-5일",
      "6090만원5204": ": '60-90만원",
      "겨울봄5205": ": '겨울,봄",
      "칸쿤5206": ": '칸쿤",
      "멕시코5207": ": '멕시코",
      "57일5208": ": '5-7일",
      "80120만원5209": ": '80-120만원",
      "겨울봄5210": ": '겨울,봄",
      "부에노스아이레스5211": ": '부에노스아이레스",
      "아르헨티나5212": ": '아르헨티나",
      "45일5213": ": '4-5일",
      "70100만원5214": ": '70-100만원",
      "봄가을5215": ": '봄,가을",
      "리우데자네이루5216": ": '리우데자네이루",
      "브라질5217": ": '브라질",
      "46일5218": ": '4-6일",
      "80120만원5219": ": '80-120만원",
      "봄가을5220": ": '봄,가을",
      "5080만원5221": ": '50-80만원",
      "대한민국5223": "🇰🇷 대한민국",
      "미국5224": "🇺🇸 미국",
      "일본5225": "🇯🇵 일본",
      "중국5226": "🇨🇳 중국",
      "기타국가5227": "기타 국가",
      "여행목적5228": "여행 목적",
      "관광5229": "관광",
      "출장5230": "출장",
      "디지털노마드5231": "디지털노마드",
      "장기체류5232": "장기체류",
      "학업5233": "학업",
      "체류기간5234": "체류 기간",
      "1주이내5235": "1주 이내",
      "1개월이내5236": "1개월 이내",
      "3개월이내5237": "3개월 이내",
      "6개월이내5238": "6개월 이내",
      "1년이상5239": "1년 이상",
      "인기여행지5241": "인기 여행지",
      "비자정보5242": "비자 정보",
      "무비자5243": "무비자",
      "infomaxdays일5244": "{info.maxDays}일",
      "비자필요5245": "비자 필요",
      "infodifficultyeasy5246": "{info.difficulty === 'easy' ? '쉬움' : info.difficulty === 'medium' ? '보통' : '어려움'}",
      "필수서류5247": "필수 서류",
      "디지털노마드가능5248": "디지털노마드 가능",
      "infocountry여행가이드보기5249": "{info.country} 여행 가이드 보기",
      "디지털노마드5250": "디지털노마드",
      "전용비자5251": "전용 비자",
      "원격근무자를위한특별비자프로그램5252": "원격근무자를 위한 특별 비자 프로그램",
      "체류기간5253": "체류기간:",
      "최소소득5254": "최소소득:",
      "노마드계산기로분석5255": "노마드 계산기로 분석",
      "전체노마드도시비교하기5256": "전체 노마드 도시 비교하기",
      "비자신청5257": "비자 신청",
      "필수팁5258": "필수 팁",
      "반드시확인할것5259": "✅ 반드시 확인할 것",
      "여권유효기간6개월이상남아있는지5260": "• 여권 유효기간 6개월 이상 남아있는지",
      "왕복항공권또는제3국출국티켓5261": "• 왕복 항공권 또는 제3국 출국 티켓",
      "충분한체재비증명은행잔고증명서5262": "• 충분한 체재비 증명 (은행 잔고증명서)",
      "여행자보험가입확인5263": "• 여행자 보험 가입 확인",
      "숙박예약확인서5264": "• 숙박 예약 확인서",
      "주의사항5265": "⚠️ 주의사항",
      "무비자무조건입국가능5266": "• 무비자 ≠ 무조건 입국 가능",
      "출입국관리소재량으로입국거부가능5267": "• 출입국 관리소 재량으로 입국 거부 가능",
      "코로나19등상황에따라변경가능5268": "• 코로나19 등 상황에 따라 변경 가능",
      "여권에충분한빈페이지필요5269": "• 여권에 충분한 빈 페이지 필요",
      "유용한팁5270": "💡 유용한 팁",
      "출발전외교부여행경보확인5271": "• 출발 전 외교부 여행경보 확인",
      "대사관웹사이트에서최신정보확인5272": "• 대사관 웹사이트에서 최신 정보 확인",
      "여행일정표준비영문또는현지어5273": "• 여행 일정표 준비 (영문 또는 현지어)",
      "출입국카드미리작성하기5274": "• 출입국 카드 미리 작성하기",
      "중요서류사본준비5275": "• 중요 서류 사본 준비",
      "피해야할것5276": "🚫 피해야 할 것",
      "만료임박한여권으로출국5277": "• 만료 임박한 여권으로 출국",
      "불법취업가능성의심받을행동5278": "• 불법 취업 가능성 의심받을 행동",
      "거짓정보제공5279": "• 거짓 정보 제공",
      "과도한현금소지신고필요5280": "• 과도한 현금 소지 (신고 필요)",
      "금지품목휴대5281": "• 금지 품목 휴대",
      "비자준비완료5282": "비자 준비 완료!",
      "이제여행가이드와함께5283": "이제 여행 가이드와 함께",
      "출입국준비가끝났다면그나라에서만경험할수있는5284": "출입국 준비가 끝났다면, 그 나라에서만 경험할 수 있는 특별한 이야기와 문화를 AI 가이드가 안내해드립니다",
      "현지문화체험5285": "현지 문화 체험",
      "단순관광이아닌그나라의깊은역사와문화이해5286": "단순 관광이 아닌 그 나라의 깊은 역사와 문화 이해",
      "현지인관점5287": "현지인 관점",
      "현지인만아는숨겨진명소와생활꿀팁5288": "현지인만 아는 숨겨진 명소와 생활 꿀팁",
      "안전여행팁5289": "안전 여행 팁",
      "현지상황과주의사항을실시간으로안내5290": "현지 상황과 주의사항을 실시간으로 안내",
      "여행가이드시작하기5291": "여행 가이드 시작하기",
      "비자체커전세계비자요구사항확인triprad5292": "비자 체커 | 전세계 비자 요구사항 확인 TripRadio.AI",
      "여행계획전필수목적지별비자요구사항디5293": "✈️ 여행 계획 전 필수! 목적지별 비자 요구사항, 디지털노마드 비자, 무비자 여행 정보를 한 번에 확인하세요",
      "비자체커5294": "비자 체커",
      "비자확인5295": "비자 확인",
      "무비자여행5296": "무비자 여행",
      "디지털노마드비자5297": "디지털노마드 비자",
      "여행비자5298": "여행 비자",
      "비자신청5299": "비자 신청",
      "출입국정보5300": "출입국 정보",
      "여권요구사항5301": "여권 요구사항",
      "비자프리5302": "비자 프리",
      "50개국가대규모비자정보데이터5303": "] ) }; // 50개 국가 대규모 비자 정보 데이터 (한국 기준, 2024년) const visaInfo = [ // 아시아 태평양 (무비자/비자 면제) { country:",
      "유효한여권5304": "유효한 여권",
      "왕복항공권5305": "왕복 항공권",
      "체류비증명5306": "체류비 증명",
      "일본어5307": "일본어",
      "태국5308": "태국",
      "유효한여권6개월이상5309": "유효한 여권 (6개월 이상)",
      "출국티켓증명5310": "출국 티켓 증명",
      "ltr비자5311": "LTR 비자",
      "태국어5312": "태국어",
      "싱가포르5313": "싱가포르",
      "유효한여권5314": "유효한 여권",
      "충분한체재비증명5315": "충분한 체재비 증명",
      "영어5316": "영어",
      "말레이시아5317": "말레이시아",
      "유효한여권6개월이상5318": "유효한 여권 (6개월 이상)",
      "출국티켓5319": "출국 티켓",
      "derantau프로그램5320": "DE Rantau 프로그램",
      "말레이어영어5321": "말레이어/영어",
      "인도네시아5322": "인도네시아",
      "유효한여권6개월이상5323": "유효한 여권 (6개월 이상)",
      "출국티켓5324": "출국 티켓",
      "b213a비자5325": "B213A 비자",
      "인도네시아어5326": "인도네시아어",
      "베트남5327": "베트남",
      "유효한여권6개월이상5328": "유효한 여권 (6개월 이상)",
      "출국티켓5329": "출국 티켓",
      "베트남어5330": "베트남어",
      "필리핀5331": "필리핀",
      "유효한여권6개월이상5332": "유효한 여권 (6개월 이상)",
      "왕복항공권5333": "왕복 항공권",
      "타갈로그어영어5334": "타갈로그어/영어",
      "중국5335": "중국",
      "관광비자필요5336": "관광비자 필요",
      "초청장5337": "초청장",
      "호텔예약5338": "호텔 예약",
      "왕복항공권5339": "왕복 항공권",
      "중국어5340": "중국어",
      "인도5341": "인도",
      "e비자또는관광비자5342": "e-비자 또는 관광비자",
      "호텔예약5343": "호텔 예약",
      "예방접종증명5344": "예방접종 증명",
      "힌디어영어5345": "힌디어/영어",
      "홍콩5346": "홍콩",
      "유효한여권5347": "유효한 여권",
      "출국티켓5348": "출국 티켓",
      "중국어영어5349": "중국어/영어",
      "마카오5350": "마카오",
      "유효한여권5351": "유효한 여권",
      "중국어포르투갈어5352": "중국어/포르투갈어",
      "대만5353": "대만",
      "유효한여권5354": "유효한 여권",
      "왕복항공권5355": "왕복 항공권",
      "중국어5356": "중국어",
      "유럽솅겐eucountry5357": "}, // 유럽 (솅겐/EU) { country:",
      "유효한여권5358": "유효한 여권",
      "숙박예약5359": "숙박 예약",
      "여행보험5360": "여행 보험",
      "독일어5361": "독일어",
      "프랑스5362": "프랑스",
      "유효한여권5363": "유효한 여권",
      "숙박증명5364": "숙박 증명",
      "여행보험5365": "여행 보험",
      "충분한자금5366": "충분한 자금",
      "프랑스어5367": "프랑스어",
      "이탈리아5368": "이탈리아",
      "유효한여권5369": "유효한 여권",
      "숙박증명5370": "숙박 증명",
      "여행보험5371": "여행 보험",
      "이탈리아어5372": "이탈리아어",
      "스페인5373": "스페인",
      "유효한여권5374": "유효한 여권",
      "숙박증명5375": "숙박 증명",
      "여행보험5376": "여행 보험",
      "스페인어5377": "스페인어",
      "포르투갈5378": "포르투갈",
      "유효한여권5379": "유효한 여권",
      "숙박증명5380": "숙박 증명",
      "충분한자금5381": "충분한 자금",
      "d7비자5382": "D7 비자",
      "포르투갈어5383": "포르투갈어",
      "네덜란드5384": "네덜란드",
      "유효한여권5385": "유효한 여권",
      "숙박증명5386": "숙박 증명",
      "여행보험5387": "여행 보험",
      "충분한자금5388": "충분한 자금",
      "네덜란드어5389": "네덜란드어",
      "영국5390": "영국",
      "유효한여권5391": "유효한 여권",
      "왕복항공권5392": "왕복 항공권",
      "충분한자금5393": "충분한 자금",
      "영어5394": "영어",
      "스위스5395": "스위스",
      "유효한여권5396": "유효한 여권",
      "숙박증명5397": "숙박 증명",
      "여행보험5398": "여행 보험",
      "충분한자금5399": "충분한 자금",
      "독일어프랑스어5400": "독일어/프랑스어",
      "오스트리아5401": "오스트리아",
      "유효한여권5402": "유효한 여권",
      "숙박증명5403": "숙박 증명",
      "여행보험5404": "여행 보험",
      "독일어5405": "독일어",
      "체코5406": "체코",
      "유효한여권5407": "유효한 여권",
      "숙박증명5408": "숙박 증명",
      "여행보험5409": "여행 보험",
      "체코어5410": "체코어",
      "헝가리5411": "헝가리",
      "유효한여권5412": "유효한 여권",
      "숙박증명5413": "숙박 증명",
      "여행보험5414": "여행 보험",
      "헝가리어5415": "헝가리어",
      "폴란드5416": "폴란드",
      "유효한여권5417": "유효한 여권",
      "숙박증명5418": "숙박 증명",
      "여행보험5419": "여행 보험",
      "폴란드어5420": "폴란드어",
      "그리스5421": "그리스",
      "유효한여권5422": "유효한 여권",
      "숙박증명5423": "숙박 증명",
      "여행보험5424": "여행 보험",
      "그리스어5425": "그리스어",
      "조지아5426": "조지아",
      "유효한여권5427": "유효한 여권",
      "1년무비자5428": "1년 무비자",
      "조지아어5429": "조지아어",
      "에스토니아5430": "에스토니아",
      "유효한여권5431": "유효한 여권",
      "숙박증명5432": "숙박 증명",
      "여행보험5433": "여행 보험",
      "에스토니아어5434": "에스토니아어",
      "아메리카country5435": "}, // 아메리카 { country:",
      "esta승인5436": "ESTA 승인",
      "유효한여권5437": "유효한 여권",
      "왕복항공권5438": "왕복 항공권",
      "영어5439": "영어",
      "캐나다5440": "캐나다",
      "eta승인5441": "eTA 승인",
      "유효한여권5442": "유효한 여권",
      "왕복항공권5443": "왕복 항공권",
      "영어프랑스어5444": "영어/프랑스어",
      "멕시코5445": "멕시코",
      "유효한여권5446": "유효한 여권",
      "출국티켓5447": "출국 티켓",
      "스페인어5448": "스페인어",
      "브라질5449": "브라질",
      "유효한여권5450": "유효한 여권",
      "황열병예방접종5451": "황열병 예방접종",
      "포르투갈어5452": "포르투갈어",
      "아르헨티나5453": "아르헨티나",
      "유효한여권5454": "유효한 여권",
      "스페인어5455": "스페인어",
      "칠레5456": "칠레",
      "유효한여권5457": "유효한 여권",
      "출국티켓5458": "출국 티켓",
      "스페인어5459": "스페인어",
      "콜롬비아5460": "콜롬비아",
      "유효한여권5461": "유효한 여권",
      "황열병예방접종5462": "황열병 예방접종",
      "스페인어5463": "스페인어",
      "페루5464": "페루",
      "유효한여권5465": "유효한 여권",
      "황열병예방접종5466": "황열병 예방접종",
      "스페인어5467": "스페인어",
      "중동country5468": "}, // 중동 { country:",
      "유효한여권6개월이상5469": "유효한 여권 (6개월 이상)",
      "아랍어영어5470": "아랍어/영어",
      "카타르5471": "카타르",
      "유효한여권5472": "유효한 여권",
      "왕복항공권5473": "왕복 항공권",
      "아랍어5474": "아랍어",
      "이스라엘5475": "이스라엘",
      "유효한여권5476": "유효한 여권",
      "왕복항공권5477": "왕복 항공권",
      "히브리어5478": "히브리어",
      "터키5479": "터키",
      "유효한여권6개월이상5480": "유효한 여권 (6개월 이상)",
      "터키어5481": "터키어",
      "아프리카country5482": "}, // 아프리카 { country:",
      "유효한여권5483": "유효한 여권",
      "황열병예방접종5484": "황열병 예방접종",
      "영어아프리칸스어5485": "영어/아프리칸스어",
      "모로코5486": "모로코",
      "유효한여권6개월이상5487": "유효한 여권 (6개월 이상)",
      "아랍어프랑스어5488": "아랍어/프랑스어",
      "이집트5489": "이집트",
      "도착비자또는사전비자5490": "도착비자 또는 사전 비자",
      "유효한여권5491": "유효한 여권",
      "아랍어5492": "아랍어",
      "오세아니아country5493": "}, // 오세아니아 { country:",
      "eta또는evisitor5494": "ETA 또는 eVisitor",
      "유효한여권5495": "유효한 여권",
      "건강검진5496": "건강검진",
      "영어5497": "영어",
      "뉴질랜드5498": "뉴질랜드",
      "유효한여권5499": "유효한 여권",
      "관광세지불5500": "관광세 지불",
      "영어5501": "영어",
      "피지5502": "피지",
      "유효한여권5503": "유효한 여권",
      "왕복항공권5504": "왕복 항공권",
      "영어피지어5505": "영어/피지어",
      "추가유럽국가들country5506": "}, // 추가 유럽 국가들 { country:",
      "유효한여권5507": "유효한 여권",
      "충분한자금5508": "충분한 자금",
      "여행보험5509": "여행 보험",
      "노르웨이어5510": "노르웨이어",
      "스웨덴5511": "스웨덴",
      "유효한여권5512": "유효한 여권",
      "충분한자금5513": "충분한 자금",
      "여행보험5514": "여행 보험",
      "스웨덴어5515": "스웨덴어",
      "덴마크5516": "덴마크",
      "유효한여권5517": "유효한 여권",
      "충분한자금5518": "충분한 자금",
      "여행보험5519": "여행 보험",
      "덴마크어5520": "덴마크어",
      "핀란드5521": "핀란드",
      "유효한여권5522": "유효한 여권",
      "충분한자금5523": "충분한 자금",
      "여행보험5524": "여행 보험",
      "핀란드어5525": "핀란드어",
      "아이슬란드5526": "아이슬란드",
      "유효한여권5527": "유효한 여권",
      "충분한자금5528": "충분한 자금",
      "여행보험5529": "여행 보험",
      "아이슬란드어5530": "아이슬란드어",
      "추가아시아국가들country5531": "}, // 추가 아시아 국가들 { country:",
      "eta비자5532": "ETA 비자",
      "유효한여권5533": "유효한 여권",
      "싱할라어타밀어5534": "싱할라어/타밀어",
      "방글라데시5535": "방글라데시",
      "비자필요5536": "비자 필요",
      "초청장5537": "초청장",
      "예방접종증명5538": "예방접종 증명",
      "벵골어5539": "벵골어",
      "에스토니아5540": "에스토니아",
      "1년5541": "1년",
      "3500월5542": "$3,500/월",
      "포르투갈5543": "포르투갈",
      "2년5544": "2년",
      "2800월5545": "$2,800/월",
      "바베이도스5546": "바베이도스",
      "1년5547": "1년",
      "50000년5548": "$50,000/년",
      "두바이5549": "두바이",
      "1년리모트워크비자5550": "1년 리모트 워크 비자",
      "1년5551": "1년",
      "5000월5552": "$5,000/월",
      "멕시코5553": "멕시코",
      "1년5554": "1년",
      "2700월5555": "$2,700/월",
      "비자체커5556": "비자 체커",
      "대한민국optionoptionval5565": "🇰🇷 대한민국</option> <option value=",
      "미국optionoptionvalue5566": "🇺🇸 미국</option> <option value=",
      "일본optionoptionvalue5567": "🇯🇵 일본</option> <option value=",
      "중국optionoptionvalue5568": "🇨🇳 중국</option> <option value=",
      "기타국가optionselectdiv5569": "기타 국가</option> </select> </div> <div> <label className=",
      "예일본태국미국5570": "예: 일본, 태국, 미국...",
      "여행목적labelselectclassnam5571": "여행 목적</label> <select className=",
      "option관광optionoption출장5572": "<option>관광</option> <option>출장</option> <option>디지털노마드</option> <option>장기체류</option> <option>학업</option> </select> </div> <div> <label className=",
      "체류기간labelselectclassnam5573": "체류 기간</label> <select className=",
      "option1주이내optionoption5574": "<option>1주 이내</option> <option>1개월 이내</option> <option>3개월 이내</option> <option>6개월 이내</option> <option>1년 이상</option> </select> </div> <div className=",
      "인기여행지spanclassname5576": "인기 여행지 <span className=",
      "비자정보spanh2divclassn5577": "비자 정보</span> </h2> <div className=",
      "무비자divspanclassname5578": "무비자 </div> <span className=",
      "infomaxdays일spandiv5579": "{info.maxDays}일</span> </div> ) : ( <div className=",
      "비자필요divdivdiv5580": "비자 필요 </div> )} </div> </div> <div className={`px-2 py-1 rounded-full text-xs ${ info.difficulty ===",
      "쉬움5581": "쉬움",
      "보통5582": "보통",
      "어려움5583": "어려움",
      "필수서류h4ulclassname5584": "필수 서류</h4> <ul className=",
      "디지털노마드가능spandivinfo5585": "디지털노마드 가능</span> </div> {info.nomadVisa && ( <p className=",
      "infocountry여행가이드보기lin5586": "{info.country} 여행 가이드 보기 </Link> </div> ))} </div> </div> </section> {/* Digital Nomad Visas */} <section className=",
      "디지털노마드spanclassname5587": "디지털노마드 <span className=",
      "전용비자spanh2pclassnam5588": "전용 비자</span> </h2> <p className=",
      "원격근무자를위한특별비자프로그램pdiv5589": "원격근무자를 위한 특별 비자 프로그램</p> </div> <div className=",
      "체류기간spanspanclassname5590": "체류기간:</span> <span className=",
      "최소소득spanspanclassname5591": "최소소득:</span> <span className=",
      "노마드계산기로분석linkdiv5592": "노마드 계산기로 분석 </Link> </div> ))} </div> <div className=",
      "전체노마드도시비교하기svgclassname5593": "전체 노마드 도시 비교하기 <svg className=",
      "비자신청spanclassname5594": "비자 신청 <span className=",
      "필수팁spanh2divclassna5595": "필수 팁</span> </h2> <div className=",
      "반드시확인할것h3ulclassname5596": "✅ 반드시 확인할 것</h3> <ul className=",
      "li여권유효기간6개월이상남아있는지li5597": "<li>• 여권 유효기간 6개월 이상 남아있는지</li> <li>• 왕복 항공권 또는 제3국 출국 티켓</li> <li>• 충분한 체재비 증명 (은행 잔고증명서)</li> <li>• 여행자 보험 가입 확인</li> <li>• 숙박 예약 확인서</li> </ul> </div> <div className=",
      "주의사항h3ulclassname5598": "⚠️ 주의사항</h3> <ul className=",
      "li무비자무조건입국가능lili5599": "<li>• 무비자 ≠ 무조건 입국 가능</li> <li>• 출입국 관리소 재량으로 입국 거부 가능</li> <li>• 코로나19 등 상황에 따라 변경 가능</li> <li>• 여권에 충분한 빈 페이지 필요</li> </ul> </div> </div> <div className=",
      "유용한팁h3ulclassname5600": "💡 유용한 팁</h3> <ul className=",
      "li출발전외교부여행경보확인lil5601": "<li>• 출발 전 외교부 여행경보 확인</li> <li>• 대사관 웹사이트에서 최신 정보 확인</li> <li>• 여행 일정표 준비 (영문 또는 현지어)</li> <li>• 출입국 카드 미리 작성하기</li> <li>• 중요 서류 사본 준비</li> </ul> </div> <div className=",
      "피해야할것h3ulclassname5602": "🚫 피해야 할 것</h3> <ul className=",
      "li만료임박한여권으로출국lili5603": "<li>• 만료 임박한 여권으로 출국</li> <li>• 불법 취업 가능성 의심받을 행동</li> <li>• 거짓 정보 제공</li> <li>• 과도한 현금 소지 (신고 필요)</li> <li>• 금지 품목 휴대</li> </ul> </div> </div> </div> </div> </div> </section> {/* Travel Guide Integration */} <section className=",
      "비자준비완료spanclassname5604": "비자 준비 완료! <span className=",
      "이제여행가이드와함께spanh2p5605": "이제 여행 가이드와 함께</span> </h2> <p className=",
      "출입국준비가끝났다면그나라에서만경험할수있는5606": "출입국 준비가 끝났다면, 그 나라에서만 경험할 수 있는 특별한 이야기와 문화를 AI 가이드가 안내해드립니다 </p> <div className=",
      "현지문화체험h3pclassname5607": "현지 문화 체험</h3> <p className=",
      "단순관광이아닌그나라의깊은역사와문화이해5608": "단순 관광이 아닌 그 나라의 깊은 역사와 문화 이해</p> </div> <div className=",
      "현지인관점h3pclassname5609": "현지인 관점</h3> <p className=",
      "현지인만아는숨겨진명소와생활꿀팁pdi5610": "현지인만 아는 숨겨진 명소와 생활 꿀팁</p> </div> <div className=",
      "안전여행팁h3pclassname5611": "안전 여행 팁</h3> <p className=",
      "현지상황과주의사항을실시간으로안내pdi5612": "현지 상황과 주의사항을 실시간으로 안내</p> </div> </div> <Link href=",
      "infodifficultyeasy5613": "}> {info.difficulty === 'easy' ? '쉬움' : info.difficulty === 'medium' ? '보통' : '어려움'} </div> </div> <div className=\"mb-4\"> <h4 className=\"text-sm font-medium text-gray-900 mb-2\">필수 서류</h4> <ul className=\"space-y-1\"> {info.requirements.map((req, reqIndex) => ( <li key={reqIndex} className=\"text-sm text-gray-600 flex items-start gap-2\"> <div className=\"w-4 h-4 rounded-full bg-gray-200 flex items-center justify-center flex-shrink-0 mt-0.5\"> <div className=\"w-2 h-2 bg-gray-600 rounded-full\"></div> </div> <span>{req}</span> </li> ))} </ul> </div> {info.digitalNomad && ( <div className=\"mb-4 p-3 bg-blue-50 rounded-lg\"> <div className=\"flex items-center gap-2 mb-1\"> <div className=\"text-sm\">💻</div> <span className=\"text-sm font-medium text-blue-800\">디지털노마드 가능</span> </div> {info.nomadVisa && ( <p className=\"text-xs text-blue-600\">{info.nomadVisa}</p> )} </div> )} <Link href={",
      "classnamewfullbggray105614": "} className=\"w-full bg-gray-100 text-gray-700 py-2 px-4 rounded text-center block hover:bg-gray-200 transition-colors text-sm\" > {info.country} 여행 가이드 보기 </Link> </div> ))} </div> </div> </section> {/* Digital Nomad Visas */} <section className=\"py-16 bg-gray-50\"> <div className=\"container mx-auto px-6\"> <div className=\"max-w-4xl mx-auto text-center mb-12\"> <h2 className=\"text-3xl font-light text-gray-900 mb-4\"> 디지털노마드 <span className=\"font-semibold\">전용 비자</span> </h2> <p className=\"text-gray-600\">원격근무자를 위한 특별 비자 프로그램</p> </div> <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-5xl mx-auto\"> {nomadVisaCountries.map((country, index) => ( <div key={index} className=\"bg-white p-6 rounded-lg border border-gray-200 hover:shadow-lg transition-all duration-300\"> <div className=\"flex items-center gap-3 mb-4\"> <div className=\"text-3xl\">{country.flag}</div> <div> <h3 className=\"font-medium text-gray-900\">{country.country}</h3> <p className=\"text-sm text-gray-600\">{country.visa}</p> </div> </div> <div className=\"space-y-2 mb-4 text-sm\"> <div className=\"flex justify-between\"> <span className=\"text-gray-600\">체류기간:</span> <span className=\"font-medium\">{country.duration}</span> </div> <div className=\"flex justify-between\"> <span className=\"text-gray-600\">최소소득:</span> <span className=\"font-medium\">{country.minIncome}</span> </div> </div> <Link href={",
      "일본5615": ": '일본",
      "일본어5616": ": '일본어",
      "태국5617": ": '태국",
      "ltr비자5618": ": 'LTR 비자",
      "태국어5619": ": '태국어",
      "싱가포르5620": ": '싱가포르",
      "영어5621": ": '영어",
      "말레이시아5622": ": '말레이시아",
      "derantau프로그램5623": ": 'DE Rantau 프로그램",
      "말레이어영어5624": ": '말레이어/영어",
      "인도네시아5625": ": '인도네시아",
      "b213a비자5626": ": 'B213A 비자",
      "인도네시아어5627": ": '인도네시아어",
      "베트남5628": ": '베트남",
      "베트남어5629": ": '베트남어",
      "필리핀5630": ": '필리핀",
      "타갈로그어영어5631": ": '타갈로그어/영어",
      "중국5632": ": '중국",
      "중국어5633": ": '중국어",
      "인도5634": ": '인도",
      "힌디어영어5635": ": '힌디어/영어",
      "홍콩5636": ": '홍콩",
      "중국어영어5637": ": '중국어/영어",
      "마카오5638": ": '마카오",
      "중국어포르투갈어5639": ": '중국어/포르투갈어",
      "대만5640": ": '대만",
      "중국어5641": ": '중국어",
      "독일5642": ": '독일",
      "독일어5643": ": '독일어",
      "프랑스5644": ": '프랑스",
      "프랑스어5645": ": '프랑스어",
      "이탈리아5646": ": '이탈리아",
      "이탈리아어5647": ": '이탈리아어",
      "스페인5648": ": '스페인",
      "스페인어5649": ": '스페인어",
      "포르투갈5650": ": '포르투갈",
      "d7비자5651": ": 'D7 비자",
      "포르투갈어5652": ": '포르투갈어",
      "네덜란드5653": ": '네덜란드",
      "네덜란드어5654": ": '네덜란드어",
      "영국5655": ": '영국",
      "영어5656": ": '영어",
      "스위스5657": ": '스위스",
      "독일어프랑스어5658": ": '독일어/프랑스어",
      "오스트리아5659": ": '오스트리아",
      "독일어5660": ": '독일어",
      "체코5661": ": '체코",
      "체코어5662": ": '체코어",
      "헝가리5663": ": '헝가리",
      "헝가리어5664": ": '헝가리어",
      "폴란드5665": ": '폴란드",
      "폴란드어5666": ": '폴란드어",
      "그리스5667": ": '그리스",
      "그리스어5668": ": '그리스어",
      "조지아5669": ": '조지아",
      "1년무비자5670": ": '1년 무비자",
      "조지아어5671": ": '조지아어",
      "에스토니아5672": ": '에스토니아",
      "에스토니아어5673": ": '에스토니아어",
      "미국5674": ": '미국",
      "영어5675": ": '영어",
      "캐나다5676": ": '캐나다",
      "영어프랑스어5677": ": '영어/프랑스어",
      "멕시코5678": ": '멕시코",
      "스페인어5679": ": '스페인어",
      "브라질5680": ": '브라질",
      "포르투갈어5681": ": '포르투갈어",
      "아르헨티나5682": ": '아르헨티나",
      "스페인어5683": ": '스페인어",
      "칠레5684": ": '칠레",
      "스페인어5685": ": '스페인어",
      "콜롬비아5686": ": '콜롬비아",
      "스페인어5687": ": '스페인어",
      "페루5688": ": '페루",
      "스페인어5689": ": '스페인어",
      "uae두바이5690": ": 'UAE (두바이)",
      "아랍어영어5691": ": '아랍어/영어",
      "카타르5692": ": '카타르",
      "아랍어5693": ": '아랍어",
      "이스라엘5694": ": '이스라엘",
      "히브리어5695": ": '히브리어",
      "터키5696": ": '터키",
      "터키어5697": ": '터키어",
      "남아프리카5698": ": '남아프리카",
      "영어아프리칸스어5699": ": '영어/아프리칸스어",
      "모로코5700": ": '모로코",
      "아랍어프랑스어5701": ": '아랍어/프랑스어",
      "이집트5702": ": '이집트",
      "아랍어5703": ": '아랍어",
      "호주5704": ": '호주",
      "영어5705": ": '영어",
      "뉴질랜드5706": ": '뉴질랜드",
      "영어5707": ": '영어",
      "피지5708": ": '피지",
      "영어피지어5709": ": '영어/피지어",
      "노르웨이5710": ": '노르웨이",
      "노르웨이어5711": ": '노르웨이어",
      "스웨덴5712": ": '스웨덴",
      "스웨덴어5713": ": '스웨덴어",
      "덴마크5714": ": '덴마크",
      "덴마크어5715": ": '덴마크어",
      "핀란드5716": ": '핀란드",
      "핀란드어5717": ": '핀란드어",
      "아이슬란드5718": ": '아이슬란드",
      "아이슬란드어5719": ": '아이슬란드어",
      "스리랑카5720": ": '스리랑카",
      "싱할라어타밀어5721": ": '싱할라어/타밀어",
      "방글라데시5722": ": '방글라데시",
      "벵골어5723": ": '벵골어",
      "에스토니아5724": ": '에스토니아",
      "1년5725": ": '1년",
      "3500월5726": ": '$3,500/월",
      "포르투갈5727": ": '포르투갈",
      "2년5728": ": '2년",
      "2800월5729": ": '$2,800/월",
      "바베이도스5730": ": '바베이도스",
      "1년5731": ": '1년",
      "50000년5732": ": '$50,000/년",
      "두바이5733": ": '두바이",
      "1년리모트워크비자5734": ": '1년 리모트 워크 비자",
      "1년5735": ": '1년",
      "5000월5736": ": '$5,000/월",
      "멕시코5737": ": '멕시코",
      "1년5738": ": '1년",
      "2700월5739": ": '$2,700/월",
      "어려움5740": ": '어려움"
    },
    "filter": {
      "setlocationfilteretargetval14": "setLocationFilter(e.target.value)} placeholder=\"예: 경복궁\" className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\" disabled={isRunning} />",
      "진행상황조회constfetchprog30": "); // 진행 상황 조회 const fetchProgress = async () => { try { const url = locationFilter ? `/api/coordinates/migrate?location=${encodeURIComponent(locationFilter)}` :",
      "예경복궁45": "예: 경복궁",
      "apicoordinatesmigrate59": ": '/api/coordinates/migrate'; const response = await fetch(url); const result = await response.json(); if (result.success) { setProgress(result.data); } } catch (error) { console.error('진행 상황 조회 실패:', error); } }; // 페이지 로드 시 진행 상황 조회 useEffect(() => { fetchProgress(); }, [locationFilter]); // 마이그레이션 실행 const runMigration = async () => { if (isRunning) return; setIsRunning(true); setStats(null); setLogs([]); try { let offset = 0; let hasMore = true; let totalStats: MigrationStats = { processed: 0, success: 0, failed: 0, skipped: 0, errors: [] }; while (hasMore && isRunning) { const logMessage =",
      "index0인트로poi만표시2040": "index === 0) // 🎯 인트로 POI만 표시 (첫 번째만) .map(poi => ({ id: poi.id, name: poi.name, lat: poi.lat, lng: poi.lng, description: poi.description || '' }))} currentLocation={currentLocation} center={mapCenter} zoom={16} // 더 확대된 뷰 showRoute={false} // 루트 표시 안 함 showUserLocation={true} onPoiClick={(poiId) => { const poiIndex = poisWithChapters.findIndex(poi => poi.id === poiId); if (poiIndex !== -1) { setCurrentChapter(poiIndex); } }} className=\"w-full h-full\" locationName={locationName} guideCoordinates={undefined} // live 페이지에서는 POI 데이터 사용 /> ) : (",
      "returnnormalizedchapter2544": "}; return normalizedChapter; }); } // 🔍 최종 정규화 결과 확인 console.log(",
      "all개인화진단결과로드useef2766": "('all'); // 개인화 진단 결과 로드 useEffect(() => { try { const saved = localStorage.getItem('personalityDiagnosis'); if (saved) { setPersonalityResults(JSON.parse(saved)); } } catch (error) { console.error('개인화 진단 결과 로드 실패:', error); } }, []); // 개인화 진단 완료 핸들러 const handlePersonalityComplete = (results: any) => { setPersonalityResults(results); }; // 데이터 로드 useEffect(() => { const loadData = async () => { setIsLoading(true); try { const guides = getAllLocalGuides(); const stats = calculateUserStats(guides); setLocalGuides(guides); setUserStats(stats); // 파일 가이드는 향후 구현 setFileGuides([]); } catch (error) { console.error('데이터 로드 실패:', error); } finally { setIsLoading(false); } }; loadData(); }, []); // 인증 확인 if (status === 'loading') { return (",
      "검색및필터2773": "{/* 검색 및 필터 */}",
      "즐겨찾기헤더2781": "{/* 즐겨찾기 헤더 */}",
      "개인화진단결과로드useeffect2868": "); // 개인화 진단 결과 로드 useEffect(() => { try { const saved = localStorage.getItem(",
      "가이드2883": "가이드",
      "즐겨찾기헤더divclassname2892": "{/* 즐겨찾기 헤더 */} <div className=",
      "총filteredguideslength개3000": "총 ${filteredGuides.length}개",
      "모든예산3019": "모든 예산",
      "모든속도3020": "모든 속도",
      "상관없음3025": "상관없음",
      "저장됨savedcitieslength개3031": "저장됨 ({savedCities.length}개)",
      "선호도가저장되었습니다3167": "선호도가 저장되었습니다!",
      "모든예산optionoptionvalue3168": "모든 예산</option> <option value=",
      "모든속도optionoptionvalue3169": "모든 속도</option> <option value=",
      "상관없음optionoptionvalue3174": "상관없음</option> <option value=",
      "저장됨savedcitieslength개o3180": "저장됨 ({savedCities.length}개)</option> </select> </div> </div> </div> {/* Comparison View */} {compareMode && selectedCities.length > 0 && ( <div className=",
      "계획이삭제되었습니다4909": "계획이 삭제되었습니다."
    },
    "button": {
      "통계카드stats20": "{/* 통계 카드 */} {stats && (",
      "messagedivdiv116": "}`}> {message} </div> )} </div> {/* 통계 대시보드 */} {stats && ( <div className=",
      "messagedivdiv141": "}> {message} </div> )} </div> {/* 통계 대시보드 */} {stats && ( <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\"> <h2 className=\"text-xl font-semibold mb-4\">좌표 통계</h2> <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\"> <div className=\"text-center\"> <div className=\"text-2xl font-bold text-blue-600\">{stats.totalChapters}</div> <div className=\"text-sm text-gray-600\">전체 챕터</div> </div> <div className=\"text-center\"> <div className=\"text-2xl font-bold text-green-600\">{stats.withCoordinates}</div> <div className=\"text-sm text-gray-600\">좌표 보유</div> </div> <div className=\"text-center\"> <div className=\"text-2xl font-bold text-purple-600\">{stats.highAccuracy}</div> <div className=\"text-sm text-gray-600\">고정확도 (≥80%)</div> </div> <div className=\"text-center\"> <div className=\"text-2xl font-bold text-orange-600\">{stats.needsRegeneration}</div> <div className=\"text-sm text-gray-600\">재생성 필요</div> </div> </div> <div className=\"border-t pt-4\"> <div className=\"flex justify-between items-center\"> <span className=\"font-medium\">평균 정확도:</span> <span className=\"text-lg font-bold\">{(stats.averageAccuracy * 100).toFixed(1)}%</span> </div> <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\"> <div className=\"bg-blue-600 h-2 rounded-full\" style={{ width:",
      "routerpushclassnamet154": "router.push('/')} className=\"text-gray-500 hover:text-black transition-colors\" > ← 홈으로",
      "관리자대시보드155": "관리자 대시보드",
      "홈으로buttonh1classname209": "← 홈으로 </button> <h1 className=",
      "관리자대시보드h1divdivclas210": "관리자 대시보드</h1> </div> <div className=",
      "결과표시error263": "{/* 결과 표시 */} {error && (",
      "결과표시error336": "{/* 결과 표시 */} {error && (",
      "결과표시error401": "{/* 결과 표시 */} {error && (",
      "이전단계로돌아가기519": "{/* 이전 단계로 돌아가기 */}",
      "로그인폼authmode521": ")} {/* 로그인 폼 */} {authMode === 'signin' && (",
      "회원가입폼authmode522": ")} {/* 회원가입 폼 */} {authMode === 'signup' && signupStep === 'form' && (",
      "functionsignincontentc526": "; function SignInContent() { const { t, currentLanguage } = useLanguage(); // 로딩 상태 분리 관리 const [loadingStates, setLoadingStates] = useState({ googleSignIn: false, emailVerification: false, signup: false, generalSignIn: false }); const [authMode, setAuthMode] = useState",
      "더많은촬영지보기999": "더 많은 촬영지 보기",
      "constsavedjsonparseloc1042": "{ const saved = JSON.parse(localStorage.getItem('saved-film-locations') || '[]'); alert(`현재 ${saved.length}개의 촬영지가 저장되어 있습니다.`); }} className=\"bg-purple-100 text-purple-800 px-3 py-1 rounded text-xs hover:bg-purple-200 transition-colors\" > 저장된 장소 확인",
      "더많은촬영지보기buttondiv1443": "더 많은 촬영지 보기 </button> </div> </div> </section> {/* Interactive Features */} <section className=",
      "alert현재savedlength개의1486": "); alert(`현재 ${saved.length}개의 촬영지가 저장되어 있습니다.`); }} className=",
      "navigatorclipboardwritetex2020": "{ navigator.clipboard.writeText(`${poi.lat}, ${poi.lng}`); alert('좌표가 클립보드에 복사되었습니다!'); }} className=\"ml-auto text-blue-600 hover:text-blue-800 text-xs underline\" > 복사",
      "인트로가아닌경우방향안내강조i2021": "{/* 인트로가 아닌 경우 방향 안내 강조 */} {index > 0 && poi.audioChapter?.text && (",
      "navigatorclipboardwritetex2028": "{ navigator.clipboard.writeText(`${coord.lat}, ${coord.lng}`); alert('좌표가 클립보드에 복사되었습니다!'); }} className=\"text-xs bg-blue-100 text-blue-800 px-3 py-1 rounded-full hover:bg-blue-200 transition-colors\" > 복사",
      "constgooglemapsurlhttps2029": "{ const googleMapsUrl = `https://maps.google.com/?q=${coord.lat},${coord.lng}`; window.open(googleMapsUrl, '_blank'); }} className=\"text-xs bg-green-100 text-green-800 px-3 py-1 rounded-full hover:bg-green-200 transition-colors\" > 지도보기",
      "전체좌표복사버튼2030": "{/* 전체 좌표 복사 버튼 */}",
      "constallcoordscoordinate2031": "{ const allCoords = coordinatesInfo.map(coord => `${coord.name}: ${coord.lat.toFixed(6)}, ${coord.lng.toFixed(6)}` ).join(' '); navigator.clipboard.writeText(allCoords); alert('모든 좌표가 클립보드에 복사되었습니다!'); }} className=\"w-full bg-gray-100 hover:bg-gray-200 text-gray-800 py-2 px-4 rounded-lg transition-colors text-sm font-medium\" > 📋 전체 좌표 복사",
      "주의사항2032": "{/* 주의사항 */}",
      "실제실시간가이드기능시작setshowm2035": "{ // 실제 실시간 가이드 기능 시작 setShowMap(true); setShowAudioPlayer(true); }} className=\"bg-black text-white px-8 py-3 rounded-lg hover:bg-gray-800 transition-colors\" > {t('guide.startRealtimeGuide')}",
      "locationtracker시작후에만표2036": "{/* Location Tracker (시작 후에만 표시) */} {(showMap || showAudioPlayer) && (",
      "조건부스크롤버튼들2047": "{/* 조건부 스크롤 버튼들 */}",
      "홈버튼왼쪽하단2048": "{/* 홈 버튼 (왼쪽 하단) */}",
      "스크롤투탑버튼오른쪽하단2049": "{/* 스크롤 투 탑 버튼 (오른쪽 하단) */}",
      "강화된디버깅정보2050": "{/* 강화된 디버깅 정보 */}",
      "스크롤리스너등록2079": "스크롤 리스너 등록",
      "handlescrollpassivetru2080": ", handleScroll, { passive: true }); handleScroll(); // 초기 상태 확인 return () => { console.log(",
      "홈으로이동함수constgoto2082": "}); }; // 홈으로 이동 함수 const goToHome = () => { router.push(",
      "좌표가클립보드에복사되었습니다2103": "좌표가 클립보드에 복사되었습니다!",
      "테스트홈버튼2122": "테스트 홈 버튼",
      "테스트스크롤버튼2123": "테스트 스크롤 버튼",
      "홈버튼왼쪽하단buttono2125": "{/* 홈 버튼 (왼쪽 하단) */} <button onClick={goToHome} className={`w-14 h-14 bg-black text-white rounded-full shadow-2xl hover:bg-gray-800 hover:scale-110 transition-all duration-300 pointer-events-auto flex items-center justify-center ${ showScrollButtons ?",
      "홈으로이동2126": "홈으로 이동",
      "맨위로스크롤2128": "맨 위로 스크롤",
      "alert좌표가클립보드에복사되었습니다2144": "); alert('좌표가 클립보드에 복사되었습니다!'); }} className=\"ml-auto text-blue-600 hover:text-blue-800 text-xs underline\" > 복사 </button> </div> </div> {/* 인트로가 아닌 경우 방향 안내 강조 */} {index > 0 && poi.audioChapter?.text && ( <div className=\"mt-2 p-2 bg-yellow-50 border-l-4 border-yellow-400 rounded\"> <div className=\"flex items-start gap-2\"> <Compass className=\"w-4 h-4 text-yellow-600 mt-0.5 flex-shrink-0\" /> <div> <h4 className=\"text-sm font-medium text-gray-900 mb-1\"> {t('guide.directionGuidance') || '방향 안내'} </h4> <p className=\"text-sm text-gray-700\"> 이전 위치에서 방향 안내를 따라 이동하세요 </p> </div> </div> </div> )} </div> </div> {/* 해당 챕터의 오디오 플레이어 */} {poi.audioChapter && (showMap || showAudioPlayer) && ( <div className=\"mt-3 pt-3 border-t border-gray-100\"> <div className=\"flex items-center gap-2 mb-2\"> <Headphones className=\"w-4 h-4 text-gray-500\" /> <span className=\"text-sm font-medium text-gray-700\">{t('guide.audioGuide')}</span> </div> <ChapterAudioPlayer chapter={poi.audioChapter} className=\"w-full\" onChapterUpdate={(updatedChapter) => handleChapterUpdate(poi.id, updatedChapter)} locationName={locationName} guideId={",
      "alert좌표가클립보드에복사되었습니다2147": "); alert('좌표가 클립보드에 복사되었습니다!'); }} className=\"text-xs bg-blue-100 text-blue-800 px-3 py-1 rounded-full hover:bg-blue-200 transition-colors\" > 복사 </button> <button onClick={() => { const googleMapsUrl =",
      "windowopengooglemapsurl2148": "; window.open(googleMapsUrl, '_blank'); }} className=\"text-xs bg-green-100 text-green-800 px-3 py-1 rounded-full hover:bg-green-200 transition-colors\" > 지도보기 </button> </div> </div> ))} </div> {/* 전체 좌표 복사 버튼 */} <div className=\"mt-4 pt-4 border-t border-gray-200\"> <button onClick={() => { const allCoords = coordinatesInfo.map(coord =>",
      "joinnavigatorclipboa2149": ").join(' '); navigator.clipboard.writeText(allCoords); alert('모든 좌표가 클립보드에 복사되었습니다!'); }} className=\"w-full bg-gray-100 hover:bg-gray-200 text-gray-800 py-2 px-4 rounded-lg transition-colors text-sm font-medium\" > 📋 전체 좌표 복사 </button> </div> </div> </div> {/* 주의사항 */} <div className=\"border-b border-gray-100 pb-6\"> <h2 className=\"text-lg font-medium text-gray-900 mb-4\">{t('guide.precautions')}</h2> <div className=\"space-y-2 text-gray-600\"> <p>• {t('guide.precaution1')}</p> <p>• {t('guide.precaution2')}</p> <p>• {t('guide.precaution3')}</p> <p>• {t('guide.precaution4')}</p> </div> </div> {/* 관람순서 */} <div className=\"pb-6\"> <h2 className=\"text-lg font-medium text-gray-900 mb-4\">{t('guide.viewingOrder')}</h2> <div className=\"bg-gray-50 rounded-lg p-4\"> <div className=\"space-y-3\"> <div className=\"flex items-center gap-3\"> <div className=\"w-8 h-8 bg-black text-white text-sm rounded-full flex items-center justify-center\"> 1 </div> <p className=\"text-gray-700\">{t('guide.step1')}</p> </div> <div className=\"flex items-center gap-3\"> <div className=\"w-8 h-8 bg-black text-white text-sm rounded-full flex items-center justify-center\"> 2 </div> <p className=\"text-gray-700\">{t('guide.step2')}</p> </div> <div className=\"flex items-center gap-3\"> <div className=\"w-8 h-8 bg-black text-white text-sm rounded-full flex items-center justify-center\"> 3 </div> <p className=\"text-gray-700\">{t('guide.step3')}</p> </div> <div className=\"flex items-center gap-3\"> <div className=\"w-8 h-8 bg-black text-white text-sm rounded-full flex items-center justify-center\"> 4 </div> <p className=\"text-gray-700\">{t('guide.step4')}</p> </div> </div> </div> </div> {/* 시작 버튼 */} <div className=\"text-center pt-4\"> <button onClick={() => { // 실제 실시간 가이드 기능 시작 setShowMap(true); setShowAudioPlayer(true); }} className=\"bg-black text-white px-8 py-3 rounded-lg hover:bg-gray-800 transition-colors\" > {t('guide.startRealtimeGuide')} </button> </div> {/* Location Tracker (시작 후에만 표시) */} {(showMap || showAudioPlayer) && ( <div className=\"mt-8\"> <LiveLocationTracker pois={poisWithChapters} onLocationUpdate={handleLocationUpdate} onPOIReached={handlePOIReached} showStats={false} showProgress={true} className=\"w-full\" /> </div> )} {/* 추천 시작지점 지도 (시작 후에만 표시) - 인트로 챕터만 */} {showMap && ( <div className=\"mb-6\"> <div className=\"flex items-center gap-3 mb-4\"> <div className=\"w-8 h-8 bg-black rounded-full flex items-center justify-center\"> <MapPin className=\"w-5 h-5 text-white\" /> </div> <div> <h2 className=\"text-lg font-medium\">{t('guide.recommendedStartPoint') || '추천 시작지점'}</h2> <p className=\"text-sm text-gray-600\">{t('guide.accurateIntroLocation') || '정확한 인트로 위치'}</p> </div> </div> <div className=\"h-64 bg-white border border-gray-100 rounded-lg overflow-hidden\"> {mapCenter && poisWithChapters.length > 0 ? ( <MapWithRoute pois={poisWithChapters .filter((poi, index) => index === 0) // 🎯 인트로 POI만 표시 (첫 번째만) .map(poi => ({ id: poi.id, name: poi.name, lat: poi.lat, lng: poi.lng, description: poi.description || '' }))} currentLocation={currentLocation} center={mapCenter} zoom={16} // 더 확대된 뷰 showRoute={false} // 루트 표시 안 함 showUserLocation={true} onPoiClick={(poiId) => { const poiIndex = poisWithChapters.findIndex(poi => poi.id === poiId); if (poiIndex !== -1) { setCurrentChapter(poiIndex); } }} className=\"w-full h-full\" locationName={locationName} guideCoordinates={undefined} // live 페이지에서는 POI 데이터 사용 /> ) : ( <div className=\"w-full h-full flex items-center justify-center bg-gray-50\"> <div className=\"text-center\"> <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-black mx-auto mb-3\"></div> <div className=\"text-gray-600 font-medium\">지도 준비 중...</div> <div className=\"text-gray-500 text-sm mt-1\">정확한 위치를 확인하고 있습니다</div> </div> </div> )} </div> </div> )} {/* 디버깅용 추가 콘텐츠 - 스크롤 테스트를 위한 높이 확보 */} <div className=\"mt-8 space-y-4\"> <h3 className=\"text-lg font-medium text-gray-900\">스크롤 테스트용 콘텐츠</h3> {Array.from({ length: 20 }, (_, i) => ( <div key={i} className=\"p-4 bg-gray-100 rounded-lg\"> <p className=\"text-gray-700\"> 스크롤 테스트를 위한 콘텐츠 #{i + 1}. 이 콘텐츠는 페이지의 높이를 늘려서 스크롤이 가능하도록 합니다. 300px 이상 스크롤하면 하단에 네비게이션 버튼이 나타나야 합니다. </p> </div> ))} </div> </div> {/* 스크롤 네비게이션 버튼들 */} {/* 항상 보이는 테스트 버튼 (임시) */} <div className=\"fixed bottom-20 left-6 right-6 flex justify-between items-center z-50\"> <button onClick={goToHome} className=\"w-12 h-12 bg-blue-500 text-white rounded-full shadow-lg flex items-center justify-center\" aria-label=\"테스트 홈 버튼\" > <Home className=\"w-5 h-5\" /> </button> <button onClick={scrollToTop} className=\"w-12 h-12 bg-green-500 text-white rounded-full shadow-lg flex items-center justify-center\" aria-label=\"테스트 스크롤 버튼\" > <ArrowUp className=\"w-5 h-5\" /> </button> </div> {/* 조건부 스크롤 버튼들 */} <div className=\"fixed bottom-6 left-6 right-6 flex justify-between items-center pointer-events-none z-50\"> {/* 홈 버튼 (왼쪽 하단) */} <button onClick={goToHome} className={",
      "arialabel홈으로이동home2150": "} aria-label=\"홈으로 이동\" > <Home className=\"w-6 h-6\" /> </button> {/* 스크롤 투 탑 버튼 (오른쪽 하단) */} <button onClick={scrollToTop} className={",
      "windowlocationreloadclas2526": "window.location.reload()} className=\"bg-black text-white px-6 py-3 rounded-xl font-medium hover:bg-gray-800 transition-colors\" > 다시 시도",
      "windowhistorybackclassna2529": "window.history.back()} className=\"bg-black text-white px-6 py-3 rounded-xl font-medium hover:bg-gray-800 transition-colors\" > 돌아가기",
      "consthandlefeedbacksubmi2530": "); } const handleFeedbackSubmit = (feedback: any) => { console.log('📝 품질 피드백 받음:', feedback); // 피드백 처리 로직은 QualityFeedback 컴포넌트에서 API 호출로 처리됨 }; return (",
      "다시시도buttondivdiv2561": "다시 시도 </button> </div> </div> </div> ); } if (!guideContent) { return ( <div className=",
      "돌아가기buttondivdiv2564": "돌아가기 </button> </div> </div> </div> ); } const handleFeedbackSubmit = (feedback: any) => { console.log(",
      "다시시도2664": "다시 시도",
      "헤더2665": "{/* 헤더 */}",
      "새로고침2668": "🔄 새로고침",
      "초기화2669": "🗑️ 초기화",
      "마지막업데이트datanewdatedat2670": "마지막 업데이트: {data ? new Date(data.timestamp).toLocaleString('ko-KR') : 'N/A'}",
      "다시시도buttondivdiv2696": "다시 시도 </button> </div> </div> ); } return ( <div className=",
      "헤더divclassname2697": "{/* 헤더 */} <div className=",
      "새로고침buttonprocessenv2700": "🔄 새로고침 </button> {process.env.NODE_ENV ===",
      "초기화buttondiv2701": "🗑️ 초기화 </button> )} </div> </div> <p className=",
      "마지막업데이트datanewdatedat2702": "마지막 업데이트: {data ? new Date(data.timestamp).toLocaleString(",
      "pdivdata2703": "} </p> </div> {data && ( <> {/* 전체 상태 */} <div className=",
      "routerpushclassnameb2729": "router.push(\"/\")} className=\"bg-gray-100 text-gray-700 px-6 py-3 rounded-xl font-medium hover:bg-gray-200 transition-colors\" > {currentLanguage === 'ko' ? \"홈으로\" : currentLanguage === 'en' ? \"Home\" : currentLanguage === 'ja' ? \"ホーム\" : currentLanguage === 'zh' ? \"首页\" : \"Inicio\"}",
      "routerpushclassnamep2780": "router.push('/')} className=\"px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-800\" > {t('mypage.createGuideButton') || '가이드 생성하기'}",
      "routerpushclassnamep2789": "router.push('/')} className=\"px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-800\" > {t('mypage.createGuideButton') || '가이드 생성하기'}",
      "caseoffline오프라인2790": "); } case 'offline': { // 오프라인 다운로드된 가이드들 (향후 구현을 위한 mock 데이터) const offlineGuides: LocalGuideEntry[] = []; return (",
      "setshowpersonalitymodaltrue2815": "setShowPersonalityModal(true)} className=\"w-full md:w-auto px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\" > {t('mypage.retakeDiagnosis') || '다시 진단하기'}",
      "tmypagediagnosisinfo2816": "{t('mypage.diagnosisInfo') || '100만명 AI 시뮬레이션으로 검증된 5문항 진단으로 95%의 정확도로 개인화 가이드를 제공합니다. 20개국 문화적 공정성 검증 완룼.'}",
      "setshowpersonalitymodaltrue2822": "setShowPersonalityModal(true)} className=\"w-full md:w-auto bg-black text-white px-6 py-2 rounded-lg hover:bg-gray-800 transition-colors\" > {t('mypage.startDiagnosis') || '진단 시작하기'}",
      "계정설정2823": "{/* 계정 설정 */}",
      "로그아웃2841": "{/* 로그아웃 */}",
      "tryconsolelog강화된로그2842": "{ try { console.log('🔥 강화된 로그아웃 프로세스 시작...'); // 1. 클라이언트 측 정리 (localStorage, sessionStorage) console.log('🧹 클라이언트 데이터 정리 중...'); localStorage.clear(); sessionStorage.clear(); // 2. 서버 측 강제 로그아웃 API 호출 try { console.log('🔥 서버 강제 로그아웃 호출 중...'); await fetch('/api/auth/force-logout', { method: 'POST', credentials: 'include' }); console.log('✅ 서버 강제 로그아웃 완료'); } catch (apiError) { console.warn('⚠️ 서버 강제 로그아웃 실패:', apiError); } // 3. NextAuth signOut 호출 (자동 리다이렉트 활성화) console.log('🔄 NextAuth signOut 호출 중...'); await signOut({ callbackUrl: '/', redirect: true // 자동 리다이렉트 활성화 }); } catch (error) { console.error('❌ 로그아웃 중 오류 발생:', error); // 에러 발생시에도 기본 정리 및 리다이렉트 try { await fetch('/api/auth/force-logout', { method: 'POST', credentials: 'include' }); } catch (cleanupError) { console.error('정리 프로세스 실패:', cleanupError); } // 강제 리다이렉트 (NextAuth 실패시 백업) window.location.href = '/'; } }} className=\"w-full bg-gray-800 text-white px-4 py-3 rounded-lg hover:bg-black transition-colors font-medium flex items-center justify-center\" >",
      "계정관리2844": "{/* 계정 관리 */}",
      "consolelog마이페이지로그아웃시2846": "{ console.log('🚀 마이페이지 로그아웃 시작...'); try { // 1. 클라이언트 정리 (쿠키, 스토리지, 간단한 캐시) const { performCompleteLogout, simpleCacheInvalidation } = await import('@/lib/auth-utils'); await performCompleteLogout(); await simpleCacheInvalidation(); // 2. 서버 사이드 강제 로그아웃 API 호출 try { console.log('🔥 서버 강제 로그아웃 호출 중...'); await fetch('/api/auth/force-logout', { method: 'POST', credentials: 'include' }); console.log('✅ 서버 강제 로그아웃 완료'); } catch (apiError) { console.warn('⚠️ 서버 강제 로그아웃 실패:', apiError); } // 3. NextAuth signOut 호출 (자동 리다이렉트 활성화) console.log('🔄 NextAuth signOut 호출 중...'); await signOut({ callbackUrl: '/', redirect: true // 자동 리다이렉트 활성화 }); // NextAuth가 자동으로 홈페이지로 리다이렉트하므로 추가 로직 불필요 } catch (error) { console.error('❌ 로그아웃 중 오류 발생:', error); // 에러 발생시에도 기본 정리 및 리다이렉트 try { await fetch('/api/auth/force-logout', { method: 'POST', credentials: 'include' }); } catch (cleanupError) { console.error('정리 프로세스 실패:', cleanupError); } // 강제 리다이렉트 (NextAuth 실패시 백업) window.location.href = '/'; } }} className=\"w-full bg-gray-800 text-white px-4 py-2 rounded-lg hover:bg-black transition-colors font-medium flex items-center justify-center\" >",
      "헤더2848": "{/* 헤더 */}",
      "routerpushclassnameb2849": "router.push('/')} className=\"btn-base text-gray-500 hover:text-black bg-transparent hover:bg-gray-50 transition-colors\" style={{ padding: 'var(--space-2) var(--space-3)', borderRadius: 'var(--radius-md)' }} > ← {t('buttons.goBack') || '홈으로'}",
      "tmypagetitle마이페이지2850": "{t('mypage.title') || '마이페이지'}",
      "routerpushadmindashboard2852": "router.push('/admin/dashboard')} className=\"px-3 py-2 bg-black text-white text-sm font-medium rounded-lg hover:bg-gray-800 transition-colors\" > 관리자 대시보드",
      "탭컨텐츠isloading2857": "{/* 탭 컨텐츠 */} {isLoading ? (",
      "타입정의interfaceguidehist2860": "; // 타입 정의 interface GuideHistoryEntry { id: string; locationName: string; createdAt: string; language: string; tourDuration?: number; status?:",
      "가이드생성하기2891": "가이드 생성하기",
      "가이드생성하기2900": "가이드 생성하기",
      "오프라인다운로드된가이드들향후구현을2901": ": { // 오프라인 다운로드된 가이드들 (향후 구현을 위한 mock 데이터) const offlineGuides: LocalGuideEntry[] = []; return ( <div className=",
      "강화된로그아웃프로세스시작2954": "🔥 강화된 로그아웃 프로세스 시작...",
      "마이페이지로그아웃시작2965": "🚀 마이페이지 로그아웃 시작...",
      "헤더divclassname2974": "{/* 헤더 */} <div className=",
      "홈으로2975": "홈으로",
      "관리자대시보드buttondivcla2978": "관리자 대시보드 </button> )} <div className=",
      "constuserprefssavedcit3018": "{ const userPrefs = { savedCities, filters, compareMode: selectedCities }; localStorage.setItem('nomad-user-preferences', JSON.stringify(userPrefs)); alert('선호도가 저장되었습니다!'); }} > 선호도 저장",
      "thissetstatehaserrorfa3241": "{ this.setState({ hasError: false, error: null }); window.location.reload(); }} className=\"w-full bg-black text-white py-3 px-6 rounded-2xl font-medium hover:bg-gray-800 transition-colors\" > 다시 시도",
      "returnthispropschildre3242": "); } return this.props.children; } } // 검색 제안 인터페이스 interface Suggestion { id?: string; name: string; location: string; } // 번역된 제안 타입 가드 interface TranslatedSuggestion { name: string; location: string; } // 타입 가드 함수들 const isValidSuggestionsArray = (data: any): data is TranslatedSuggestion[] => { console.log('🔬 타입 검증 시작 - 데이터:', data); const isArray = Array.isArray(data); console.log('🔬 Array 체크:', isArray); if (!isArray) return false; const hasLength = data.length > 0; console.log('🔬 길이 체크:', hasLength, '길이:', data.length); if (!hasLength) return false; const allValid = data.every((item, index) => { const isObject = typeof item === 'object' && item !== null; const hasName = typeof item.name === 'string'; const hasLocation = typeof item.location === 'string'; console.log(`🔬 항목 ${index}:`, { isObject, hasName, hasLocation, itemKeys: item ? Object.keys(item) : 'null', nameValue: item?.name, locValue: item?.location }); return isObject && hasName && hasLocation; }); console.log('🔬 모든 항목 유효:', allValid); return allValid; }; const isValidCountriesData = (data: any): boolean => { return data && typeof data === 'object' && !Array.isArray(data); }; function Home() { const router = useRouter(); const { currentLanguage, t } = useLanguage(); // URL 파라미터 처리를 위한 상태 추가 const [urlParams, setUrlParams] = useState",
      "검색도움말화면판독기용3270": "{/* 검색 도움말 (화면 판독기용) */}",
      "검색어를입력하고enter키를누르거나제안목록에서3271": "검색어를 입력하고 Enter키를 누르거나 제안 목록에서 선택하세요. 화살표 키로 제안을 탐색할 수 있습니다.",
      "constselectedlocationsug3273": "{ const selectedLocation = suggestion.name; setQuery(selectedLocation); setIsFocused(false); setShowSuggestions(false); setSelectedSuggestionIndex(-1); router.push(`/guide/${encodeURIComponent(selectedLocation)}?lang=${currentLanguage}`); }} onMouseEnter={() => setSelectedSuggestionIndex(index)} onMouseLeave={() => setSelectedSuggestionIndex(-1)} className={`w-full px-6 py-4 text-left transition-all duration-200 group suggestion-item focus:outline-none focus:ring-2 focus:ring-inset focus:ring-black ${ selectedSuggestionIndex === index ? 'bg-blue-50 ring-2 ring-blue-200' : 'hover:bg-gray-50' }`} role=\"option\" aria-selected={selectedSuggestionIndex === index} aria-label={`${suggestion.name}, ${suggestion.location}로 이동`} >",
      "국가카드슬라이드인기여행지스타일3277": "{/* 국가 카드 슬라이드 - 인기여행지 스타일 */}",
      "estoppropagationsetload3286": "{ e.stopPropagation(); setLoadingState('country', true); // 특정 명소에 대해 지역 컨텍스트 추가 let url = `/guide/${encodeURIComponent(attraction)}?lang=${currentLanguage}`; if (country.id === 'thailand' && attraction === '방콕 대왕궁') { url += '&parent=' + encodeURIComponent('방콕'); } router.push(url); }} className=\"flex items-center text-sm text-gray-700 hover:text-black transition-colors w-full text-left py-1 px-2 -mx-2 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-black focus:ring-opacity-20\" aria-label={`${attraction} 가이드 생성하기`} >",
      "정보표시영역3287": "{/* 정보 표시 영역 */}",
      "검색어를입력하고enter키를누르거나제안목록에서3468": "검색어를 입력하고 Enter키를 누르거나 제안 목록에서 선택하세요. 화살표 키로 제안을 탐색할 수 있습니다. </div> {/* Suggestions Dropdown */} {(isFocused || showSuggestions) && query.length > 0 && ( <div className=",
      "divdivdiv3472": ")} </div> )} </div> )} </div> </div> {/* 전략적 광고 배치 1: 검색박스 하단 */} <div className=",
      "에러표시error3634": "{/* 에러 표시 */} {error && (",
      "loaduserpreferencesclassna4209": "loadUserPreferences()} className=\"text-xs bg-white text-blue-800 px-3 py-1 rounded hover:bg-blue-100 transition-colors\" > 📂 저장된 설정 불러오기",
      "saveuserpreferencesclassna4210": "saveUserPreferences()} className=\"text-xs bg-white text-blue-800 px-3 py-1 rounded hover:bg-blue-100 transition-colors\" > 💾 현재 설정 저장",
      "showsavedplansclassnamet4211": "showSavedPlans()} className=\"text-xs bg-white text-blue-800 px-3 py-1 rounded hover:bg-blue-100 transition-colors\" > 📋 저장된 계획 보기 (",
      "ai분석중4213": "AI 분석 중... ⏳",
      "saveplanclassnametextsm4216": "savePlan()} className=\"text-sm bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors\" > 📋 계획 저장",
      "exportplanclassnametext4217": "exportPlan()} className=\"text-sm bg-purple-100 text-purple-800 px-3 py-1 rounded hover:bg-purple-200 transition-colors\" > 📄 PDF 내보내기",
      "regenerateplanclassnamef4218": "regeneratePlan()} className=\"flex-1 bg-gray-100 text-gray-700 py-2 px-4 rounded hover:bg-gray-200 transition-colors text-sm\" > 🔄 다시 생성",
      "sharetripclassnameflex14219": "shareTrip()} className=\"flex-1 bg-green-100 text-green-800 py-2 px-4 rounded hover:bg-green-200 transition-colors text-sm\" > 📤 공유하기",
      "comparewithsimilarclassnam4220": "compareWithSimilar()} className=\"flex-1 bg-yellow-100 text-yellow-800 py-2 px-4 rounded hover:bg-yellow-200 transition-colors text-sm\" > 🔍 유사 계획 비교",
      "불러오기4257": "불러오기",
      "삭제4258": "삭제",
      "joincontainerclassl4259": ").join(''); } container.classList.remove('hidden'); } // 저장된 계획 불러오기 function loadSavedPlan(planId) { const plans = JSON.parse(localStorage.getItem('savedTripPlans') || '[]'); const plan = plans.find(p => p.id === planId); if (plan) { document.querySelector('input[type=\"text\"]').value = plan.destination; document.getElementById('plan-content').innerHTML = plan.content; document.getElementById('generated-plan').classList.remove('hidden'); alert('계획을 불러왔습니다! 📂'); } } // 저장된 계획 삭제 function deleteSavedPlan(planId) { if (confirm('이 계획을 삭제하시겠습니까?')) { let plans = JSON.parse(localStorage.getItem('savedTripPlans') || '[]'); plans = plans.filter(p => p.id !== planId); localStorage.setItem('savedTripPlans', JSON.stringify(plans)); showSavedPlans(); updateSavedCount(); alert('계획이 삭제되었습니다.'); } } // PDF 내보내기 function exportPlan() { const destination = document.querySelector('input[type=\"text\"]').value || '제주도'; const content = document.getElementById('plan-content').innerText; const blob = new Blob([`${destination} 여행 계획 ${content}`], { type: 'text/plain' }); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = `${destination}_여행계획.txt`; a.click(); URL.revokeObjectURL(url); } // 유사 계획 비교 function compareWithSimilar() { const currentDest = document.querySelector('input[type=\"text\"]').value || '제주도'; const plans = JSON.parse(localStorage.getItem('savedTripPlans') || '[]'); const similar = plans.filter(plan => plan.destination.includes(currentDest.substring(0, 2)) || currentDest.includes(plan.destination.substring(0, 2)) ); if (similar.length === 0) { alert('유사한 여행 계획이 없습니다.'); } else { alert(`${similar.length}개의 유사한 계획을 찾았습니다: ${similar.map(p => p.destination).join(', ')}`); } } // 페이지 로드 시 저장된 계획 수 업데이트 document.addEventListener('DOMContentLoaded', function() { updateSavedCount(); }); // 계획 재생성 function regeneratePlan() { generateTripPlan(); } // 여행 공유 function shareTrip() { const destination = document.querySelector('input[type=\"text\"]').value || '제주도'; const text = \\`\\${destination} 여행 계획을 AI가 생성했어요! TripRadio.AI에서 확인해보세요: \\${window.location.href}\\`; if (navigator.share) { navigator.share({ title: 'AI 여행 계획', text: text, url: window.location.href }); } else { navigator.clipboard.writeText(text); alert('여행 계획 링크가 복사되었습니다! 📋'); } } window.generateTripPlan = generateTripPlan; window.savePlan = savePlan; window.regeneratePlan = regeneratePlan; window.shareTrip = shareTrip; window.saveUserPreferences = saveUserPreferences; window.loadUserPreferences = loadUserPreferences; window.showSavedPlans = showSavedPlans; window.loadSavedPlan = loadSavedPlan; window.deleteSavedPlan = deleteSavedPlan; window.exportPlan = exportPlan; window.compareWithSimilar = compareWithSimilar; ` }} />",
      "저장된설정불러오기buttonbutt4821": "📂 저장된 설정 불러오기 </button> <button onClick={() => saveUserPreferences()} className=",
      "현재설정저장buttonbutton4822": "💾 현재 설정 저장 </button> <button onClick={() => showSavedPlans()} className=",
      "저장된계획보기spanid4823": "📋 저장된 계획 보기 (<span id=",
      "ai분석중spanbutton4825": "AI 분석 중... ⏳</span> </button> <p className=",
      "저장된계획들이여기에표시됩니다4827": "<!-- 저장된 계획들이 여기에 표시됩니다 --> </div> </div> {/* Generated Plan Display */} <div id=",
      "계획저장buttonbuttononc4829": "📋 계획 저장 </button> <button onClick={() => exportPlan()} className=",
      "pdf내보내기buttondiv4830": "📄 PDF 내보내기 </button> </div> </div> <div id=",
      "다시생성buttonbuttononc4831": "🔄 다시 생성 </button> <button onClick={() => shareTrip()} className=",
      "공유하기buttonbuttononcl4832": "📤 공유하기 </button> <button onClick={() => compareWithSimilar()} className=",
      "유사계획비교buttondiv4833": "🔍 유사 계획 비교 </button> </div> </div> </div> </div> {/* Popular Destinations Quick Start */} <div className=",
      "사용자설정저장fu4895": "); }); }); }); // 사용자 설정 저장 function saveUserPreferences() { const prefs = { defaultBudget: document.querySelector(",
      "불러오기buttonbuttononclick4904": "불러오기</button> <button onclick=",
      "삭제buttondivdivj4905": "삭제</button> </div> </div> `).join(",
      "저장된계획불러오기functionl4906": "); } // 저장된 계획 불러오기 function loadSavedPlan(planId) { const plans = JSON.parse(localStorage.getItem(",
      "joincontainerclassl4927": ").join(''); } container.classList.remove('hidden'); } // 저장된 계획 불러오기 function loadSavedPlan(planId) { const plans = JSON.parse(localStorage.getItem('savedTripPlans') || '[]'); const plan = plans.find(p => p.id === planId); if (plan) { document.querySelector('input[type=\"text\"]').value = plan.destination; document.getElementById('plan-content').innerHTML = plan.content; document.getElementById('generated-plan').classList.remove('hidden'); alert('계획을 불러왔습니다! 📂'); } } // 저장된 계획 삭제 function deleteSavedPlan(planId) { if (confirm('이 계획을 삭제하시겠습니까?')) { let plans = JSON.parse(localStorage.getItem('savedTripPlans') || '[]'); plans = plans.filter(p => p.id !== planId); localStorage.setItem('savedTripPlans', JSON.stringify(plans)); showSavedPlans(); updateSavedCount(); alert('계획이 삭제되었습니다.'); } } // PDF 내보내기 function exportPlan() { const destination = document.querySelector('input[type=\"text\"]').value || '제주도'; const content = document.getElementById('plan-content').innerText; const blob = new Blob([",
      "비자요구사항확인5240": "비자 요구사항 확인",
      "비자요구사항확인buttondiv5575": "비자 요구사항 확인 </button> </div> </div> </div> </div> </section> {/* Popular Destinations Visa Info */} <section className="
    },
    "title": {
      "candidatelatitudecandida97": "{candidate.latitude && candidate.longitude ? `${candidate.latitude.toFixed(6)}, ${candidate.longitude.toFixed(6)}` : '좌표 없음' }",
      "ai여행가이드인공지능과함께하는스마트한여행470": "AI여행 가이드 | 인공지능과 함께하는 스마트한 여행 TripRadio.AI",
      "ai가계획부터해설까지인공지능과함께하는완전히471": "AI가 계획부터 해설까지! 인공지능과 함께하는 완전히 새로운 스마트 여행 경험을 만나보세요",
      "ai오디오가이드앱추천1위무료여행해설t490": "AI 오디오가이드 앱 추천 1위 | 무료 여행 해설 TripRadio.AI",
      "전세계어디서든ai가실시간으로만들어주는개인맞491": "전 세계 어디서든 AI가 실시간으로 만들어주는 개인 맞춤형 오디오가이드! 도슨트 없이도 전문가급 해설을 무료로 경험해보세요",
      "전세계top100관광명소가이드세계유명여행742": "전세계 TOP100 관광명소 가이드 | 세계 유명 여행지 TripRadio.AI",
      "전세계top100관광명소를ai가이드와함께파743": "전세계 TOP100 관광명소를 AI 가이드와 함께! 파리 에펠탑부터 제주도까지, 세계 유명 여행지의 숨겨진 이야기를 만나보세요",
      "top100세계명소744": "TOP100 세계명소",
      "ai전문가이드745": "AI 전문 가이드",
      "숨겨진스토리746": "숨겨진 스토리",
      "ai도슨트서비스전문해설사없이도박물관미술933": "AI 도슨트 서비스 | 전문 해설사 없이도 박물관·미술관 투어 TripRadio.AI",
      "전문도슨트없이도박물관미술관에서깊이있는해설934": "전문 도슨트 없이도 박물관, 미술관에서 깊이 있는 해설을 들을 수 있습니다. AI가 실시간으로 만드는 개인 맞춤형 문화예술 해설 서비스",
      "맞춤형해설935": "맞춤형 해설",
      "실시간생성936": "실시간 생성",
      "완전무료937": "완전 무료",
      "상세촬영지가이드보기998": "상세 촬영지 가이드 보기",
      "스릴러1078": "스릴러",
      "자하문터널1079": "자하문터널",
      "서울종로구1080": "서울 종로구",
      "반지하집외부촬영지1081": "반지하 집 외부 촬영지",
      "서울대계단1082": "서울대 계단",
      "오징어게임1090": "오징어 게임",
      "드라마1091": "드라마",
      "트라이보울1092": "트라이보울",
      "인천강화군1093": "인천 강화군",
      "유리구슬게임촬영지1094": "유리구슬 게임 촬영지",
      "용유정거장1095": "용유정거장",
      "사랑의불시착1103": "사랑의 불시착",
      "로맨스1104": "로맨스",
      "시그리스빌1105": "시그리스빌",
      "스위스1106": "스위스",
      "세리의패러글라이딩착륙지점1107": "세리의 패러글라이딩 착륙 지점",
      "벌곡교1108": "벌곡교",
      "도깨비1116": "도깨비",
      "판타지1117": "판타지",
      "덕수궁돌담길1118": "덕수궁 돌담길",
      "서울중구1119": "서울 중구",
      "유명한문이나타나는장소1120": "유명한 문이 나타나는 장소",
      "주문진해변1121": "주문진해변",
      "태극기휘날리며1129": "태극기 휘날리며",
      "전쟁1130": "전쟁",
      "태백산맥1131": "태백산맥",
      "강원태백시1132": "강원 태백시",
      "전투장면1133": "전투 장면",
      "정선아우라지1134": "정선 아우라지",
      "미나리1142": "미나리",
      "드라마1143": "드라마",
      "털사1144": "털사",
      "오클라호마주1145": "오클라호마 주",
      "이민가족의농장1146": "이민 가족의 농장",
      "아칸소1147": "아칸소",
      "어벤져스1152": "어벤져스",
      "액션1153": "액션",
      "스타크타워1154": "스타크 타워",
      "뉴욕맨해튼1155": "뉴욕 맨해튼",
      "아이언맨의본거지1156": "아이언맨의 본거지",
      "중앙역1157": "중앙역",
      "인터스텔라1165": "인터스텔라",
      "아이슬란드빙하1166": "아이슬란드 빙하",
      "아이슬란드1167": "아이슬란드",
      "얼음행성장면1168": "얼음 행성 장면",
      "앨버타평원1169": "앨버타 평원",
      "라라랜드1177": "라라랜드",
      "뮤지컬1178": "뮤지컬",
      "그리피스천문대1179": "그리피스 천문대",
      "로스앤젤레스1180": "로스앤젤레스",
      "데이트장면1181": "데이트 장면",
      "허모사비치1182": "허모사 비치",
      "토이스토리1190": "토이 스토리",
      "애니메이션1191": "애니메이션",
      "픽사스튜디오1192": "픽사 스튜디오",
      "캘리포니아1193": "캘리포니아",
      "제작사본사1194": "제작사 본사",
      "샌프란시스코1195": "샌프란시스코",
      "겨울왕국1200": "겨울왕국",
      "애니메이션1201": "애니메이션",
      "할슈타트1202": "할슈타트",
      "오스트리아1203": "오스트리아",
      "아렌델왕국의모티브1204": "아렌델 왕국의 모티브",
      "베르겐1205": "베르겐",
      "해리포터마법사의돌1213": "해리포터: 마법사의 돌",
      "판타지1214": "판타지",
      "옥스퍼드대학1215": "옥스퍼드 대학",
      "영국옥스퍼드1216": "영국 옥스퍼드",
      "호그와트내부1217": "호그와트 내부",
      "앨닉성1218": "앨닉 성",
      "로마의휴일1226": "로마의 휴일",
      "로맨스1227": "로맨스",
      "트레비분수1228": "트레비 분수",
      "이탈리아로마1229": "이탈리아 로마",
      "동전던지기장면1230": "동전 던지기 장면",
      "스페인계단1231": "스페인 계단",
      "아멜리에1239": "아멜리에",
      "로맨스1240": "로맨스",
      "몽마르트언덕1241": "몽마르트 언덕",
      "프랑스파리1242": "프랑스 파리",
      "아멜리의동네1243": "아멜리의 동네",
      "사크레쾨르1244": "사크레쾨르",
      "너의이름은1252": "너의 이름은",
      "애니메이션1253": "애니메이션",
      "스가신사1254": "스가 신사",
      "일본도쿄1255": "일본 도쿄",
      "계단명장면1256": "계단 명장면",
      "히다시1257": "히다시",
      "센과치히로의행방불명1265": "센과 치히로의 행방불명",
      "애니메이션1266": "애니메이션",
      "도고온천1267": "도고 온천",
      "일본에히메현1268": "일본 에히메현",
      "목욕탕모티브1269": "목욕탕 모티브",
      "와호장룡1278": "와호장룡",
      "무협1279": "무협",
      "우당산1280": "우당산",
      "중국후베이성1281": "중국 후베이성",
      "무협액션장면1282": "무협 액션 장면",
      "자금성1283": "자금성",
      "기묘한이야기1291": "기묘한 이야기",
      "호킨스중학교1292": "호킨스 중학교",
      "조지아주1293": "조지아 주",
      "주인공들의학교1294": "주인공들의 학교",
      "스타코트몰1295": "스타코트 몰",
      "킹덤1303": "킹덤",
      "좀비1304": "좀비",
      "문경새재1305": "문경새재",
      "경북문경시1306": "경북 문경시",
      "조선궁궐세트1307": "조선 궁궐 세트",
      "해인사1308": "해인사",
      "경남합천군1309": "경남 합천군",
      "존윅1316": "존 윅",
      "액션1317": "액션",
      "컨티넨탈호텔1318": "컨티넨탈 호텔",
      "뉴욕맨해튼1319": "뉴욕 맨해튼",
      "킬러들의호텔1320": "킬러들의 호텔",
      "브루클린1321": "브루클린",
      "미션임파서블1329": "미션 임파서블",
      "액션1330": "액션",
      "버즈할리파1331": "버즈 할리파",
      "uae두바이1332": "UAE 두바이",
      "톰크루즈건물오르기1333": "톰 크루즈 건물 오르기",
      "시드니오페라하우스1334": "시드니 오페라하우스",
      "포레스트검프1342": "포레스트 검프",
      "드라마1343": "드라마",
      "새너광장1344": "새너 광장",
      "조지아사바나1345": "조지아 사바나",
      "벤치장면1346": "벤치 장면",
      "링컨메모리얼1347": "링컨 메모리얼",
      "타이타닉1355": "타이타닉",
      "로맨스1356": "로맨스",
      "벨파스트1357": "벨파스트",
      "북아일랜드1358": "북아일랜드",
      "타이타닉건조소1359": "타이타닉 건조소",
      "할리팩스1360": "할리팩스",
      "마스크1368": "마스크",
      "코미디1369": "코미디",
      "로스앤젤레스1370": "로스앤젤레스",
      "캘리포니아1371": "캘리포니아",
      "도시배경1372": "도시 배경",
      "코코넛그로브1373": "코코넛 그로브",
      "겟아웃1378": "겟 아웃",
      "공포1379": "공포",
      "앨라바마1380": "앨라바마",
      "앨라바마주1381": "앨라바마 주",
      "저택촬영지1382": "저택 촬영지",
      "모바일1383": "모바일",
      "앨라바마주1384": "앨라바마 주",
      "와디럼1388": "와디럼",
      "요단1389": "요단",
      "사막행성1390": "사막 행성",
      "아부다비1391": "아부다비",
      "탑건매버릭1398": "탑건: 매버릭",
      "액션1399": "액션",
      "샌디에이고1400": "샌디에이고",
      "캘리포니아1401": "캘리포니아",
      "해군기지1402": "해군 기지",
      "모뉴먼트밸리1403": "모뉴먼트 밸리",
      "영화촬영지가이드전세계유명영화세트장위치1426": "영화 촬영지 가이드 | 전세계 유명 영화 세트장 위치 TripRadio.AI",
      "좋아하는영화와드라마의실제촬영지를찾아보세요세1427": "좋아하는 영화와 드라마의 실제 촬영지를 찾아보세요. 세트장 위치, 촬영 비하인드, 포토 스팟까지 완벽한 영화 관광 가이드",
      "촬영지정확한위치1428": "촬영지 정확한 위치",
      "포토스팟안내1429": "포토 스팟 안내",
      "비하인드스토리1430": "비하인드 스토리",
      "대중교통정보1431": "대중교통 정보",
      "상세촬영지가이드보기linkdiv1442": "상세 촬영지 가이드 보기 </Link> </div> </div> ))} </div> {/* Load More */} <div className=",
      "classnamewfullbgblackt1511": "} className=\"w-full bg-black text-white py-3 px-4 rounded-lg text-center block hover:bg-gray-800 transition-colors text-sm font-medium\" > 상세 촬영지 가이드 보기 </Link> </div> </div> ))} </div> {/* Load More */} <div className=\"text-center mt-12\"> <button className=\"bg-gray-100 text-gray-700 px-8 py-3 rounded-lg hover:bg-gray-200 transition-colors\"> 더 많은 촬영지 보기 </button> </div> </div> </section> {/* Interactive Features */} <section className=\"py-16 bg-gray-50\"> <div className=\"container mx-auto px-6\"> <div className=\"max-w-4xl mx-auto text-center mb-12\"> <h2 className=\"text-3xl font-light text-gray-900 mb-4\"> 특별한 <span className=\"font-semibold\">촬영지 체험</span> </h2> <p className=\"text-gray-600\">단순한 관광이 아닌 영화 속 주인공이 되는 경험</p> </div> <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-6xl mx-auto\"> <div className=\"bg-white p-6 rounded-lg border border-gray-200 text-center\"> <div className=\"text-3xl mb-4\">📍</div> <h3 className=\"font-medium text-gray-900 mb-2\">정확한 위치</h3> <p className=\"text-sm text-gray-600\"> GPS 좌표와 상세한 길찾기로 정확한 촬영 지점까지 안내 </p> </div> <div className=\"bg-white p-6 rounded-lg border border-gray-200 text-center\"> <div className=\"text-3xl mb-4\">📸</div> <h3 className=\"font-medium text-gray-900 mb-2\">포토 가이드</h3> <p className=\"text-sm text-gray-600\"> 영화 속 명장면을 재현할 수 있는 최적의 촬영 앵글 안내 </p> </div> <div className=\"bg-white p-6 rounded-lg border border-gray-200 text-center\"> <div className=\"text-3xl mb-4\">🎬</div> <h3 className=\"font-medium text-gray-900 mb-2\">비하인드 스토리</h3> <p className=\"text-sm text-gray-600\"> 촬영 당시의 재미있는 에피소드와 제작 비화 </p> </div> <div className=\"bg-white p-6 rounded-lg border border-gray-200 text-center\"> <div className=\"text-3xl mb-4\">🎧</div> <h3 className=\"font-medium text-gray-900 mb-2\">오디오 가이드</h3> <p className=\"text-sm text-gray-600\"> 현장에서 들을 수 있는 전문 해설과 영화 음악 </p> </div> </div> </div> </section> {/* Popular Categories */} <section className=\"py-16 bg-white\"> <div className=\"container mx-auto px-6\"> <div className=\"max-w-6xl mx-auto\"> <h2 className=\"text-2xl font-light text-gray-900 mb-8 text-center\"> 카테고리별 <span className=\"font-semibold\">인기 촬영지</span> </h2> <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\"> <Link href=\"/film-locations?genre=kdrama\" className=\"bg-gray-50 p-6 rounded-lg hover:bg-gray-100 transition-colors\"> <div className=\"flex items-center gap-4\"> <div className=\"text-3xl\">🇰🇷</div> <div> <h3 className=\"font-medium text-gray-900\">K-드라마</h3> <p className=\"text-sm text-gray-600\">한국 드라마 촬영지</p> <p className=\"text-xs text-gray-500 mt-1\">120+ 장소</p> </div> </div> </Link> <Link href=\"/film-locations?genre=hollywood\" className=\"bg-gray-50 p-6 rounded-lg hover:bg-gray-100 transition-colors\"> <div className=\"flex items-center gap-4\"> <div className=\"text-3xl\">🎭</div> <div> <h3 className=\"font-medium text-gray-900\">할리우드 영화</h3> <p className=\"text-sm text-gray-600\">전세계 블록버스터</p> <p className=\"text-xs text-gray-500 mt-1\">200+ 장소</p> </div> </div> </Link> <Link href=\"/film-locations?genre=anime\" className=\"bg-gray-50 p-6 rounded-lg hover:bg-gray-100 transition-colors\"> <div className=\"flex items-center gap-4\"> <div className=\"text-3xl\">🗾</div> <div> <h3 className=\"font-medium text-gray-900\">애니메이션</h3> <p className=\"text-sm text-gray-600\">일본 애니 성지순례</p> <p className=\"text-xs text-gray-500 mt-1\">80+ 장소</p> </div> </div> </Link> <Link href=\"/film-locations?genre=marvel\" className=\"bg-gray-50 p-6 rounded-lg hover:bg-gray-100 transition-colors\"> <div className=\"flex items-center gap-4\"> <div className=\"text-3xl\">⚡</div> <div> <h3 className=\"font-medium text-gray-900\">마블 영화</h3> <p className=\"text-sm text-gray-600\">슈퍼히어로 촬영지</p> <p className=\"text-xs text-gray-500 mt-1\">50+ 장소</p> </div> </div> </Link> <Link href=\"/film-locations?genre=historic\" className=\"bg-gray-50 p-6 rounded-lg hover:bg-gray-100 transition-colors\"> <div className=\"flex items-center gap-4\"> <div className=\"text-3xl\">🏰</div> <div> <h3 className=\"font-medium text-gray-900\">사극/역사</h3> <p className=\"text-sm text-gray-600\">궁궐과 한옥마을</p> <p className=\"text-xs text-gray-500 mt-1\">60+ 장소</p> </div> </div> </Link> <Link href=\"/film-locations?genre=romance\" className=\"bg-gray-50 p-6 rounded-lg hover:bg-gray-100 transition-colors\"> <div className=\"flex items-center gap-4\"> <div className=\"text-3xl\">💕</div> <div> <h3 className=\"font-medium text-gray-900\">로맨스</h3> <p className=\"text-sm text-gray-600\">로맨틱한 명장면</p> <p className=\"text-xs text-gray-500 mt-1\">90+ 장소</p> </div> </div> </Link> </div> </div> </div> </section> {/* Cross-Tool Integration */} <section className=\"py-16 bg-gray-50\"> <div className=\"container mx-auto px-6\"> <div className=\"max-w-4xl mx-auto text-center mb-12\"> <h2 className=\"text-3xl font-light text-gray-900 mb-4\"> 촬영지 여행을 위한 <span className=\"font-semibold\">완벽한 도구들</span> </h2> <p className=\"text-gray-600\">영화 촬영지 투어를 계획하고 실행하는데 필요한 모든 것</p> </div> <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-5xl mx-auto mb-12\"> <Link href=\"/trip-planner?theme=movie\" className=\"bg-white p-6 rounded-lg border border-gray-200 hover:shadow-lg transition-all duration-300\"> <div className=\"text-center mb-4\"> <div className=\"text-3xl mb-3\">🗺️</div> <h3 className=\"text-lg font-medium text-gray-900\">영화 테마 여행 계획</h3> </div> <p className=\"text-sm text-gray-600 text-center mb-4\"> 원하는 영화의 촬영지들을 연결한 맞춤형 여행 루트를 AI가 자동으로 생성 </p> <div className=\"text-center\"> <span className=\"bg-blue-100 text-blue-800 px-3 py-1 rounded text-xs\">무료 계획 생성</span> </div> </Link> <Link href=\"/visa-checker?purpose=filming\" className=\"bg-white p-6 rounded-lg border border-gray-200 hover:shadow-lg transition-all duration-300\"> <div className=\"text-center mb-4\"> <div className=\"text-3xl mb-3\">📋</div> <h3 className=\"text-lg font-medium text-gray-900\">촬영지 비자 정보</h3> </div> <p className=\"text-sm text-gray-600 text-center mb-4\"> 해외 촬영지 방문을 위한 비자 요구사항과 입국 정보를 미리 확인 </p> <div className=\"text-center\"> <span className=\"bg-green-100 text-green-800 px-3 py-1 rounded text-xs\">실시간 업데이트</span> </div> </Link> <div className=\"bg-white p-6 rounded-lg border border-gray-200\"> <div className=\"text-center mb-4\"> <div className=\"text-3xl mb-3\">💾</div> <h3 className=\"text-lg font-medium text-gray-900\">내 촬영지 컬렉션</h3> </div> <p className=\"text-sm text-gray-600 text-center mb-4\"> 관심있는 촬영지를 저장하고 나만의 위시리스트를 만들어 관리 </p> <div className=\"flex gap-2 justify-center\"> <button onClick={() => { const saved = JSON.parse(localStorage.getItem('saved-film-locations') || '[]'); alert(",
      "기생충1512": ": '기생충",
      "스릴러1513": ": '스릴러",
      "자하문터널1514": ": '자하문터널",
      "서울종로구1515": ": '서울 종로구",
      "반지하집외부촬영지1516": ": '반지하 집 외부 촬영지",
      "서울대계단1517": ": '서울대 계단",
      "오징어게임1525": ": '오징어 게임",
      "드라마1526": ": '드라마",
      "트라이보울1527": ": '트라이보울",
      "인천강화군1528": ": '인천 강화군",
      "유리구슬게임촬영지1529": ": '유리구슬 게임 촬영지",
      "용유정거장1530": ": '용유정거장",
      "사랑의불시착1538": ": '사랑의 불시착",
      "로맨스1539": ": '로맨스",
      "시그리스빌1540": ": '시그리스빌",
      "스위스1541": ": '스위스",
      "세리의패러글라이딩착륙지점1542": ": '세리의 패러글라이딩 착륙 지점",
      "벌곡교1543": ": '벌곡교",
      "도깨비1551": ": '도깨비",
      "판타지1552": ": '판타지",
      "덕수궁돌담길1553": ": '덕수궁 돌담길",
      "서울중구1554": ": '서울 중구",
      "유명한문이나타나는장소1555": ": '유명한 문이 나타나는 장소",
      "주문진해변1556": ": '주문진해변",
      "태극기휘날리며1564": ": '태극기 휘날리며",
      "전쟁1565": ": '전쟁",
      "태백산맥1566": ": '태백산맥",
      "강원태백시1567": ": '강원 태백시",
      "전투장면1568": ": '전투 장면",
      "정선아우라지1569": ": '정선 아우라지",
      "미나리1577": ": '미나리",
      "드라마1578": ": '드라마",
      "털사1579": ": '털사",
      "오클라호마주1580": ": '오클라호마 주",
      "이민가족의농장1581": ": '이민 가족의 농장",
      "아칸소1582": ": '아칸소",
      "아칸소주1583": ": '아칸소 주",
      "어벤져스1587": ": '어벤져스",
      "액션1588": ": '액션",
      "스타크타워1589": ": '스타크 타워",
      "뉴욕맨해튼1590": ": '뉴욕 맨해튼",
      "아이언맨의본거지1591": ": '아이언맨의 본거지",
      "중앙역1592": ": '중앙역",
      "인터스텔라1600": ": '인터스텔라",
      "아이슬란드빙하1601": ": '아이슬란드 빙하",
      "아이슬란드1602": ": '아이슬란드",
      "얼음행성장면1603": ": '얼음 행성 장면",
      "앨버타평원1604": ": '앨버타 평원",
      "라라랜드1612": ": '라라랜드",
      "뮤지컬1613": ": '뮤지컬",
      "그리피스천문대1614": ": '그리피스 천문대",
      "로스앤젤레스1615": ": '로스앤젤레스",
      "데이트장면1616": ": '데이트 장면",
      "허모사비치1617": ": '허모사 비치",
      "토이스토리1625": ": '토이 스토리",
      "애니메이션1626": ": '애니메이션",
      "픽사스튜디오1627": ": '픽사 스튜디오",
      "캘리포니아1628": ": '캘리포니아",
      "제작사본사1629": ": '제작사 본사",
      "샌프란시스코1630": ": '샌프란시스코",
      "겨울왕국1635": ": '겨울왕국",
      "애니메이션1636": ": '애니메이션",
      "할슈타트1637": ": '할슈타트",
      "오스트리아1638": ": '오스트리아",
      "아렌델왕국의모티브1639": ": '아렌델 왕국의 모티브",
      "베르겐1640": ": '베르겐",
      "해리포터마법사의돌1648": ": '해리포터: 마법사의 돌",
      "판타지1649": ": '판타지",
      "옥스퍼드대학1650": ": '옥스퍼드 대학",
      "영국옥스퍼드1651": ": '영국 옥스퍼드",
      "호그와트내부1652": ": '호그와트 내부",
      "앨닉성1653": ": '앨닉 성",
      "로마의휴일1661": ": '로마의 휴일",
      "로맨스1662": ": '로맨스",
      "트레비분수1663": ": '트레비 분수",
      "이탈리아로마1664": ": '이탈리아 로마",
      "동전던지기장면1665": ": '동전 던지기 장면",
      "스페인계단1666": ": '스페인 계단",
      "아멜리에1674": ": '아멜리에",
      "로맨스1675": ": '로맨스",
      "몽마르트언덕1676": ": '몽마르트 언덕",
      "프랑스파리1677": ": '프랑스 파리",
      "아멜리의동네1678": ": '아멜리의 동네",
      "사크레쾨르1679": ": '사크레쾨르",
      "너의이름은1687": ": '너의 이름은",
      "애니메이션1688": ": '애니메이션",
      "스가신사1689": ": '스가 신사",
      "일본도쿄1690": ": '일본 도쿄",
      "계단명장면1691": ": '계단 명장면",
      "히다시1692": ": '히다시",
      "센과치히로의행방불명1700": ": '센과 치히로의 행방불명",
      "애니메이션1701": ": '애니메이션",
      "도고온천1702": ": '도고 온천",
      "일본에히메현1703": ": '일본 에히메현",
      "목욕탕모티브1704": ": '목욕탕 모티브",
      "와호장룡1713": ": '와호장룡",
      "무협1714": ": '무협",
      "우당산1715": ": '우당산",
      "중국후베이성1716": ": '중국 후베이성",
      "무협액션장면1717": ": '무협 액션 장면",
      "자금성1718": ": '자금성",
      "중국베이징1719": ": '중국 베이징",
      "기묘한이야기1726": ": '기묘한 이야기",
      "호킨스중학교1727": ": '호킨스 중학교",
      "조지아주1728": ": '조지아 주",
      "주인공들의학교1729": ": '주인공들의 학교",
      "스타코트몰1730": ": '스타코트 몰",
      "킹덤1738": ": '킹덤",
      "좀비1739": ": '좀비",
      "문경새재1740": ": '문경새재",
      "경북문경시1741": ": '경북 문경시",
      "조선궁궐세트1742": ": '조선 궁궐 세트",
      "해인사1743": ": '해인사",
      "경남합천군1744": ": '경남 합천군",
      "존윅1751": ": '존 윅",
      "액션1752": ": '액션",
      "컨티넨탈호텔1753": ": '컨티넨탈 호텔",
      "뉴욕맨해튼1754": ": '뉴욕 맨해튼",
      "킬러들의호텔1755": ": '킬러들의 호텔",
      "브루클린1756": ": '브루클린",
      "미션임파서블1764": ": '미션 임파서블",
      "액션1765": ": '액션",
      "버즈할리파1766": ": '버즈 할리파",
      "uae두바이1767": ": 'UAE 두바이",
      "톰크루즈건물오르기1768": ": '톰 크루즈 건물 오르기",
      "시드니오페라하우스1769": ": '시드니 오페라하우스",
      "포레스트검프1777": ": '포레스트 검프",
      "드라마1778": ": '드라마",
      "새너광장1779": ": '새너 광장",
      "조지아사바나1780": ": '조지아 사바나",
      "벤치장면1781": ": '벤치 장면",
      "링컨메모리얼1782": ": '링컨 메모리얼",
      "타이타닉1790": ": '타이타닉",
      "로맨스1791": ": '로맨스",
      "벨파스트1792": ": '벨파스트",
      "북아일랜드1793": ": '북아일랜드",
      "타이타닉건조소1794": ": '타이타닉 건조소",
      "할리팩스1795": ": '할리팩스",
      "캐나다1796": ": '캐나다",
      "마스크1803": ": '마스크",
      "코미디1804": ": '코미디",
      "로스앤젤레스1805": ": '로스앤젤레스",
      "캘리포니아1806": ": '캘리포니아",
      "도시배경1807": ": '도시 배경",
      "코코넛그로브1808": ": '코코넛 그로브",
      "겟아웃1813": ": '겟 아웃",
      "공포1814": ": '공포",
      "앨라바마1815": ": '앨라바마",
      "앨라바마주1816": ": '앨라바마 주",
      "저택촬영지1817": ": '저택 촬영지",
      "모바일1818": ": '모바일",
      "앨라바마주1819": ": '앨라바마 주",
      "듄1823": ": '듄",
      "와디럼1824": ": '와디럼",
      "요단1825": ": '요단",
      "사막행성1826": ": '사막 행성",
      "아부다비1827": ": '아부다비",
      "탑건매버릭1834": ": '탑건: 매버릭",
      "액션1835": ": '액션",
      "샌디에이고1836": ": '샌디에이고",
      "캘리포니아1837": ": '캘리포니아",
      "해군기지1838": ": '해군 기지",
      "모뉴먼트밸리1839": ": '모뉴먼트 밸리",
      "자유여행가이드ai가계획부터현지가이드까지tr1914": "자유여행 가이드 | AI가 계획부터 현지가이드까지 TripRadio.AI",
      "혼자서도안전하고알찬자유여행ai가계획부터현지1915": "혼자서도 안전하고 알찬 자유여행! AI가 계획부터 현지 가이드까지 모든 것을 도와드립니다. 나만의 자유여행을 완벽하게 설계하세요",
      "완벽한여행계획1916": "완벽한 여행 계획",
      "실시간현지가이드1917": "실시간 현지 가이드",
      "안전정보제공1918": "안전 정보 제공",
      "현재위치기반맞춤안내2006": "현재 위치 기반 맞춤 안내",
      "개요2007": "{/* 개요 */}",
      "audiochaptercoorditemaudi2074": ", audioChapter: coordItem.audioUrl ? { id: index, title: coordItem.title || `챕터 ${index + 1}`, audioUrl: coordItem.audioUrl, duration: coordItem.duration || 120, text: coordItem.description || coordItem.title ||",
      "undefinedpoispushpoi2075": "} : undefined }; pois.push(poi); console.log(`✅ POI 생성: ${coordItem.title || `챕터 ${index + 1}`} (${lat}, ${lng})`); } else { console.warn(`⚠️ 좌표 ${index + 1} 무효:`, { title: coordItem.title, lat, lng }); } }); } else { console.warn(",
      "정확한좌표데이터가없습니다2076": "정확한 좌표 데이터가 없습니다",
      "errorresettour2078": ", error); } } }; // Reset tour const handleReset = () => { setCurrentChapter(0); if (poisWithChapters[0]) { setMapCenter({ lat: poisWithChapters[0].lat, lng: poisWithChapters[0].lng }); } }; // Get current POI info const currentPOI = poisWithChapters[currentChapter]; // 스크롤 이벤트 리스너 useEffect(() => { const handleScroll = () => { const scrolled = window.scrollY; setCurrentScrollY(scrolled); const shouldShow = scrolled > 300; console.log(",
      "현재위치기반맞춤안내pdiv2086": "현재 위치 기반 맞춤 안내 </p> </div> {/* 개요 */} <div className=",
      "스팟index12136": "스팟 ${index + 1}",
      "챕터index12137": "챕터 ${index + 1}",
      "poi생성coorditemtitle2138": "✅ POI 생성: ${coordItem.title ||",
      "좌표index1무효2139": "⚠️ 좌표 ${index + 1} 무효:",
      "errorresetto2154": ":', error); } } }; // Reset tour const handleReset = () => { setCurrentChapter(0); if (poisWithChapters[0]) { setMapCenter({ lat: poisWithChapters[0].lat, lng: poisWithChapters[0].lng }); } }; // Get current POI info const currentPOI = poisWithChapters[currentChapter]; // 스크롤 이벤트 리스너 useEffect(() => { const handleScroll = () => { const scrolled = window.scrollY; setCurrentScrollY(scrolled); const shouldShow = scrolled > 300; console.log(",
      "챕터index12565": "챕터 ${index + 1}",
      "최종업데이트newdatepagelastup2617": "최종 업데이트: {new Date(page.lastUpdated).toLocaleDateString(lang === 'ko' ? 'ko-KR' : 'en-US')}",
      "네비가이드ai2628": "네비가이드AI",
      "legalpage네비가이드ai2629": "Legal Page | 네비가이드AI",
      "유효한법적페이지타입들con2630": ", }; } } // 유효한 법적 페이지 타입들 const validPageTypes = [",
      "최종업데이트newdatepagelastup2636": "최종 업데이트: {new Date(page.lastUpdated).toLocaleDateString(lang ===",
      "pagetitle네비가이드ai2646": "${page.title} | 네비가이드AI",
      "sitename네비가이드ailocale2647": ", siteName: '네비가이드AI', locale: lang === 'ko' ? 'ko_KR' : 'en_US', type: 'website', }, twitter: { card: 'summary', title: page.title, description: seo.description, } }; } catch (error) { console.error('Failed to generate metadata for legal page:', error); return { title: 'Legal Page | 네비가이드AI', description: 'Legal information for NaviGuide AI services', }; } } // 유효한 법적 페이지 타입들 const validPageTypes = ['privacy', 'terms', 'about', 'contact']; export default async function LegalPage({ params, searchParams }: LegalPageProps) { const resolvedParams = await params; const resolvedSearchParams = await searchParams; const { type } = resolvedParams; const lang = resolvedSearchParams.lang || 'ko'; // 유효하지 않은 페이지 타입 체크 if (!validPageTypes.includes(type)) { notFound(); } try { // 서버사이드에서 직접 서비스 호출 (API 우회) legalPagesService.setContactInformation({ serviceName: 'TripRadio.AI', developerName: 'TripRadio.AI Developer', serviceAddress: { city: '서울', state: '서울시', country: '대한민국' }, email: 'contact@navidocent.com' }); let page; switch (type) { case 'privacy': page = legalPagesService.generatePrivacyPolicy(lang); break; case 'terms': page = legalPagesService.generateTermsOfService(lang); break; case 'about': page = legalPagesService.generateAboutPage(lang); break; case 'contact': page = legalPagesService.generateContactPage(lang); break; default: notFound(); } const compliance = legalPagesService.assessAdSenseCompliance(); // Markdown을 HTML로 변환하는 간단한 함수 const markdownToHtml = (markdown: string) => { return markdown .replace(/^# (.*$)/gim, '<h1 class=\"text-3xl font-bold mb-6 text-gray-900\">$1</h1>') .replace(/^## (.*$)/gim, '<h2 class=\"text-2xl font-semibold mb-4 mt-8 text-gray-800\">$1</h2>') .replace(/^### (.*$)/gim, '<h3 class=\"text-xl font-medium mb-3 mt-6 text-gray-700\">$1</h3>') .replace(/^\\*\\*(.*)\\*\\*/gim, '<strong class=\"font-semibold text-gray-900\">$1</strong>') .replace(/^- (.*$)/gim, '<li class=\"mb-1 text-gray-700\">$1</li>') .replace(/^ /gim, '<br>') .replace(/ /g, '</p><p class=\"mb-4 text-gray-600 leading-relaxed\">') .replace(/^(?!<[hl]|<li|<br)(.+)$/gim, '<p class=\"mb-4 text-gray-600 leading-relaxed\">$1</p>'); }; return ( <div className=\"min-h-screen bg-gray-50\"> {/* Header */} <header className=\"bg-white shadow-sm border-b\"> <div className=\"max-w-4xl mx-auto px-4 py-6\"> <div className=\"flex items-center justify-between\"> <div> <h1 className=\"text-2xl font-bold text-gray-900\">{page.title}</h1> <p className=\"text-sm text-gray-500 mt-1\"> 최종 업데이트: {new Date(page.lastUpdated).toLocaleDateString(lang === 'ko' ? 'ko-KR' : 'en-US')} </p> </div> {/* Language Toggle */} <div className=\"flex space-x-2\"> <a href={",
      "네비가이드ai2654": ": '네비가이드AI",
      "legalpage네비가이드ai2655": ": 'Legal Page | 네비가이드AI",
      "챕터index12747": "챕터 ${index + 1}",
      "tmypagehistorydescription2771": "{t('mypage.historyDescription') || '조회했던 가이드들의 히스토리입니다'}",
      "tmypagenohistorydescriptio2779": "{t('mypage.noHistoryDescription') || '새로운 장소를 검색하여 가이드를 생성해보세요!'}",
      "tmypagefavoritesdescriptio2783": "{t('mypage.favoritesDescription') || '실시간 가이드에서 즐겨찾기한 가이드들입니다'}",
      "tmypagenofavoritesdescript2788": "{t('mypage.noFavoritesDescription') || '실시간 가이드를 보며 별표 버튼을 클릭하여 즐겨찾기를 추가해보세요!'}",
      "tmypageofflinedescription2793": "{t('mypage.offlineDescription') || '오프라인에서도 이용할 수 있도록 다운로드한 가이드들입니다'}",
      "tmypageofflineavailable2796": "{t('mypage.offlineAvailable') || '오프라인 사용 가능'}",
      "tmypagenoofflinedescriptio2800": "{t('mypage.noOfflineDescription') || '실시간 가이드를 보며 다운로드 버튼을 클릭하여 오프라인에서도 이용할 수 있도록 저장해보세요!'}",
      "tmypageofflinefeature12802": "• {t('mypage.offlineFeature1') || '인터넷 연결 없이도 가이드 이용 가능'}",
      "tmypageofflinefeature22803": "• {t('mypage.offlineFeature2') || '오디오 파일까지 함께 저장'}",
      "관리자대시보드버튼tsig2851": "{/* 관리자 대시보드 버튼 */} {/* @ts-ignore - NextAuth 타입 확장 */} {session?.user?.isAdmin && (",
      "defaultreturnnewdatebc2872": ": default: return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime(); } }); const favoriteGuides = filteredGuides.filter(guide => guide.isFavorite); // 가이드 삭제 핸들러 const handleDeleteGuide = (id: string) => { const confirmMessage = typeof t(",
      "나의가이드2880": "나의 가이드",
      "조회했던가이드들의히스토리입니다2881": "조회했던 가이드들의 히스토리입니다",
      "가이드히스토리가없습니다2889": "가이드 히스토리가 없습니다",
      "새로운장소를검색하여가이드를생성해보세요2890": "새로운 장소를 검색하여 가이드를 생성해보세요!",
      "즐겨찾기가이드2893": "즐겨찾기 가이드",
      "실시간가이드에서즐겨찾기한가이드들입니다2894": "실시간 가이드에서 즐겨찾기한 가이드들입니다",
      "즐겨찾기한가이드가없습니다2898": "즐겨찾기한 가이드가 없습니다",
      "실시간가이드를보며별표버튼을클릭하여즐겨찾기를2899": "실시간 가이드를 보며 별표 버튼을 클릭하여 즐겨찾기를 추가해보세요!",
      "오프라인다운로드2903": "오프라인 다운로드",
      "오프라인에서도이용할수있도록다운로드한가이드들입니2904": "오프라인에서도 이용할 수 있도록 다운로드한 가이드들입니다",
      "오프라인사용가능2907": "오프라인 사용 가능",
      "오프라인재생2910": "오프라인 재생",
      "오프라인파일삭제2911": "오프라인 파일 삭제",
      "오프라인다운로드된가이드가없습니다2912": "오프라인 다운로드된 가이드가 없습니다",
      "실시간가이드를보며다운로드버튼을클릭하여오프라인2913": "실시간 가이드를 보며 다운로드 버튼을 클릭하여 오프라인에서도 이용할 수 있도록 저장해보세요!",
      "오프라인기능안내2914": "오프라인 기능 안내",
      "인터넷연결없이도가이드이용가능2915": "인터넷 연결 없이도 가이드 이용 가능",
      "개인화가이드맨춤진단2919": "개인화 가이드 맨춤 진단",
      "마이페이지2976": "마이페이지",
      "관리자대시보드버튼t2977": "}}> {/* 관리자 대시보드 버튼 */} {/* @ts-ignore - NextAuth 타입 확장 */} {session?.user?.isAdmin && ( <button onClick={() => router.push(",
      "디지털노마드생활비계산기전세계원격근무도시비3158": "디지털노마드 생활비 계산기 | 전세계 원격근무 도시 비교 TripRadio.AI",
      "전세계디지털노마드도시들의생활비wifi속도3159": "전세계 디지털노마드 도시들의 생활비, WiFi 속도, 시간대를 비교하고 최적의 원격근무 장소를 찾아보세요. 실시간 데이터 기반 스마트 추천",
      "생활비비교3160": "생활비 비교",
      "wifi속도분석3161": "WiFi 속도 분석",
      "시간대계산3162": "시간대 계산",
      "비자정보확인3188": "비자 정보 확인",
      "voidisopenfalsemess3248": "void; }>({ isOpen: false, message: '' }); // 에러 표시 헬퍼 함수 const showError = useCallback(( message: string, options?: { title?: string; errorType?: 'network' | 'timeout' | 'server' | 'validation' | 'config' | 'unknown'; details?: string; retryAction?: () => void; } ) => { setErrorModal({ isOpen: true, message, ...options }); }, []); // 에러 모달 닫기 const closeErrorModal = useCallback(() => { setErrorModal(prev => ({ ...prev, isOpen: false })); }, []); // 간격 참조 const intervalRefs = useRef",
      "howtouse3steps모바일3261": "{/* How to Use - 3 Steps - 모바일 반응형 */}",
      "화살표1모바일최적화3264": "{/* 화살표 1 - 모바일 최적화 */}",
      "화살표2모바일최적화3266": "{/* 화살표 2 - 모바일 최적화 */}",
      "searchbox모바일반응형3268": "{/* Search Box - 모바일 반응형 */}",
      "지역별탭3276": "{/* 지역별 탭 */}",
      "detailsstringretryactio3316": "; details?: string; retryAction?: () => void; } ) => { setErrorModal({ isOpen: true, message, ...options }); }, []); // 에러 모달 닫기 const closeErrorModal = useCallback(() => { setErrorModal(prev => ({ ...prev, isOpen: false })); }, []); // 간격 참조 const intervalRefs = useRef<{ word: NodeJS.Timeout | null; }>({ word: null }); // 지역별 인기 국가 데이터 (번역키 사용) const regionCountries = useMemo(() => { const countries = t(",
      "입력확인3391": "입력 확인",
      "ai가이드생성시작3392": "🚀 AI 가이드 생성 시작",
      "설정오류3397": "설정 오류",
      "서버응답오류3411": "서버 응답 오류",
      "retryactionhandlea3412": "}`, retryAction: () => handleAIGeneration() } ); } } else { // 4단계: API 에러 처리 let errorData; try { errorData = await response.json(); } catch { errorData = { error: `HTTP ${response.status}: ${response.statusText}`, details:",
      "요청제한3416": "요청 제한",
      "서버오류3418": "서버 오류",
      "입력오류3420": "입력 오류",
      "가이드생성실패3421": "가이드 생성 실패",
      "시간초과3425": "시간 초과",
      "연결실패3427": "연결 실패",
      "네트워크오류3429": "네트워크 오류",
      "알수없는오류3430": "알 수 없는 오류",
      "알수없는오류3431": "알 수 없는 오류",
      "입력확인3433": "입력 확인",
      "truerouterpushguide3434": ", true); router.push(`/guide/${encodeURIComponent(query.trim())}/tour?lang=${currentLanguage}`); }, [query, audioPlaying, router, t, setLoadingState, currentLanguage, showError]); // 가이드 생성 중일 때 모노크롬 로딩 화면 표시 if (isAnyLoading) { const currentLoadingType = Object.entries(loadingStates).find(([_, loading]) => loading)?.[0] ||",
      "divdivhowtous3454": ")} </div> </div> {/* How to Use - 3 Steps - 모바일 반응형 */} <div className=",
      "divdivdiv화살표3457": ")}</div> </div> </div> {/* 화살표 1 - 모바일 최적화 */} <div className=",
      "divdivdiv화살표3460": ")}</div> </div> </div> {/* 화살표 2 - 모바일 최적화 */} <div className=",
      "divdivdivdiv3463": ")}</div> </div> </div> </div> </div> </div> {/* Search Box - 모바일 반응형 */} <div className=",
      "pdiv지역별탭3474": ")} </p> </div> {/* 지역별 탭 */} <div className=",
      "retryactionhandleaig3518": ", retryAction: () => handleAIGeneration() } ); return; } } else { console.warn('⚠️ 환경 설정 체크 실패, 계속 진행'); } // 2단계: AI 가이드 생성 API 호출 console.log('🤖 2단계: AI 가이드 생성 요청 시작'); const startTime = Date.now(); const response = await fetch('/api/ai/generate-guide-with-gemini', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json', 'User-Agent': 'GuideAI/1.0' }, body: JSON.stringify({ location, userProfile: { language: currentLanguage, interests: ['문화', '역사'], knowledgeLevel: '중급', ageGroup: '30대', preferredStyle: '친근함', tourDuration: 90, companions: 'solo' }, enhanceCoordinates: true, useEnhancedChapters: true }), signal: AbortSignal.timeout(60000) // 60초 타임아웃 }); const responseTime = Date.now() - startTime; console.log('📡 API 응답 수신:', { status: response.status, statusText: response.statusText, responseTime:",
      "retryactionhandleaig3522": ", retryAction: () => handleAIGeneration() } ); } } else { // 4단계: API 에러 처리 let errorData; try { errorData = await response.json(); } catch { errorData = { error:",
      "retryactionsettime3526": ", retryAction: () => { setTimeout(() => handleAIGeneration(), parseInt(retryAfter) * 1000); } } ); } else if (response.status === 500) { showError( 'AI 서비스에 일시적인 문제가 발생했습니다. 잠시 후 다시 시도해주세요.', { errorType: 'server', title: '서버 오류', details:",
      "retryactionhandleaig3527": ", retryAction: () => handleAIGeneration() } ); } else if (response.status === 400) { showError( '입력하신 장소 정보를 확인해주세요.', { errorType: 'validation', title: '입력 오류', details:",
      "retryactionhandleaig3529": ", retryAction: () => handleAIGeneration() } ); } } } catch (error) { const responseTime = Date.now() - Date.now(); console.error('❌ AI 생성 예외 발생:', { error: error instanceof Error ? error.message : String(error), stack: error instanceof Error ? error.stack : undefined, name: error instanceof Error ? error.name : 'UnknownError', location, language: currentLanguage, timestamp: new Date().toISOString() }); // 네트워크 에러별 사용자 친화적 메시지 if (error instanceof Error) { if (error.name === 'AbortError' || error.message.includes('timeout')) { showError( '요청 시간이 초과되었습니다. 네트워크 연결을 확인하고 다시 시도해주세요.', { errorType: 'timeout', title: '시간 초과', details:",
      "retryactionhandleaig3530": ", retryAction: () => handleAIGeneration() } ); } else if (error.message.includes('Failed to fetch')) { showError( '네트워크 연결에 문제가 있습니다. 인터넷 연결을 확인해주세요.', { errorType: 'network', title: '연결 실패', details:",
      "retryactionhandleaig3531": ", retryAction: () => handleAIGeneration() } ); } else if (error.message.includes('NetworkError')) { showError( '네트워크 오류가 발생했습니다. 잠시 후 다시 시도해주세요.', { errorType: 'network', title: '네트워크 오류', details:",
      "retryactionhandleaig3532": ", retryAction: () => handleAIGeneration() } ); } else { showError( t('home.alerts.networkError') as string, { errorType: 'unknown', title: '알 수 없는 오류', details:",
      "retryactionhandleaig3533": ", retryAction: () => handleAIGeneration() } ); } } else { showError( t('home.alerts.networkError') as string, { errorType: 'unknown', title: '알 수 없는 오류', details:",
      "retryactionhandleaig3534": ", retryAction: () => handleAIGeneration() } ); } } finally { console.groupEnd(); setLoadingState('guide', false); setCurrentLoadingQuery(''); } }; // 오디오 재생 (지연 제거, 분리된 로딩 상태) const handleAudioPlayback = useCallback(() => { if (!query.trim() || !isMountedRef.current) { showError(t('home.alerts.enterLocation') as string, { errorType: 'validation', title: '입력 확인' }); return; } setCurrentLoadingQuery(query.trim()); if (isMountedRef.current) setAudioPlaying(!audioPlaying); setLoadingState('tour', true); router.push(",
      "입력확인3559": ": '입력 확인",
      "설정오류3562": ": '설정 오류",
      "서버응답오류3567": ": '서버 응답 오류",
      "요청제한3569": ": '요청 제한",
      "서버오류3570": ": '서버 오류",
      "입력오류3571": ": '입력 오류",
      "가이드생성실패3572": ": '가이드 생성 실패",
      "시간초과3573": ": '시간 초과",
      "연결실패3574": ": '연결 실패",
      "네트워크오류3575": ": '네트워크 오류",
      "알수없는오류3576": ": '알 수 없는 오류",
      "알수없는오류3577": ": '알 수 없는 오류",
      "입력확인3578": ": '입력 확인",
      "콘텐츠3596": "{/* 콘텐츠 */}",
      "pdiv콘텐츠di3599": ")} </p> </div> {/* 콘텐츠 */} <div className=",
      "콘텐츠3618": "{/* 콘텐츠 */}",
      "pdiv콘텐츠di3621": ")} </p> </div> {/* 콘텐츠 */} <div className=",
      "광화문3739": "광화문",
      "근정전3740": "근정전",
      "근정전3741": "근정전",
      "경복궁3742": "경복궁",
      "서울종로구3743": "서울 종로구",
      "조선법궁건축3744": "조선 법궁 건축",
      "조선왕조의정궁3745": "조선 왕조의 정궁",
      "광화문테스트3746": "광화문 테스트",
      "테스트내용입니다3747": "테스트 내용입니다.",
      "광화문3754": ": \"광화문",
      "광화문3755": ": \"광화문",
      "근정전3756": ": \"근정전",
      "근정전3757": ": \"근정전",
      "경복궁3758": ": \"경복궁",
      "서울종로구3759": ": \"서울 종로구",
      "조선법궁건축3760": ": \"조선 법궁 건축",
      "조선왕조의정궁3761": ": \"조선 왕조의 정궁",
      "광화문테스트3762": ": \"광화문 테스트",
      "테스트내용입니다3763": ": \"테스트 내용입니다.",
      "경복궁3785": "경복궁",
      "서울종로구3786": "서울 종로구",
      "조선법궁건축3787": "조선 법궁 건축",
      "조선왕조의정궁3788": "조선 왕조의 정궁",
      "광화문3789": "광화문",
      "광화문3790": "광화문",
      "근정전3791": "근정전",
      "근정전3792": "근정전",
      "광화문테스트3793": "광화문 테스트",
      "테스트내용입니다3794": "테스트 내용입니다.",
      "경복궁3795": "경복궁",
      "경복궁3796": ": \"경복궁",
      "서울종로구3797": ": \"서울 종로구",
      "조선법궁건축3798": ": \"조선 법궁 건축",
      "조선왕조의정궁3799": ": \"조선 왕조의 정궁",
      "광화문3800": ": \"광화문",
      "광화문3801": ": \"광화문",
      "근정전3802": ": \"근정전",
      "근정전3803": ": \"근정전",
      "광화문테스트3804": ": \"광화문 테스트",
      "테스트내용입니다3805": ": \"테스트 내용입니다.",
      "경복궁3806": ": \"경복궁",
      "투어라디오앱ai가만드는실시간여행해설방송3894": "투어라디오 앱 | AI가 만드는 실시간 여행 해설 방송 TripRadio.AI",
      "여행지에서들을수있는특별한투어라디오ai가실3895": "여행지에서 들을 수 있는 특별한 투어라디오! AI가 실시간으로 만들어주는 개인 맞춤형 여행 해설 방송을 무료로 경험하세요",
      "실시간방송형태3896": "실시간 방송 형태",
      "재미있는스토리텔링3897": "재미있는 스토리텔링",
      "위치기반자동재생3898": "위치 기반 자동 재생",
      "여행라디오앱여행중들을수있는특별한라디오4031": "여행라디오 앱 | 여행 중 들을 수 있는 특별한 라디오 TripRadio.AI",
      "지루한여행은이제그만ai가실시간으로만들어주는4032": "지루한 여행은 이제 그만! AI가 실시간으로 만들어주는 나만의 여행라디오로 특별한 여행 경험을 시작하세요",
      "실시간라디오제작4033": "실시간 라디오 제작",
      "개인맞춤형콘텐츠4034": "개인 맞춤형 콘텐츠",
      "전세계어디든4035": "전 세계 어디든",
      "진짜라디오느낌4036": "진짜 라디오 느낌",
      "여행가이드추천1위전세계어디든ai여행가4158": "여행 가이드 추천 1위 | 전세계 어디든 AI 여행 가이드 TripRadio.AI",
      "전세계모든여행지의숨겨진이야기를ai가실시간으로4159": "전세계 모든 여행지의 숨겨진 이야기를 AI가 실시간으로 들려드립니다. 나만의 맞춤형 여행 경험을 무료로 시작하세요!",
      "전세계모든여행지4160": "전세계 모든 여행지",
      "ai실시간생성4161": "AI 실시간 생성",
      "개인맞춤추천4162": "개인 맞춤 추천",
      "ai여행계획도구맞춤형여행일정자동생성4804": "AI 여행 계획 도구 | 맞춤형 여행 일정 자동 생성 TripRadio.AI",
      "ai가당신의취향과예산에맞춰완벽한여행일정을4805": "AI가 당신의 취향과 예산에 맞춰 완벽한 여행 일정을 자동으로 생성합니다. 숙소, 교통, 관광지까지 한 번에 계획하세요",
      "ai일정생성4806": "AI 일정 생성",
      "실시간추천4807": "실시간 추천",
      "예산관리4808": "예산 관리",
      "맞춤형코스4809": "맞춤형 코스",
      "노마드정보4835": "노마드 정보",
      "비자정보4836": "비자 정보",
      "ai여행계획4918": "AI 여행 계획",
      "여행계획링크가복사되었습니다4919": "여행 계획 링크가 복사되었습니다! 📋",
      "ai여행계획5222": ": 'AI 여행 계획",
      "비자체커전세계비자요구사항확인triprad5557": "비자 체커 | 전세계 비자 요구사항 확인 TripRadio.AI",
      "여행계획전필수목적지별비자요구사항디지털노5558": "여행 계획 전 필수! 목적지별 비자 요구사항, 디지털노마드 비자, 무비자 여행 정보를 한 번에 확인하세요",
      "실시간비자정보5559": "실시간 비자 정보",
      "무비자여행안내5560": "무비자 여행 안내",
      "디지털노마드비자5561": "디지털노마드 비자",
      "서류체크리스트5562": "서류 체크리스트",
      "출입국가이드5563": "출입국 가이드"
    },
    "form": {
      "헤더153": "{/* 헤더 */}",
      "formatnumberstatsusersnew164": "+{formatNumber(stats.users.newSignups)} 신규",
      "완료율formatpercentagestatsgu167": "완료율 {formatPercentage(stats.guides.completionRate)}",
      "평균statsengagementavgsessio173": "평균 {stats.engagement.avgSessionDuration}분 세션",
      "언어별가이드분포177": "{/* 언어별 가이드 분포 */}",
      "평균응답시간183": "평균 응답시간",
      "서버부하185": "서버 부하",
      "사용자통계186": "{/* 사용자 통계 */}",
      "주간활성사용자189": "주간 활성 사용자",
      "월간활성사용자190": "월간 활성 사용자",
      "사용자유지율191": "사용자 유지율",
      "콘텐츠통계192": "{/* 콘텐츠 통계 */}",
      "주간생성량195": "주간 생성량",
      "평균가이드길이196": "평균 가이드 길이",
      "헤더divclassname208": "{/* 헤더 */} <div className=",
      "formatnumberstatsusersnew219": "+{formatNumber(stats.users.newSignups)} 신규 </p> </div> <div className=",
      "완료율formatpercentagestatsgu222": "완료율 {formatPercentage(stats.guides.completionRate)} </p> </div> <div className=",
      "평균statsengagementavgsessio228": "평균 {stats.engagement.avgSessionDuration}분 세션 </p> </div> <div className=",
      "formatpercentagelocationper232": "{formatPercentage(location.percentage)}</p> </div> </div> ))} </div> </div> {/* 언어별 가이드 분포 */} <div className=",
      "평균응답시간spanspanclassname238": "평균 응답시간</span> <span className=",
      "서버부하spanspanclassname240": "서버 부하</span> <span className=",
      "주간활성사용자spanspanclassna244": "주간 활성 사용자</span> <span className=",
      "월간활성사용자spanspanclassna245": "월간 활성 사용자</span> <span className=",
      "사용자유지율spanspanclassname246": "사용자 유지율</span> <span className=",
      "주간생성량spanspanclassname250": "주간 생성량</span> <span className=",
      "평균가이드길이spanspanclassna251": "평균 가이드 길이</span> <span className=",
      "returndivclassname254": "; }; return ( <div className=\"min-h-screen bg-gray-50\"> {/* 헤더 */} <div className=\"bg-white border-b border-gray-200\"> <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\"> <div className=\"flex items-center justify-between h-16\"> <div className=\"flex items-center space-x-4\"> <button onClick={() => router.push('/')} className=\"text-gray-500 hover:text-black transition-colors\" > ← 홈으로 </button> <h1 className=\"text-xl font-semibold text-black\">관리자 대시보드</h1> </div> <div className=\"flex items-center space-x-4\"> <button onClick={loadDashboardData} disabled={loading} className=\"flex items-center space-x-2 px-3 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 focus:ring-2 focus:ring-black text-sm disabled:opacity-50\" > <RefreshCw className={",
      "formconstshowpassword492": "('form'); const [showPassword, setShowPassword] = useState(false); const [showConfirmPassword, setShowConfirmPassword] = useState(false); // 타이머 관리를 위한 refs const timeoutRefs = useRef",
      "ifformdataverificatio496": "=> { if (!formData.verificationCode || formData.verificationCode.length !== 6) { safeSetState(() => setErrors({ verificationCode: String(t('auth.enter6DigitCode')) || '6자리 인증 코드를 입력해주세요.' })); return; } setLoadingState('emailVerification', true); safeSetState(() => setErrors({})); try { const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), 10000); const response = await fetch('/api/auth/email-verification', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email: formData.email, verificationCode: formData.verificationCode, action: 'verify_code' }), signal: controller.signal }); clearTimeout(timeoutId); const data = await response.json(); if (!response.ok) { safeSetState(() => { setErrors({ verificationCode: data.error || String(t('auth.verificationFailed')) || '인증에 실패했습니다.' }); // 실패 시 입력 필드 초기화 setCodeInputs(['', '', '', '', '', '']); setFormData(prev => ({ ...prev, verificationCode: '' })); }); // DOM 접근 안전성 확인 if (typeof document !== 'undefined') { document.getElementById('code-0')?.focus(); } } else { safeSetState(() => { setEmailVerified(true); setErrors({ success: String(t('auth.emailVerificationComplete')) || '이메일 인증이 완료되었습니다!' }); }); // 안전한 지연 실행 timeoutRefs.current.completionRedirect = setTimeout(() => { if (isMountedRef.current) { handleCompleteSignup(); timeoutRefs.current.completionRedirect = null; } }, 2000); } } catch (error) { if ((error as Error).name === 'AbortError') { safeSetState(() => setErrors({ verificationCode: String(t('auth.requestTimeout')) || '요청 시간이 초과되었습니다.' })); } else { safeSetState(() => setErrors({ verificationCode: String(t('auth.networkError')) || '네트워크 오류가 발생했습니다.' })); } } finally { setLoadingState('emailVerification', false); } }, [formData.email, formData.verificationCode, t, safeSetState, setLoadingState, handleCompleteSignup]); // 개선된 인증코드 입력 핸들러 const handleCodeChange = useCallback((index: number, value: string) => { if (value.length > 1) return; const newInputs = [...codeInputs]; newInputs[index] = value; setCodeInputs(newInputs); // 자동 포커스 이동 (서버사이드 렌더링 안전) if (value && index",
      "prevverificationcode497": "({ ...prev, verificationCode: fullCode })); // 6자리 완성 시 자동 검증 (메모리 안전) if (fullCode.length === 6) { // 이전 타이머 정리 if (timeoutRefs.current.autoVerification) { clearTimeout(timeoutRefs.current.autoVerification); } timeoutRefs.current.autoVerification = setTimeout(() => { if (isMountedRef.current) { handleVerifyCode(); timeoutRefs.current.autoVerification = null; } }, 500); } }, [codeInputs, handleVerifyCode]); // 개선된 키보드 핸들러 (접근성 포함) const handleKeyDown = useCallback((index: number, e: React.KeyboardEvent) => { if (typeof document === 'undefined') return; switch (e.key) { case 'Backspace': if (!codeInputs[index] && index > 0) { const prevInput = document.getElementById(`code-${index - 1}`); prevInput?.focus(); } break; case 'Tab': // Tab 키 자연스러운 이동 허용 break; case 'ArrowLeft': e.preventDefault(); if (index > 0) { const prevInput = document.getElementById(`code-${index - 1}`); prevInput?.focus(); } break; case 'ArrowRight': e.preventDefault(); if (index",
      "safesetstatesetc499": "=> { safeSetState(() => { setCodeInputs(['', '', '', '', '', '']); setFormData(prev => ({ ...prev, verificationCode: '' })); }); await handleSendVerificationCode(); }, [handleSendVerificationCode, safeSetState]); // 개선된 Google 로그인 (메모리 누수 방지) const handleGoogleSignIn = useCallback(async (): Promise",
      "epreventdefaultsetlo502": "=> { e.preventDefault(); setLoadingState('generalSignIn', true); safeSetState(() => setErrors({})); try { const result = await signIn('credentials', { email: formData.email, password: formData.password, redirect: false, }); if (!isMountedRef.current) return; if (result?.error) { safeSetState(() => setErrors({ general: result.error || String(t('auth.loginFailed')) || '로그인 실패' })); } else if (result?.ok) { router.push(callbackUrl); } } catch (error) { safeSetState(() => setErrors({ general: String(t('auth.loginError')) || '로그인 중 오류가 발생했습니다.' })); } finally { setLoadingState('generalSignIn', false); } }, [formData.email, formData.password, callbackUrl, router, t, setLoadingState, safeSetState]); // 개선된 회원가입 폼 제출 const handleSignupForm = useCallback((e: React.FormEvent): void => { e.preventDefault(); safeSetState(() => setErrors({})); // 폼 유효성 검증 const validationErrors: {[key: string]: string} = {}; if (!formData.name.trim()) { validationErrors.name = String(t('auth.nameRequired')) || '이름을 입력해주세요.'; } if (!formData.email) { validationErrors.email = String(t('auth.emailRequired')) || '이메일을 입력해주세요.'; } if (formData.password.length",
      "0safesetstateseterr503": "0) { safeSetState(() => setErrors(validationErrors)); return; } handleSendVerificationCode(); }, [formData, t, safeSetState, handleSendVerificationCode]); // 개선된 입력 핸들러 const handleInputChange = useCallback((e: React.ChangeEvent",
      "voidconstnameval504": "): void => { const { name, value } = e.target; safeSetState(() => { setFormData(prev => ({ ...prev, [name]: value })); if (errors[name]) { setErrors(prev => ({ ...prev, [name]: '' })); } }); }, [errors, safeSetState]); // 카운트다운 포맷 함수 const formatCountdown = useCallback((seconds: number): string => { const mins = Math.floor(seconds / 60); const secs = seconds % 60; return `${mins}:${secs.toString().padStart(2, '0')}`; }, []); return (",
      "님환영합니다507": "님, 환영합니다!",
      "이제ai가이드와함께특별한여행을시작하세요508": "이제 AI 가이드와 함께 특별한 여행을 시작하세요.",
      "인증코드를전송했습니다512": "인증 코드를 전송했습니다.",
      "6자리인증코드입력513": "{/* 6자리 인증 코드 입력 */}",
      "인증코드가만료되었습니다517": "인증 코드가 만료되었습니다.",
      "constshowpasswordsetsho527": "); const [showPassword, setShowPassword] = useState(false); const [showConfirmPassword, setShowConfirmPassword] = useState(false); // 타이머 관리를 위한 refs const timeoutRefs = useRef<{ googleSignIn: NodeJS.Timeout | null; emailVerification: NodeJS.Timeout | null; autoVerification: NodeJS.Timeout | null; completionRedirect: NodeJS.Timeout | null; }>({ googleSignIn: null, emailVerification: null, autoVerification: null, completionRedirect: null }); // 컴포넌트 마운트 상태 추적 const isMountedRef = useRef(true); // 폼 데이터 const [formData, setFormData] = useState({ email:",
      "상태관리consterrorsse528": "}); // 상태 관리 const [errors, setErrors] = useState<{[key: string]: string}>({}); const [emailSent, setEmailSent] = useState(false); const [countdown, setCountdown] = useState(0); const [emailVerified, setEmailVerified] = useState(false); const [codeInputs, setCodeInputs] = useState([",
      "회원가입이완료되었습니다531": "🎉 회원가입이 완료되었습니다!",
      "falseformdatats534": ", false); } }, [formData, t, safeSetState, setLoadingState, setAuthMode, setSignupStep]); // 개선된 인증 코드 확인 (메모리 안전) const handleVerifyCode = useCallback(async (): Promise<void> => { if (!formData.verificationCode || formData.verificationCode.length !== 6) { safeSetState(() => setErrors({ verificationCode: String(t(",
      "6자리인증코드를입력해주세요535": "6자리 인증 코드를 입력해주세요.",
      "dom접근안전성확인if537": "})); }); // DOM 접근 안전성 확인 if (typeof document !==",
      "이메일을입력해주세요546": "이메일을 입력해주세요.",
      "올바른이메일형식을입력해주세요547": "올바른 이메일 형식을 입력해주세요.",
      "truesafesetstatese548": ", true); safeSetState(() => setErrors({})); try { const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), 10000); // 10초 타임아웃 const response = await fetch(",
      "awaithandlesendverif554": "})); }); await handleSendVerificationCode(); }, [handleSendVerificationCode, safeSetState]); // 개선된 Google 로그인 (메모리 누수 방지) const handleGoogleSignIn = useCallback(async (): Promise<void> => { if (loadingStates.googleSignIn) return; // 중복 클릭 방지 setLoadingState(",
      "이름을입력해주세요574": "이름을 입력해주세요.",
      "이메일을입력해주세요575": "이메일을 입력해주세요.",
      "비밀번호는최소6자리이상이어야합니다576": "비밀번호는 최소 6자리 이상이어야 합니다.",
      "비밀번호가일치하지않습니다577": "비밀번호가 일치하지 않습니다.",
      "errorssafeset578": "})); } }); }, [errors, safeSetState]); // 카운트다운 포맷 함수 const formatCountdown = useCallback((seconds: number): string => { const mins = Math.floor(seconds / 60); const secs = seconds % 60; return `${mins}:${secs.toString().padStart(2,",
      "인증코드가만료되었습니다pbutton589": "인증 코드가 만료되었습니다.</p> )} <button onClick={handleResendCode} disabled={isLoading || countdown > 540} className={` inline-flex items-center space-x-2 px-4 py-2 text-sm font-medium rounded-xl transition-all duration-300 transform hover:scale-105 ${countdown > 540 ?",
      "서울2624": "서울",
      "서울시2625": "서울시",
      "대한민국2626": "대한민국",
      "서울2632": "서울",
      "서울시2633": "서울시",
      "대한민국2634": "대한민국",
      "서울2651": ": '서울",
      "서울시2652": ": '서울시",
      "대한민국2653": ": '대한민국",
      "서울2656": ": '서울",
      "서울시2657": ": '서울시",
      "대한민국2658": ": '대한민국",
      "consthoursmathfloormin2768": "{ const hours = Math.floor(minutes / 60); const mins = minutes % 60; if (hours > 0) { return `${hours}${t('common.hours') || '시간'} ${mins}${t('common.minutes') || '분'}`; } return `${mins}${t('common.minutes') || '분'}`; }; // 탭 컨텐츠 렌더링 const renderTabContent = () => { switch (activeTab) { case 'history': return (",
      "guidechapterstmypage2777": "📚 {guide.chapters}{t('mypage.chapters') || '개 챕터'}",
      "시간2878": "시간",
      "개챕터2888": "개 챕터",
      "awaitperformcompletelogout2966": "); await performCompleteLogout(); await simpleCacheInvalidation(); // 2. 서버 사이드 강제 로그아웃 API 호출 try { console.log(",
      "hourstcommonhours2998": "${hours}${t('common.hours') || '시간'} ${mins}${t('common.minutes') || '분'}",
      "국기와국가명3281": "{/* 국기와 국가명 */}",
      "styletransformtranslate3448": "style={{ transform: `translateY(-${currentLandmarkIndex * (isMobile ? 42 : 40)}px)`, // 새 높이에 맞춰 조정 letterSpacing:",
      "글자간격약간늘려서가독성향상l3449": "// 글자 간격 약간 늘려서 가독성 향상 }} > {landmarks.map((landmark, index) => ( <span key={index} className=",
      "div국기와국가명divcl3479": "</div> {/* 국기와 국가명 */} <div className=",
      "countrynameh3div3480": "{country.name} </h3> </div> {/* 인기 배지 - 모노크롬 */} <div className=",
      "attractionspanbutton3488": "{attraction}</span> </button> ))} </div> {/* 정보 표시 영역 */} <div className=",
      "새높이에맞춰조정letterspacing3538": ", // 새 높이에 맞춰 조정 letterSpacing: '0.05em' // 글자 간격 약간 늘려서 가독성 향상 }} > {landmarks.map((landmark, index) => ( <span key={index} className=\"block font-bold whitespace-nowrap w-full\" style={{ height: isMobile ? '42px' : '40px', // 높이 증가로 글자 간격 개선 lineHeight: isMobile ? '42px' : '40px', // 라인 높이 증가 textAlign: 'center', fontSize: isMobile ? '1.3em' : '1.3em', // 30% 증가 (기본 1em → 1.3em) letterSpacing: '0.05em' // 글자 간격 약간 늘려서 가독성 향상 }}> {t(",
      "맛집탐방쇼핑역사문화자연4207": "{['맛집 탐방', '쇼핑', '역사/문화', '자연/힐링', '액티비티', '사진촬영', '야경', '온천/스파'].map((interest) => (",
      "맛집탐방4812": "맛집 탐방",
      "쇼핑4813": "쇼핑",
      "역사문화4814": "역사/문화",
      "자연힐링4815": "자연/힐링",
      "액티비티4816": "액티비티",
      "사진촬영4817": "사진촬영",
      "야경4818": "야경",
      "온천스파4819": "온천/스파",
      "제주도4898": "제주도"
    },
    "navigation": {
      "비밀번호284": "비밀번호:",
      "로그인페이지285": "로그인 페이지:",
      "비밀번호spannaviadmin1134p316": "비밀번호:</span> naviadmin1134</p> <p><span className=",
      "로그인페이지spanahref317": "로그인 페이지:</span> <a href=",
      "비밀번호417": "비밀번호:",
      "대시보드418": "대시보드:",
      "비밀번호spannaviadmin1134p445": "비밀번호:</span> naviadmin1134</p> <p><span className=",
      "대시보드spanahref446": "대시보드:</span> <a href=",
      "admindashboardapd447": "/admin/dashboard </a> </p> </div> </div> {/* 홈으로 돌아가기 */} <div className=",
      "모든좌표가클립보드에복사되었습니다2106": "모든 좌표가 클립보드에 복사되었습니다!",
      "동적임포트로클라이언트전용컴포넌트로드2532": "; // 동적 임포트로 클라이언트 전용 컴포넌트 로드 const MinimalTourContent = dynamic(() => import(",
      "interfacelegalpagepropsp2622": "; interface LegalPageProps { params: Promise<{ type: string }>; searchParams: Promise<{ lang?: string }>; } // SEO 메타데이터 생성 export async function generateMetadata({ params, searchParams }: LegalPageProps): Promise<Metadata> { const resolvedParams = await params; const resolvedSearchParams = await searchParams; const { type } = resolvedParams; const lang = resolvedSearchParams.lang ||",
      "minimaltourcontent를동적im2730": "; // MinimalTourContent를 동적 import (서버 fetch 방지) const MinimalTourContent = dynamic(() => import(",
      "idhistorylabelt2856": "{[ { id: 'history', label: t('mypage.history') || '나의 가이드', shortLabel: t('mypage.historyShort') || '가이드', icon: Folder }, { id: 'favorites', label: t('mypage.favoriteGuides') || '즐겨찾기 가이드', shortLabel: t('mypage.favoritesShort') || '즐겨찾기', icon: Heart }, { id: 'offline', label: t('mypage.offline') || '오프라인 다운로드', shortLabel: t('mypage.offlineShort') || '오프라인', icon: Download }, { id: 'settings', label: t('mypage.settings') || '세팅', shortLabel: t('mypage.settingsShort') || '세팅', icon: Settings } ].map(({ id, label, shortLabel, icon: Icon }) => (",
      "나의가이드2982": "나의 가이드",
      "1단계환경설정체크중3394": "🔍 1단계: 환경 설정 체크 중..."
    },
    "card": {
      "회원가입완료상태authmode505": "{/* 회원가입 완료 상태 */} {authMode === 'signup' && signupStep === 'completed' && (",
      "회원가입완료상태authmode579": "{/* 회원가입 완료 상태 */} {authMode ==="
    },
    "description": {
      "파리의상징적랜드마크671": "파리의 상징적 랜드마크",
      "로마콜로세움672": "로마 콜로세움",
      "이탈리아673": "이탈리아",
      "유럽674": "유럽",
      "고대로마의영광675": "고대 로마의 영광",
      "사그라다파밀리아676": "사그라다 파밀리아",
      "스페인677": "스페인",
      "유럽678": "유럽",
      "가우디의미완성걸작679": "가우디의 미완성 걸작",
      "루브르박물관680": "루브르 박물관",
      "프랑스681": "프랑스",
      "유럽682": "유럽",
      "세계최대미술관683": "세계 최대 미술관",
      "베르사유궁전684": "베르사유 궁전",
      "프랑스685": "프랑스",
      "유럽686": "유럽",
      "프랑스왕실의화려함687": "프랑스 왕실의 화려함",
      "만리장성688": "만리장성",
      "중국689": "중국",
      "아시아690": "아시아",
      "인류최대의건축물691": "인류 최대의 건축물",
      "후지산692": "후지산",
      "일본693": "일본",
      "아시아694": "아시아",
      "일본의상징695": "일본의 상징",
      "앙코르와트696": "앙코르와트",
      "캄보디아697": "캄보디아",
      "아시아698": "아시아",
      "크메르문명의걸작699": "크메르 문명의 걸작",
      "타지마할700": "타지마할",
      "인도701": "인도",
      "아시아702": "아시아",
      "사랑의무덤703": "사랑의 무덤",
      "경복궁704": "경복궁",
      "한국705": "한국",
      "아시아706": "아시아",
      "조선왕조의정궁707": "조선왕조의 정궁",
      "자유의여신상708": "자유의 여신상",
      "미국709": "미국",
      "아메리카710": "아메리카",
      "자유와민주주의의상징711": "자유와 민주주의의 상징",
      "마추픽추712": "마추픽추",
      "페루713": "페루",
      "아메리카714": "아메리카",
      "공중도시잉카의비밀715": "공중도시 잉카의 비밀",
      "그랜드캐니언716": "그랜드캐니언",
      "미국717": "미국",
      "아메리카718": "아메리카",
      "지구의상처719": "지구의 상처",
      "피라미드720": "피라미드",
      "이집트721": "이집트",
      "아프리카722": "아프리카",
      "고대이집트의신비723": "고대 이집트의 신비",
      "빅토리아폭포724": "빅토리아 폭포",
      "잠비아짐바브웨725": "잠비아/짐바브웨",
      "아프리카726": "아프리카",
      "천둥치는연기727": "천둥치는 연기",
      "시드니오페라하우스728": "시드니 오페라하우스",
      "호주729": "호주",
      "오세아니아730": "오세아니아",
      "현대건축의아이콘731": "현대 건축의 아이콘",
      "울루루732": "울루루",
      "호주733": "호주",
      "오세아니아734": "오세아니아",
      "호주원주민의성지735": "호주 원주민의 성지",
      "유럽736": "유럽",
      "아시아737": "아시아",
      "아메리카738": "아메리카",
      "아프리카739": "아프리카",
      "오세아니아740": "오세아니아",
      "역사와문화747": "역사와 문화",
      "현지정보748": "현지 정보",
      "맞춤추천749": "맞춤 추천",
      "파리의상징적랜드마크804": ": '파리의 상징적 랜드마크",
      "로마콜로세움805": ": '로마 콜로세움",
      "이탈리아806": ": '이탈리아",
      "유럽807": ": '유럽",
      "고대로마의영광808": ": '고대 로마의 영광",
      "사그라다파밀리아809": ": '사그라다 파밀리아",
      "스페인810": ": '스페인",
      "유럽811": ": '유럽",
      "가우디의미완성걸작812": ": '가우디의 미완성 걸작",
      "루브르박물관813": ": '루브르 박물관",
      "프랑스814": ": '프랑스",
      "유럽815": ": '유럽",
      "세계최대미술관816": ": '세계 최대 미술관",
      "베르사유궁전817": ": '베르사유 궁전",
      "프랑스818": ": '프랑스",
      "유럽819": ": '유럽",
      "프랑스왕실의화려함820": ": '프랑스 왕실의 화려함",
      "만리장성821": ": '만리장성",
      "중국822": ": '중국",
      "아시아823": ": '아시아",
      "인류최대의건축물824": ": '인류 최대의 건축물",
      "후지산825": ": '후지산",
      "일본826": ": '일본",
      "아시아827": ": '아시아",
      "일본의상징828": ": '일본의 상징",
      "앙코르와트829": ": '앙코르와트",
      "캄보디아830": ": '캄보디아",
      "아시아831": ": '아시아",
      "크메르문명의걸작832": ": '크메르 문명의 걸작",
      "타지마할833": ": '타지마할",
      "인도834": ": '인도",
      "아시아835": ": '아시아",
      "사랑의무덤836": ": '사랑의 무덤",
      "경복궁837": ": '경복궁",
      "한국838": ": '한국",
      "아시아839": ": '아시아",
      "조선왕조의정궁840": ": '조선왕조의 정궁",
      "자유의여신상841": ": '자유의 여신상",
      "미국842": ": '미국",
      "아메리카843": ": '아메리카",
      "자유와민주주의의상징844": ": '자유와 민주주의의 상징",
      "마추픽추845": ": '마추픽추",
      "페루846": ": '페루",
      "아메리카847": ": '아메리카",
      "공중도시잉카의비밀848": ": '공중도시 잉카의 비밀",
      "그랜드캐니언849": ": '그랜드캐니언",
      "미국850": ": '미국",
      "아메리카851": ": '아메리카",
      "지구의상처852": ": '지구의 상처",
      "피라미드853": ": '피라미드",
      "이집트854": ": '이집트",
      "아프리카855": ": '아프리카",
      "고대이집트의신비856": ": '고대 이집트의 신비",
      "빅토리아폭포857": ": '빅토리아 폭포",
      "잠비아짐바브웨858": ": '잠비아/짐바브웨",
      "아프리카859": ": '아프리카",
      "천둥치는연기860": ": '천둥치는 연기",
      "시드니오페라하우스861": ": '시드니 오페라하우스",
      "호주862": ": '호주",
      "오세아니아863": ": '오세아니아",
      "현대건축의아이콘864": ": '현대 건축의 아이콘",
      "울루루865": ": '울루루",
      "호주866": ": '호주",
      "오세아니아867": ": '오세아니아",
      "호주원주민의성지868": ": '호주 원주민의 성지",
      "자유로운시간938": "자유로운 시간",
      "전세계지원939": "전 세계 지원",
      "스마트폰으로940": "스마트폰으로",
      "서울관악구1083": "서울 관악구",
      "유명한계단씬촬영지1084": "유명한 계단 씬 촬영지",
      "성북동계단길1085": "성북동 계단길",
      "서울성북구1086": "서울 성북구",
      "메인포스터촬영지1087": "메인 포스터 촬영지",
      "쉬움1088": "쉬움",
      "아카데미작품상1089": "아카데미 작품상",
      "인천중구1096": "인천 중구",
      "첫번째게임이후지하철역1097": "첫 번째 게임 이후 지하철역",
      "청량리역1098": "청량리역",
      "서울동대문구1099": "서울 동대문구",
      "시작장면지하철역1100": "시작 장면 지하철역",
      "보통1101": "보통",
      "netflix최고시청률1102": "Netflix 최고 시청률",
      "경기양평군1109": "경기 양평군",
      "로맨틱한다리씬1110": "로맨틱한 다리 씬",
      "북한산1111": "북한산",
      "서울은평구1112": "서울 은평구",
      "패러글라이딩출발점1113": "패러글라이딩 출발점",
      "어려움1114": "어려움",
      "백상예술대상1115": "백상예술대상",
      "강원강릉시1122": "강원 강릉시",
      "메밀꽃밭과해변1123": "메밀꽃밭과 해변",
      "인천차이나타운1124": "인천차이나타운",
      "인천중구1125": "인천 중구",
      "공유와김고은데이트1126": "공유와 김고은 데이트",
      "쉬움1127": "쉬움",
      "대상수상작1128": "대상 수상작",
      "강원정선군1135": "강원 정선군",
      "형제의고향1136": "형제의 고향",
      "서울역1137": "서울역",
      "서울용산구1138": "서울 용산구",
      "징집장면1139": "징집 장면",
      "보통1140": "보통",
      "청룡영화상대상1141": "청룡영화상 대상",
      "아칸소주1148": "아칸소 주",
      "주요배경지1149": "주요 배경지",
      "어려움1150": "어려움",
      "아카데미여우조연상1151": "아카데미 여우조연상",
      "뉴욕맨해튼1158": "뉴욕 맨해튼",
      "최종결전장면1159": "최종 결전 장면",
      "타임스퀘어1160": "타임스퀘어",
      "뉴욕맨해튼1161": "뉴욕 맨해튼",
      "외계인침공장면1162": "외계인 침공 장면",
      "보통1163": "보통",
      "marvel시네마틱유니버스1164": "Marvel 시네마틱 유니버스",
      "캐나다1170": "캐나다",
      "옥수수밭장면1171": "옥수수밭 장면",
      "로스앤젤레스1172": "로스앤젤레스",
      "캘리포니아1173": "캘리포니아",
      "nasa본부1174": "NASA 본부",
      "어려움1175": "어려움",
      "아카데미시각효과상1176": "아카데미 시각효과상",
      "캘리포니아1183": "캘리포니아",
      "해변댄스1184": "해변 댄스",
      "선셋스트립1185": "선셋 스트립",
      "할리우드1186": "할리우드",
      "재즈클럽1187": "재즈클럽",
      "보통1188": "보통",
      "아카데미6개부문1189": "아카데미 6개 부문",
      "캘리포니아1196": "캘리포니아",
      "도시배경1197": "도시 배경",
      "쉬움1198": "쉬움",
      "픽사첫장편1199": "픽사 첫 장편",
      "노르웨이1206": "노르웨이",
      "안나와엘사의고향배경1207": "안나와 엘사의 고향 배경",
      "스톡홀름1208": "스톡홀름",
      "스웨덴1209": "스웨덴",
      "성내부디자인모티브1210": "성 내부 디자인 모티브",
      "보통1211": "보통",
      "디즈니최고흥행작1212": "디즈니 최고 흥행작",
      "영국노섬벌랜드1219": "영국 노섬벌랜드",
      "호그와트외관1220": "호그와트 외관",
      "킹스크로스역1221": "킹스 크로스역",
      "런던1222": "런던",
      "9와34승강장1223": "9와 3/4 승강장",
      "보통1224": "보통",
      "전세계흥행1위1225": "전세계 흥행 1위",
      "이탈리아로마1232": "이탈리아 로마",
      "젤라토먹는장면1233": "젤라토 먹는 장면",
      "콜로세움1234": "콜로세움",
      "이탈리아로마1235": "이탈리아 로마",
      "관광장면1236": "관광 장면",
      "쉬움1237": "쉬움",
      "아카데미주연여우상1238": "아카데미 주연여우상",
      "프랑스파리1245": "프랑스 파리",
      "전망장면1246": "전망 장면",
      "센강1247": "센강",
      "프랑스파리1248": "프랑스 파리",
      "로맨틱산책1249": "로맨틱 산책",
      "보통1250": "보통",
      "칸영화제화제작1251": "칸 영화제 화제작",
      "일본기후현1258": "일본 기후현",
      "시골마을배경1259": "시골 마을 배경",
      "이타모리호수1260": "이타모리 호수",
      "일본나가노현1261": "일본 나가노현",
      "운석호모티브1262": "운석호 모티브",
      "보통1263": "보통",
      "일본최고흥행애니1264": "일본 최고 흥행 애니",
      "지브리박물관1270": "지브리 박물관",
      "일본도쿄1271": "일본 도쿄",
      "제작사박물관1272": "제작사 박물관",
      "구마모토아소산1273": "구마모토 아소산",
      "일본구마모토현1274": "일본 구마모토현",
      "자연배경1275": "자연 배경",
      "보통1276": "보통",
      "아카데미장편애니상1277": "아카데미 장편애니상",
      "중국베이징1284": "중국 베이징",
      "궁궐장면1285": "궁궐 장면",
      "대나무숲1286": "대나무숲",
      "중국저장성1287": "중국 저장성",
      "유명한대나무숲액션1288": "유명한 대나무숲 액션",
      "어려움1289": "어려움",
      "아카데미4개부문1290": "아카데미 4개 부문",
      "조지아주1296": "조지아 주",
      "시즌3주요무대1297": "시즌3 주요 무대",
      "애틀랜타1298": "애틀랜타",
      "조지아주1299": "조지아 주",
      "대부분의촬영지1300": "대부분의 촬영지",
      "어려움1301": "어려움",
      "netflix간판시리즈1302": "Netflix 간판 시리즈",
      "사찰장면1310": "사찰 장면",
      "정동진1311": "정동진",
      "강원강릉시1312": "강원 강릉시",
      "해안가장면1313": "해안가 장면",
      "보통1314": "보통",
      "netflix한국오리지널1315": "Netflix 한국 오리지널",
      "뉴욕1322": "뉴욕",
      "존윅의집1323": "존 윅의 집",
      "센트럴파크1324": "센트럴파크",
      "뉴욕1325": "뉴욕",
      "추격장면1326": "추격 장면",
      "보통1327": "보통",
      "액션영화걸작1328": "액션 영화 걸작",
      "호주1335": "호주",
      "추격장면1336": "추격 장면",
      "cia랭글리1337": "CIA 랭글리",
      "버지니아1338": "버지니아",
      "침투장면1339": "침투 장면",
      "어려움1340": "어려움",
      "imf시리즈1341": "IMF 시리즈",
      "워싱턴dc1348": "워싱턴 DC",
      "연설장면1349": "연설 장면",
      "몬터레이1350": "몬터레이",
      "캘리포니아1351": "캘리포니아",
      "새우잡이1352": "새우잡이",
      "보통1353": "보통",
      "아카데미6개부문1354": "아카데미 6개 부문",
      "캐나다1361": "캐나다",
      "타이타닉박물관1362": "타이타닉 박물관",
      "로스앤젤레스1363": "로스앤젤레스",
      "캘리포니아1364": "캘리포니아",
      "촬영스튜디오1365": "촬영 스튜디오",
      "보통1366": "보통",
      "역대흥행2위1367": "역대 흥행 2위",
      "플로리다1374": "플로리다",
      "나이트클럽1375": "나이트클럽",
      "쉬움1376": "쉬움",
      "짐캐리대표작1377": "짐 캐리 대표작",
      "마을배경1385": "마을 배경",
      "보통1386": "보통",
      "아카데미각본상1387": "아카데미 각본상",
      "미래도시1392": "미래 도시",
      "노르웨이1393": "노르웨이",
      "노르웨이1394": "노르웨이",
      "얼음행성1395": "얼음 행성",
      "어려움1396": "어려움",
      "아카데미6개부문1397": "아카데미 6개 부문",
      "유타아리조나1404": "유타/아리조나",
      "비행훈련1405": "비행 훈련",
      "보통1406": "보통",
      "2022년최고흥행1407": "2022년 최고 흥행",
      "전체1408": "전체",
      "액션1409": "액션",
      "로맨스1410": "로맨스",
      "스릴러1411": "스릴러",
      "드라마1412": "드라마",
      "애니메이션1413": "애니메이션",
      "전체1414": "전체",
      "근처맛집1432": "근처 맛집",
      "오디오가이드1433": "오디오 가이드",
      "서울관악구1518": ": '서울 관악구",
      "유명한계단씬촬영지1519": ": '유명한 계단 씬 촬영지",
      "성북동계단길1520": ": '성북동 계단길",
      "서울성북구1521": ": '서울 성북구",
      "메인포스터촬영지1522": ": '메인 포스터 촬영지",
      "쉬움1523": ": '쉬움",
      "아카데미작품상1524": ": '아카데미 작품상",
      "인천중구1531": ": '인천 중구",
      "첫번째게임이후지하철역1532": ": '첫 번째 게임 이후 지하철역",
      "청량리역1533": ": '청량리역",
      "서울동대문구1534": ": '서울 동대문구",
      "시작장면지하철역1535": ": '시작 장면 지하철역",
      "보통1536": ": '보통",
      "netflix최고시청률1537": ": 'Netflix 최고 시청률",
      "경기양평군1544": ": '경기 양평군",
      "로맨틱한다리씬1545": ": '로맨틱한 다리 씬",
      "북한산1546": ": '북한산",
      "서울은평구1547": ": '서울 은평구",
      "패러글라이딩출발점1548": ": '패러글라이딩 출발점",
      "어려움1549": ": '어려움",
      "백상예술대상1550": ": '백상예술대상",
      "강원강릉시1557": ": '강원 강릉시",
      "메밀꽃밭과해변1558": ": '메밀꽃밭과 해변",
      "인천차이나타운1559": ": '인천차이나타운",
      "인천중구1560": ": '인천 중구",
      "공유와김고은데이트1561": ": '공유와 김고은 데이트",
      "쉬움1562": ": '쉬움",
      "대상수상작1563": ": '대상 수상작",
      "강원정선군1570": ": '강원 정선군",
      "형제의고향1571": ": '형제의 고향",
      "서울역1572": ": '서울역",
      "서울용산구1573": ": '서울 용산구",
      "징집장면1574": ": '징집 장면",
      "보통1575": ": '보통",
      "청룡영화상대상1576": ": '청룡영화상 대상",
      "주요배경지1584": ": '주요 배경지",
      "어려움1585": ": '어려움",
      "아카데미여우조연상1586": ": '아카데미 여우조연상",
      "뉴욕맨해튼1593": ": '뉴욕 맨해튼",
      "최종결전장면1594": ": '최종 결전 장면",
      "타임스퀘어1595": ": '타임스퀘어",
      "뉴욕맨해튼1596": ": '뉴욕 맨해튼",
      "외계인침공장면1597": ": '외계인 침공 장면",
      "보통1598": ": '보통",
      "marvel시네마틱유니버스1599": ": 'Marvel 시네마틱 유니버스",
      "캐나다1605": ": '캐나다",
      "옥수수밭장면1606": ": '옥수수밭 장면",
      "로스앤젤레스1607": ": '로스앤젤레스",
      "캘리포니아1608": ": '캘리포니아",
      "nasa본부1609": ": 'NASA 본부",
      "어려움1610": ": '어려움",
      "아카데미시각효과상1611": ": '아카데미 시각효과상",
      "캘리포니아1618": ": '캘리포니아",
      "해변댄스1619": ": '해변 댄스",
      "선셋스트립1620": ": '선셋 스트립",
      "할리우드1621": ": '할리우드",
      "재즈클럽1622": ": '재즈클럽",
      "보통1623": ": '보통",
      "아카데미6개부문1624": ": '아카데미 6개 부문",
      "캘리포니아1631": ": '캘리포니아",
      "도시배경1632": ": '도시 배경",
      "쉬움1633": ": '쉬움",
      "픽사첫장편1634": ": '픽사 첫 장편",
      "노르웨이1641": ": '노르웨이",
      "안나와엘사의고향배경1642": ": '안나와 엘사의 고향 배경",
      "스톡홀름1643": ": '스톡홀름",
      "스웨덴1644": ": '스웨덴",
      "성내부디자인모티브1645": ": '성 내부 디자인 모티브",
      "보통1646": ": '보통",
      "디즈니최고흥행작1647": ": '디즈니 최고 흥행작",
      "영국노섬벌랜드1654": ": '영국 노섬벌랜드",
      "호그와트외관1655": ": '호그와트 외관",
      "킹스크로스역1656": ": '킹스 크로스역",
      "런던1657": ": '런던",
      "9와34승강장1658": ": '9와 3/4 승강장",
      "보통1659": ": '보통",
      "전세계흥행1위1660": ": '전세계 흥행 1위",
      "이탈리아로마1667": ": '이탈리아 로마",
      "젤라토먹는장면1668": ": '젤라토 먹는 장면",
      "콜로세움1669": ": '콜로세움",
      "이탈리아로마1670": ": '이탈리아 로마",
      "관광장면1671": ": '관광 장면",
      "쉬움1672": ": '쉬움",
      "아카데미주연여우상1673": ": '아카데미 주연여우상",
      "프랑스파리1680": ": '프랑스 파리",
      "전망장면1681": ": '전망 장면",
      "센강1682": ": '센강",
      "프랑스파리1683": ": '프랑스 파리",
      "로맨틱산책1684": ": '로맨틱 산책",
      "보통1685": ": '보통",
      "칸영화제화제작1686": ": '칸 영화제 화제작",
      "일본기후현1693": ": '일본 기후현",
      "시골마을배경1694": ": '시골 마을 배경",
      "이타모리호수1695": ": '이타모리 호수",
      "일본나가노현1696": ": '일본 나가노현",
      "운석호모티브1697": ": '운석호 모티브",
      "보통1698": ": '보통",
      "일본최고흥행애니1699": ": '일본 최고 흥행 애니",
      "지브리박물관1705": ": '지브리 박물관",
      "일본도쿄1706": ": '일본 도쿄",
      "제작사박물관1707": ": '제작사 박물관",
      "구마모토아소산1708": ": '구마모토 아소산",
      "일본구마모토현1709": ": '일본 구마모토현",
      "자연배경1710": ": '자연 배경",
      "보통1711": ": '보통",
      "아카데미장편애니상1712": ": '아카데미 장편애니상",
      "궁궐장면1720": ": '궁궐 장면",
      "대나무숲1721": ": '대나무숲",
      "중국저장성1722": ": '중국 저장성",
      "유명한대나무숲액션1723": ": '유명한 대나무숲 액션",
      "어려움1724": ": '어려움",
      "아카데미4개부문1725": ": '아카데미 4개 부문",
      "조지아주1731": ": '조지아 주",
      "시즌3주요무대1732": ": '시즌3 주요 무대",
      "애틀랜타1733": ": '애틀랜타",
      "조지아주1734": ": '조지아 주",
      "대부분의촬영지1735": ": '대부분의 촬영지",
      "어려움1736": ": '어려움",
      "netflix간판시리즈1737": ": 'Netflix 간판 시리즈",
      "사찰장면1745": ": '사찰 장면",
      "정동진1746": ": '정동진",
      "강원강릉시1747": ": '강원 강릉시",
      "해안가장면1748": ": '해안가 장면",
      "보통1749": ": '보통",
      "netflix한국오리지널1750": ": 'Netflix 한국 오리지널",
      "뉴욕1757": ": '뉴욕",
      "존윅의집1758": ": '존 윅의 집",
      "센트럴파크1759": ": '센트럴파크",
      "뉴욕1760": ": '뉴욕",
      "추격장면1761": ": '추격 장면",
      "보통1762": ": '보통",
      "액션영화걸작1763": ": '액션 영화 걸작",
      "호주1770": ": '호주",
      "추격장면1771": ": '추격 장면",
      "cia랭글리1772": ": 'CIA 랭글리",
      "버지니아1773": ": '버지니아",
      "침투장면1774": ": '침투 장면",
      "어려움1775": ": '어려움",
      "imf시리즈1776": ": 'IMF 시리즈",
      "워싱턴dc1783": ": '워싱턴 DC",
      "연설장면1784": ": '연설 장면",
      "몬터레이1785": ": '몬터레이",
      "캘리포니아1786": ": '캘리포니아",
      "새우잡이1787": ": '새우잡이",
      "보통1788": ": '보통",
      "아카데미6개부문1789": ": '아카데미 6개 부문",
      "타이타닉박물관1797": ": '타이타닉 박물관",
      "로스앤젤레스1798": ": '로스앤젤레스",
      "캘리포니아1799": ": '캘리포니아",
      "촬영스튜디오1800": ": '촬영 스튜디오",
      "보통1801": ": '보통",
      "역대흥행2위1802": ": '역대 흥행 2위",
      "플로리다1809": ": '플로리다",
      "나이트클럽1810": ": '나이트클럽",
      "쉬움1811": ": '쉬움",
      "짐캐리대표작1812": ": '짐 캐리 대표작",
      "마을배경1820": ": '마을 배경",
      "보통1821": ": '보통",
      "아카데미각본상1822": ": '아카데미 각본상",
      "미래도시1828": ": '미래 도시",
      "노르웨이1829": ": '노르웨이",
      "노르웨이1830": ": '노르웨이",
      "얼음행성1831": ": '얼음 행성",
      "어려움1832": ": '어려움",
      "아카데미6개부문1833": ": '아카데미 6개 부문",
      "유타아리조나1840": ": '유타/아리조나",
      "비행훈련1841": ": '비행 훈련",
      "보통1842": ": '보통",
      "2022년최고흥행1843": ": '2022년 최고 흥행",
      "예산최적화1919": "예산 최적화",
      "언어장벽해결1920": "언어 장벽 해결",
      "24시간지원1921": "24시간 지원",
      "좌표정보표시2018": "{/* 좌표 정보 표시 */}",
      "currentlocationcurrentl2116": "}))} currentLocation={currentLocation} center={mapCenter} zoom={16} // 더 확대된 뷰 showRoute={false} // 루트 표시 안 함 showUserLocation={true} onPoiClick={(poiId) => { const poiIndex = poisWithChapters.findIndex(poi => poi.id === poiId); if (poiIndex !== -1) { setCurrentChapter(poiIndex); } }} className=",
      "locationname의상세한ai여행가이드2319": "${locationName}의 상세한 AI 여행 가이드입니다. 실시간 음성 안내로 ${locationName}의 숨겨진 이야기를 발견해보세요.",
      "코워킹스페이스정보3163": "코워킹 스페이스 정보",
      "노마드커뮤니티3164": "노마드 커뮤니티",
      "1년비자정보3165": "1년 비자 정보",
      "인기관광지클릭가능한버튼들3285": "{/* 인기 관광지 - 클릭 가능한 버튼들 */}",
      "전통과현대가어우러진대한민국의수도3322": "전통과 현대가 어우러진 대한민국의 수도",
      "부산3323": "부산",
      "아름다운바다와항구의도시3327": "아름다운 바다와 항구의 도시",
      "제주3328": "제주",
      "환상적인자연경관의섬3332": "환상적인 자연경관의 섬",
      "경주3333": "경주",
      "천년고도신라의역사가살아있는도시3337": "천년고도 신라의 역사가 살아있는 도시",
      "t회전하는세계명소들3338": "} ] }; }, [t]); // 회전하는 세계명소들 (구체적 장소 검색 유도) - 7개 핵심 명소 const landmarks = useMemo(() => [",
      "콜로세움3339": "콜로세움",
      "배경음악과효과음3899": "배경음악과 효과음",
      "대화형진행3900": "대화형 진행",
      "전세계어디든3901": "전 세계 어디든",
      "완전무료4037": "완전 무료",
      "편안한청취4038": "편안한 청취",
      "숨겨진명소발굴4163": "숨겨진 명소 발굴",
      "현지문화체험4164": "현지 문화 체험",
      "완전무료4165": "완전 무료",
      "혼자만의특별한시간4272": "혼자만의 특별한 시간",
      "안전정보우선4273": "안전 정보 우선",
      "현지문화체험4274": "현지 문화 체험",
      "예산최적화4275": "예산 최적화",
      "연인여행4276": "연인여행",
      "로맨틱한추억만들기4277": "로맨틱한 추억 만들기",
      "로맨틱스팟4278": "로맨틱 스팟",
      "커플액티비티4279": "커플 액티비티",
      "사진맛집4280": "사진 맛집",
      "가족여행4281": "가족여행",
      "온가족이함께4282": "온 가족이 함께",
      "아이친화적4283": "아이 친화적",
      "안전한장소4284": "안전한 장소",
      "교육적체험4285": "교육적 체험",
      "친구여행4286": "친구여행",
      "친구들과의즐거운시간4287": "친구들과의 즐거운 시간",
      "활동적체험4288": "활동적 체험",
      "인스타스팟4289": "인스타 스팟",
      "나이트라이프4290": "나이트라이프",
      "워케이션4291": "워케이션",
      "일과휴가의완벽한조화4292": "일과 휴가의 완벽한 조화",
      "wifi환경4293": "WiFi 환경",
      "코워킹스페이스4294": "코워킹 스페이스",
      "장기체류4295": "장기 체류",
      "50개도시대규모데이터실제여행4296": "} ]; // 50개 도시 대규모 데이터 - 실제 여행 정보 기반 const popularDestinations = [ // 아시아 { name:",
      "현지정보4810": "현지 정보",
      "완전무료4811": "완전 무료",
      "혼자만의특별한시간4932": ": '혼자만의 특별한 시간",
      "연인여행4933": ": '연인여행",
      "로맨틱한추억만들기4934": ": '로맨틱한 추억 만들기",
      "가족여행4935": ": '가족여행",
      "온가족이함께4936": ": '온 가족이 함께",
      "친구여행4937": ": '친구여행",
      "친구들과의즐거운시간4938": ": '친구들과의 즐거운 시간",
      "워케이션4939": ": '워케이션",
      "일과휴가의완벽한조화4940": ": '일과 휴가의 완벽한 조화",
      "제주도4941": ": '제주도",
      "여행팁5564": "여행 팁"
    },
    "modal": {
      "handlechapterupda2142": "); } }; // Handle chapter updates from audio player const handleChapterUpdate = (poiId: string, updatedChapter: AudioChapter) => { setPoisWithChapters(prev => prev.map(poi => poi.id === poiId ? { ...poi, audioChapter: updatedChapter } : poi ) ); }; // Handle chapter changes from audio player const handleChapterChange = (chapterIndex: number) => { setCurrentChapter(chapterIndex); // Center map on the corresponding POI if (poisWithChapters[chapterIndex]) { setMapCenter({ lat: poisWithChapters[chapterIndex].lat, lng: poisWithChapters[chapterIndex].lng }); } }; // Toggle fullscreen mode const toggleFullscreen = () => { setIsFullscreen(!isFullscreen); }; // Share current location const handleShare = async () => { if (navigator.share && currentLocation) { try { await navigator.share({ title: String(t('live.shareTitle')), text: String(t('live.shareText')), url: window.location.href }); } catch (error) { console.error('Error sharing:', error); } } }; // Reset tour const handleReset = () => { setCurrentChapter(0); if (poisWithChapters[0]) { setMapCenter({ lat: poisWithChapters[0].lat, lng: poisWithChapters[0].lng }); } }; // Get current POI info const currentPOI = poisWithChapters[currentChapter]; // 스크롤 이벤트 리스너 useEffect(() => { const handleScroll = () => { const scrolled = window.scrollY; setCurrentScrollY(scrolled); const shouldShow = scrolled > 300; console.log('스크롤 이벤트:', { scrolled, shouldShow, currentState: showScrollButtons }); setShowScrollButtons(shouldShow); }; console.log('스크롤 리스너 등록'); window.addEventListener('scroll', handleScroll, { passive: true }); handleScroll(); // 초기 상태 확인 return () => { console.log('스크롤 리스너 해제'); window.removeEventListener('scroll', handleScroll); }; }, [showScrollButtons]); // 스크롤 투 탑 함수 const scrollToTop = () => { window.scrollTo({ top: 0, behavior: 'smooth' }); }; // 홈으로 이동 함수 const goToHome = () => { router.push('/'); }; // 좌표 정보 추출 함수 const extractCoordinatesInfo = () => { const coordinates = []; poisWithChapters.forEach((poi, index) => { if (poi.lat && poi.lng) { coordinates.push({ index: index + 1, name: poi.name, lat: poi.lat, lng: poi.lng, description: poi.description || '', isStartPoint: index === 0 }); } }); return coordinates; }; const coordinatesInfo = extractCoordinatesInfo(); return ( <div className=\"min-h-screen bg-white\">{/* 내부 헤더 삭제됨 */} {/* Main Content */} <div className=\"max-w-4xl mx-auto p-6 space-y-8\"> {/* 제목 */} <div className=\"text-center\"> <h1 className=\"text-2xl font-light text-gray-900 mb-2\"> {params.location} {t('guide.realTimeGuideTitle')} </h1> <p className=\"text-gray-500\"> 현재 위치 기반 맞춤 안내 </p> </div> {/* 개요 */} <div className=\"border-b border-gray-100 pb-6\"> <h2 className=\"text-lg font-medium text-gray-900 mb-3\">{t('guide.overview')}</h2> <p className=\"text-gray-600 leading-relaxed\"> GPS를 기반으로 현재 위치에서 가장 적합한 관람 코스를 실시간으로 안내합니다. 각 지점에 도착하면 자동으로 해당 위치의 상세 정보와 오디오 가이드가 제공됩니다. </p> </div> {/* 필수관람포인트 */} <div className=\"border-b border-gray-100 pb-6\"> <h2 className=\"text-lg font-medium text-gray-900 mb-4\">{t('guide.mustSeePoints')}</h2> {/* 로딩 상태 */} {isLoadingPOIs && ( <div className=\"flex items-center justify-center py-8\"> <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-black mr-3\"></div> <span className=\"text-gray-600\">📍 {locationName}의 관광지 정보를 검색하고 있습니다...</span> </div> )} {/* 에러 상태 */} {poisError && !isLoadingPOIs && ( <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-4\"> <div className=\"text-red-800 font-medium\">위치 정보 로딩 실패</div> <div className=\"text-red-600 text-sm mt-1\">{poisError}</div> </div> )} {/* POI 목록 */} {!isLoadingPOIs && poisWithChapters.length === 0 && !poisError && ( <div className=\"text-center py-8 text-gray-500\"> <div className=\"text-lg mb-2\">📍</div> <div>검색된 관광지가 없습니다</div> <div className=\"text-sm mt-1\">다른 위치를 검색해보세요</div> </div> )} <div className=\"space-y-6\"> {poisWithChapters.map((poi, index) => ( <div key={poi.id} className=\"border border-gray-100 rounded-lg p-4\"> <div className=\"flex items-start gap-3 mb-3\"> <div className={",
      "wordnull지역별인기국가3249": "({ word: null }); // 지역별 인기 국가 데이터 (번역키 사용) const regionCountries = useMemo(() => { const countries = t('home.countries') as any; // 번역 데이터 유효성 검증 if (!isValidCountriesData(countries)) { return { korea: [], europe: [], asia: [], americas: [] }; } return { korea: [ { id: 'seoul', name: countries.seoul?.name || '서울', flag: '🏙️', attractions: countries.seoul?.attractions || ['경복궁', '남산타워', '명동'], description: countries.seoul?.description || '전통과 현대가 어우러진 대한민국의 수도' }, { id: 'busan', name: countries.busan?.name || '부산', flag: '🌊', attractions: countries.busan?.attractions || ['해운대해수욕장', '감천문화마을', '자갈치시장'], description: countries.busan?.description || '아름다운 바다와 항구의 도시' }, { id: 'jeju', name: countries.jeju?.name || '제주', flag: '🌺', attractions: countries.jeju?.attractions || ['한라산', '성산일출봉', '중문관광단지'], description: countries.jeju?.description || '환상적인 자연경관의 섬' }, { id: 'gyeongju', name: countries.gyeongju?.name || '경주', flag: '🏛️', attractions: countries.gyeongju?.attractions || ['불국사', '석굴암', '첨성대'], description: countries.gyeongju?.description || '천년고도 신라의 역사가 살아있는 도시' } ], europe: [ { id: 'france', name: countries.france?.name || 'France', flag: '🇫🇷', attractions: countries.france?.attractions || ['Eiffel Tower', 'Louvre Museum', 'Palace of Versailles'], description: countries.france?.description || 'Romantic Paris and magnificent cultural heritage' }, { id: 'italy', name: countries.italy?.name || 'Italy', flag: '🇮🇹', attractions: countries.italy?.attractions || ['Colosseum', 'Leaning Tower of Pisa', 'Vatican'], description: countries.italy?.description || 'Glory of ancient Rome and Renaissance art' }, { id: 'spain', name: countries.spain?.name || 'Spain', flag: '🇪🇸', attractions: countries.spain?.attractions || ['Sagrada Familia', 'Alhambra', 'Park Güell'], description: countries.spain?.description || 'Gaudí\\'s architecture and flamenco passion' }, { id: 'uk', name: countries.uk?.name || 'United Kingdom', flag: '🇬🇧', attractions: countries.uk?.attractions || ['Big Ben', 'Tower Bridge', 'Buckingham Palace'], description: countries.uk?.description || 'Harmonious blend of tradition and modernity' }, { id: 'germany', name: countries.germany?.name || 'Germany', flag: '🇩🇪', attractions: countries.germany?.attractions || ['Brandenburg Gate', 'Neuschwanstein Castle', 'Cologne Cathedral'], description: countries.germany?.description || 'Fairy-tale castles and deep historical heritage' } ], asia: [ { id: 'japan', name: countries.japan?.name || 'Japan', flag: '🇯🇵', attractions: countries.japan?.attractions || ['Mount Fuji', 'Kiyomizu-dera', 'Senso-ji'], description: countries.japan?.description || 'Mysterious land where tradition and cutting-edge coexist' }, { id: 'china', name: countries.china?.name || 'China', flag: '🇨🇳', attractions: countries.china?.attractions || ['Great Wall', 'Forbidden City', 'Tiananmen Square'], description: countries.china?.description || 'Great civilization with 5000 years of history' }, { id: 'india', name: countries.india?.name || 'India', flag: '🇮🇳', attractions: countries.india?.attractions || ['Taj Mahal', 'Red Fort', 'Ganges River'], description: countries.india?.description || 'Mystical spirituality and magnificent palaces' }, { id: 'thailand', name: countries.thailand?.name || 'Thailand', flag: '🇹🇭', attractions: countries.thailand?.attractions || ['Wat Arun', 'Grand Palace', 'Wat Pho'], description: countries.thailand?.description || 'Golden temples and the land of smiles' }, { id: 'singapore', name: countries.singapore?.name || 'Singapore', flag: '🇸🇬', attractions: countries.singapore?.attractions || ['Marina Bay Sands', 'Gardens by the Bay', 'Merlion'], description: countries.singapore?.description || 'Future city meets diverse cultures' } ], americas: [ { id: 'usa', name: countries.usa?.name || 'United States', flag: '🇺🇸', attractions: countries.usa?.attractions || ['Statue of Liberty', 'Grand Canyon', 'Times Square'], description: countries.usa?.description || 'Land of freedom and dreams, infinite possibilities' }, { id: 'canada', name: countries.canada?.name || 'Canada', flag: '🇨🇦', attractions: countries.canada?.attractions || ['Niagara Falls', 'CN Tower', 'Banff National Park'], description: countries.canada?.description || 'Vast nature and clean cities' }, { id: 'brazil', name: countries.brazil?.name || 'Brazil', flag: '🇧🇷', attractions: countries.brazil?.attractions || ['Christ the Redeemer', 'Iguazu Falls', 'Maracanã Stadium'], description: countries.brazil?.description || 'Samba and football, passionate South America' }, { id: 'peru', name: countries.peru?.name || 'Peru', flag: '🇵🇪', attractions: countries.peru?.attractions || ['Machu Picchu', 'Cusco', 'Nazca Lines'], description: countries.peru?.description || 'Mysterious ruins of Inca civilization' }, { id: 'mexico', name: countries.mexico?.name || 'Mexico', flag: '🇲🇽', attractions: countries.mexico?.attractions || ['Chichen Itza', 'Teotihuacan', 'Cancun'], description: countries.mexico?.description || 'Mayan civilization and Caribbean paradise' } ] }; }, [t]); // 회전하는 세계명소들 (구체적 장소 검색 유도) - 7개 핵심 명소 const landmarks = useMemo(() => [ '에펠탑', '콜로세움', '타지마할', '자유의 여신상', '경복궁', '마추픽추', '사그라다 파밀리아' ], []); // 명소별 배경 이미지 매핑 (개발환경 캐시 버스팅 포함) const landmarkImages = useMemo(() => { const isDev = process.env.NODE_ENV === 'development'; // 캐시 버스팅을 위한 고정 타임스탬프 (컴포넌트 마운트 시점) const cacheBuster = isDev ? `?t=${1723122651000}` : ''; // 고정 타임스탬프 사용 return { '에펠탑': `/images/landmarks/eiffel-tower.png`, '콜로세움': `/images/landmarks/colosseum.png`, '타지마할': `/images/landmarks/taj-mahal.png`, '자유의 여신상': `/images/landmarks/statue-of-liberty.png`, '경복궁': `/images/landmarks/gyeongbokgung.png`, '마추픽추': `/images/landmarks/machu-picchu.png`, '사그라다 파밀리아': `/images/landmarks/sagrada-familia.png` }; }, []); const [currentLandmarkIndex, setCurrentLandmarkIndex] = useState(0); const [imageLoadErrors, setImageLoadErrors] = useState",
      "에러바운더리클래스컴포넌트classer3303": "; // 에러 바운더리 클래스 컴포넌트 class ErrorBoundary extends Component< { children: ReactNode; fallback?: (error: Error, reset: () => void) => ReactNode }, { hasError: boolean; error: Error | null } > { constructor(props: any) { super(props); this.state = { hasError: false, error: null }; } static getDerivedStateFromError(error: Error) { return { hasError: true, error }; } componentDidCatch(error: Error, errorInfo: any) { console.error("
    },
    "hero": {
      "회전하는배경이미지들landmark3256": "{/* 회전하는 배경 이미지들 */} {landmarks.map((landmark, index) => (",
      "중앙명소텍스트2줄레이아웃명소부분3258": "{/* 중앙 명소 텍스트 - 2줄 레이아웃 (명소 부분만 회전) */}",
      "회전하는배경이미지들landmark3436": "{/* 회전하는 배경 이미지들 */} {landmarks.map((landmark, index) => ( <div key={landmark} className={`absolute inset-0 transition-opacity duration-1000 ease-in-out ${ index === currentLandmarkIndex ?",
      "중앙명소텍스트2줄레이아웃명소부분3441": "{/* 중앙 명소 텍스트 - 2줄 레이아웃 (명소 부분만 회전) */} <div className="
    },
    "footer": {
      "errorboundary로감싸진메인3302": "); } // ErrorBoundary로 감싸진 메인 컴포넌트 export default function HomePage() { return ("
    }
  },
  "route": {
    "title": {
      "언어별텍스트설정consttexts472": "; // 언어별 텍스트 설정 const texts = { ko: { subtitle:",
      "가이드473": "가이드",
      "위치474": "위치",
      "ai가만드는개인맞춤형여행라디오475": ": 'AI가 만드는 개인 맞춤형 여행 라디오",
      "가이드476": ": '가이드",
      "위치477": ": '위치"
    }
  },
  "GuideClient": {
    "general": {
      "ifdataconsterrormess1976": "{ if (!data) { const errorMessage = t('guide.noGuideData'); throw new Error(Array.isArray(errorMessage) ? errorMessage[0] : errorMessage); } // 🔥 핵심 수정: content 래핑 구조 올바른 처리 let sourceData = data; // data.content가 있으면 그것을 사용 (가장 일반적인 케이스) if (data.content && typeof data.content === 'object') { sourceData = data.content; console.log('📦 Extracting data from content field'); } // data가 직접 overview, route, realTimeGuide를 가지면 직접 사용 else if (data.overview || data.route || data.realTimeGuide) { sourceData = data; console.log('📦 Extracting data from direct structure'); } else { console.error('❌ Cannot find valid guide structure:', Object.keys(data)); const errorMessage = t('guide.invalidGuideStructure'); throw new Error(Array.isArray(errorMessage) ? errorMessage[0] : errorMessage); } // 🎯 정규화된 GuideData 생성 const normalizedData: GuideData = { overview: { title: sourceData.overview?.title || locationName, // 새로운 개요 필드들 location: sourceData.overview?.location || '', keyFeatures: sourceData.overview?.keyFeatures || '', background: sourceData.overview?.background || '', // 기존 필드들 (호환성) summary: sourceData.overview?.summary || '', narrativeTheme: sourceData.overview?.narrativeTheme || '', keyFacts: Array.isArray(sourceData.overview?.keyFacts) ? sourceData.overview.keyFacts : [], visitingTips: sourceData.overview?.visitingTips, historicalBackground: sourceData.overview?.historicalBackground, visitInfo: sourceData.overview?.visitInfo || {} }, mustVisitSpots: sourceData.mustVisitSpots || '', // 필수 관람 포인트 추가 route: { steps: Array.isArray(sourceData.route?.steps) ? sourceData.route.steps : [] }, realTimeGuide: { chapters: Array.isArray(sourceData.realTimeGuide?.chapters) ? sourceData.realTimeGuide.chapters : [], ...sourceData.realTimeGuide }, metadata: { originalLocationName: locationName, generatedAt: sourceData.metadata?.generatedAt || new Date().toISOString(), version: sourceData.metadata?.version || '1.0', language: sourceData.metadata?.language || 'ko', ...sourceData.metadata } }; // 🔧 챕터 ID 정규화 (타입 요구사항 충족) if (normalizedData.realTimeGuide?.chapters) { normalizedData.realTimeGuide.chapters = normalizedData.realTimeGuide.chapters.map((chapter, index) => { // 챕터 데이터 정규화: 3개 필드를 narrative로 통합 const normalizedChapter = { ...chapter, id: chapter.id !== undefined ? chapter.id : index, title: chapter.title || t('guide.chapterTitle') + ` ${index + 1}`, // narrative가 있으면 사용, 없으면 3개 필드 합치기 narrative: chapter.narrative || [chapter.sceneDescription, chapter.coreNarrative, chapter.humanStories] .filter(Boolean).join(' '), nextDirection: chapter.nextDirection || '' }; return normalizedChapter; }); } return normalizedData; }, [t]); const [guideData, setGuideData] = useState",
      "ifinitialguidere1977": "(() => { if (!initialGuide) return null; try { // 🔥 핵심: initialGuide를 정규화 함수로 처리 return normalizeGuideData(initialGuide, locationName); } catch (error) { console.error('Initial data normalization failed:', error); return null; } }); const [isLoading, setIsLoading] = useState(!guideData); const [error, setError] = useState",
      "null가이드생성또는로드useeff1978": "(null); // 가이드 생성 또는 로드 useEffect(() => { async function loadOrGenerateGuide() { if (guideData) { console.log('✅ Initial guide data exists, skipping loading'); setSource('cache'); return; } if (!locationName) { const errorMessage = t('guide.noLocationName'); setError(Array.isArray(errorMessage) ? errorMessage[0] : errorMessage); setIsLoading(false); return; } setIsLoading(true); setError(null); try { console.log('🔄 Guide generation/loading started:', locationName); const userProfile: UserProfile = { interests: ['문화', '역사'], knowledgeLevel: 'intermediate' as const, ageGroup: '30s' as const, preferredStyle: 'friendly' as const, language: currentLanguage }; const response = await fetch('/api/node/ai/generate-guide', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ locationName, language: currentLanguage, userProfile }), }); if (!response.ok) { const errorData = await response.json(); throw new Error(errorData.error || t('guide.generationFailed')); } const data = await response.json(); console.log('📦 API response data:', data); if (!data.success) { throw new Error(data.error || t('guide.generationFailed')); } // 🔥 핵심: data.data가 실제 가이드 데이터 const guideResponse = data.data; // ===== 6. 데이터 구조 디버깅 로그 추가 ===== console.log('🔍 데이터 구조 분석:', { originalDataKeys: Object.keys(data || {}), hasDataField: !!data.data, dataFieldKeys: data.data ? Object.keys(data.data) : [], hasContentField: !!(data.data?.content), contentKeys: data.data?.content ? Object.keys(data.data.content) : [], finalSourceKeys: Object.keys(guideResponse || {}) }); // 정규화 함수에 위임 const normalizedGuideData = normalizeGuideData(guideResponse, locationName); setGuideData(normalizedGuideData); setSource('generated'); // 히스토리 저장 const userProfile2: UserProfile = { interests: ['문화', '역사'], knowledgeLevel: 'intermediate' as const, ageGroup: '30s' as const, preferredStyle: 'friendly' as const, language: currentLanguage }; // localStorage에 저장 guideHistory.saveGuide(locationName, normalizedGuideData, userProfile2); // 세션이 있는 경우 Supabase에도 저장 if (session?.user) { try { await saveGuideHistoryToSupabase(session.user, locationName, normalizedGuideData, userProfile2); } catch (supabaseError) { console.warn('Supabase save failed:', supabaseError); } } console.log('✅ Guide loading/generation completed'); } catch (err) { console.error('❌ Guide loading/generation failed:', err); const errorMessage = t('errors.unknownError'); setError(err instanceof Error ? err.message : (Array.isArray(errorMessage) ? errorMessage[0] : errorMessage)); } finally { setIsLoading(false); } } loadOrGenerateGuide(); }, [locationName, currentLanguage, session, guideData, t, normalizeGuideData]); if (isLoading) { return (",
      "exportdefaultfunctionguid1979": "; export default function GuideClient({ locationName, initialGuide }: { locationName: string, initialGuide: any }) { const router = useRouter(); const { currentLanguage, t } = useLanguage(); const { data: session } = useSession(); // 🔥 핵심 수정: content 래핑 구조 올바른 처리 const normalizeGuideData = useCallback((data: any, locationName: string): GuideData => { if (!data) { const errorMessage = t(",
      "thrownewerrorarrayisarr1980": "); throw new Error(Array.isArray(errorMessage) ? errorMessage[0] : errorMessage); } // 🔥 핵심 수정: content 래핑 구조 올바른 처리 let sourceData = data; // data.content가 있으면 그것을 사용 (가장 일반적인 케이스) if (data.content && typeof data.content ===",
      "data가직접overviewrou1981": "); } // data가 직접 overview, route, realTimeGuide를 가지면 직접 사용 else if (data.overview || data.route || data.realTimeGuide) { sourceData = data; console.log(",
      "thrownewerrorarrayisarr1982": "); throw new Error(Array.isArray(errorMessage) ? errorMessage[0] : errorMessage); } // 🎯 정규화된 GuideData 생성 const normalizedData: GuideData = { overview: { title: sourceData.overview?.title || locationName, // 새로운 개요 필드들 location: sourceData.overview?.location ||",
      "기존필드들호환성summarysou1983": ", // 기존 필드들 (호환성) summary: sourceData.overview?.summary ||",
      "필수관람포인트추가routeste1984": ", // 필수 관람 포인트 추가 route: { steps: Array.isArray(sourceData.route?.steps) ? sourceData.route.steps : [] }, realTimeGuide: { chapters: Array.isArray(sourceData.realTimeGuide?.chapters) ? sourceData.realTimeGuide.chapters : [], ...sourceData.realTimeGuide }, metadata: { originalLocationName: locationName, generatedAt: sourceData.metadata?.generatedAt || new Date().toISOString(), version: sourceData.metadata?.version ||",
      "sourcedatametadata1985": ", ...sourceData.metadata } }; // 🔧 챕터 ID 정규화 (타입 요구사항 충족) if (normalizedData.realTimeGuide?.chapters) { normalizedData.realTimeGuide.chapters = normalizedData.realTimeGuide.chapters.map((chapter, index) => { // 챕터 데이터 정규화: 3개 필드를 narrative로 통합 const normalizedChapter = { ...chapter, id: chapter.id !== undefined ? chapter.id : index, title: chapter.title || t(",
      "nullnull가이드생성또는로드1988": "| null>(null); // 가이드 생성 또는 로드 useEffect(() => { async function loadOrGenerateGuide() { if (guideData) { console.log(",
      "문화1989": "문화",
      "역사1990": "역사",
      "핵심datadata가실제1991": ")); } // 🔥 핵심: data.data가 실제 가이드 데이터 const guideResponse = data.data; // ===== 6. 데이터 구조 디버깅 로그 추가 ===== console.log(",
      "originaldatakeysobjectk1992": ", { originalDataKeys: Object.keys(data || {}), hasDataField: !!data.data, dataFieldKeys: data.data ? Object.keys(data.data) : [], hasContentField: !!(data.data?.content), contentKeys: data.data?.content ? Object.keys(data.data.content) : [], finalSourceKeys: Object.keys(guideResponse || {}) }); // 정규화 함수에 위임 const normalizedGuideData = normalizeGuideData(guideResponse, locationName); setGuideData(normalizedGuideData); setSource(",
      "히스토리저장constuserprofil1993": "); // 히스토리 저장 const userProfile2: UserProfile = { interests: [",
      "역사1994": "역사",
      "asconstlanguagecurrentlan1995": "as const, language: currentLanguage }; // localStorage에 저장 guideHistory.saveGuide(locationName, normalizedGuideData, userProfile2); // 세션이 있는 경우 Supabase에도 저장 if (session?.user) { try { await saveGuideHistoryToSupabase(session.user, locationName, normalizedGuideData, userProfile2); } catch (supabaseError) { console.warn(",
      "originaldatakeysobject1997": ":', { originalDataKeys: Object.keys(data || {}), hasDataField: !!data.data, dataFieldKeys: data.data ? Object.keys(data.data) : [], hasContentField: !!(data.data?.content), contentKeys: data.data?.content ? Object.keys(data.data.content) : [], finalSourceKeys: Object.keys(guideResponse || {}) }); // 정규화 함수에 위임 const normalizedGuideData = normalizeGuideData(guideResponse, locationName); setGuideData(normalizedGuideData); setSource("
    },
    "title": {
      "index1narrat1986": ") + ` ${index + 1}`, // narrative가 있으면 사용, 없으면 3개 필드 합치기 narrative: chapter.narrative || [chapter.sceneDescription, chapter.coreNarrative, chapter.humanStories] .filter(Boolean).join(",
      "narrative가있으면사용없으면3개1996": ", // narrative가 있으면 사용, 없으면 3개 필드 합치기 narrative: chapter.narrative || [chapter.sceneDescription, chapter.coreNarrative, chapter.humanStories] .filter(Boolean).join(' '), nextDirection: chapter.nextDirection || '' }; return normalizedChapter; }); } return normalizedData; }, [t]); const [guideData, setGuideData] = useState<GuideData | null>(() => { if (!initialGuide) return null; try { // 🔥 핵심: initialGuide를 정규화 함수로 처리 return normalizeGuideData(initialGuide, locationName); } catch (error) { console.error('Initial data normalization failed:', error); return null; } }); const [isLoading, setIsLoading] = useState(!guideData); const [error, setError] = useState<string | null>(null); const [source, setSource] = useState<'cache' | 'generated' | null>(null); // 가이드 생성 또는 로드 useEffect(() => { async function loadOrGenerateGuide() { if (guideData) { console.log('✅ Initial guide data exists, skipping loading'); setSource('cache'); return; } if (!locationName) { const errorMessage = t('guide.noLocationName'); setError(Array.isArray(errorMessage) ? errorMessage[0] : errorMessage); setIsLoading(false); return; } setIsLoading(true); setError(null); try { console.log('🔄 Guide generation/loading started:', locationName); const userProfile: UserProfile = { interests: ['문화', '역사'], knowledgeLevel: 'intermediate' as const, ageGroup: '30s' as const, preferredStyle: 'friendly' as const, language: currentLanguage }; const response = await fetch('/api/node/ai/generate-guide', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ locationName, language: currentLanguage, userProfile }), }); if (!response.ok) { const errorData = await response.json(); throw new Error(errorData.error || t('guide.generationFailed')); } const data = await response.json(); console.log('📦 API response data:', data); if (!data.success) { throw new Error(data.error || t('guide.generationFailed')); } // 🔥 핵심: data.data가 실제 가이드 데이터 const guideResponse = data.data; // ===== 6. 데이터 구조 디버깅 로그 추가 ===== console.log('🔍 데이터 구조 분석:', { originalDataKeys: Object.keys(data || {}), hasDataField: !!data.data, dataFieldKeys: data.data ? Object.keys(data.data) : [], hasContentField: !!(data.data?.content), contentKeys: data.data?.content ? Object.keys(data.data.content) : [], finalSourceKeys: Object.keys(guideResponse || {}) }); // 정규화 함수에 위임 const normalizedGuideData = normalizeGuideData(guideResponse, locationName); setGuideData(normalizedGuideData); setSource('generated'); // 히스토리 저장 const userProfile2: UserProfile = { interests: ['문화', '역사'], knowledgeLevel: 'intermediate' as const, ageGroup: '30s' as const, preferredStyle: 'friendly' as const, language: currentLanguage }; // localStorage에 저장 guideHistory.saveGuide(locationName, normalizedGuideData, userProfile2); // 세션이 있는 경우 Supabase에도 저장 if (session?.user) { try { await saveGuideHistoryToSupabase(session.user, locationName, normalizedGuideData, userProfile2); } catch (supabaseError) { console.warn('Supabase save failed:', supabaseError); } } console.log('✅ Guide loading/generation completed'); } catch (err) { console.error('❌ Guide loading/generation failed:', err); const errorMessage = t('errors.unknownError'); setError(err instanceof Error ? err.message : (Array.isArray(errorMessage) ? errorMessage[0] : errorMessage)); } finally { setIsLoading(false); } } loadOrGenerateGuide(); }, [locationName, currentLanguage, session, guideData, t, normalizeGuideData]); if (isLoading) { return ( <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\"> <GuideLoading type=\"generating\" message={"
    },
    "filter": {
      "returnnormalizedchapter1987": "}; return normalizedChapter; }); } return normalizedData; }, [t]); const [guideData, setGuideData] = useState<GuideData | null>(() => { if (!initialGuide) return null; try { // 🔥 핵심: initialGuide를 정규화 함수로 처리 return normalizeGuideData(initialGuide, locationName); } catch (error) { console.error("
    }
  },
  "MultiLangGuideClient": {
    "general": {
      "ssrfalseadsense광고2155": ", ssr: false }); // AdSense 광고 컴포넌트 동적 로드 const OptimalAdSense = dynamic(() => import('@/components/ads/OptimalAdSense'), { loading: () =>",
      "ssrtrueimportguide2156": ", ssr: true }); import { guideHistory } from '@/lib/cache/localStorage'; import { saveGuideHistoryToSupabase } from '@/lib/supabaseGuideHistory'; import { useSession } from 'next-auth/react'; import { UserProfile } from '@/types/guide'; import { MultiLangGuideManager } from '@/lib/multilang-guide-manager'; import { safeUserProfile, normalizeLocationName } from '@/lib/utils'; import GuideLoading from '@/components/ui/GuideLoading'; import { routeLocationQueryCached } from '@/lib/location/location-router'; import { supabase } from '@/lib/supabaseClient'; // RegionExploreHub 동적 로드 const RegionExploreHub = dynamic(() => import('./RegionExploreHub'), { loading: () =>",
      "ssrfalseinterfacepro2157": ", ssr: false }); interface Props { locationName: string; initialGuide?: any; requestedLanguage?: string; parentRegion?: string; regionalContext?: { region?: string; country?: string; countryCode?: string; type?: 'location' | 'attraction'; }; } // 🔥 핵심 수정: content 래핑 구조 올바른 처리 const normalizeGuideData = (data: any, locationName: string): GuideData => { if (!data) { throw new Error('가이드 데이터가 없습니다.'); } // 🔥 핵심 수정: content 래핑 구조 올바른 처리 (이중 래핑 지원) let sourceData = data; // data.content.content가 있으면 그것을 사용 (이중 래핑 케이스) if (data.content && data.content.content && typeof data.content.content === 'object') { sourceData = data.content.content; // 📦 content.content 필드에서 데이터 추출 (이중 래핑) } // data.content가 있고 overview, route, realTimeGuide 중 하나라도 있으면 사용 else if (data.content && typeof data.content === 'object' && (data.content.overview || data.content.route || data.content.realTimeGuide)) { sourceData = data.content; // 📦 content 필드에서 데이터 추출 } // data가 직접 overview, route, realTimeGuide를 가지면 직접 사용 else if (data.overview || data.route || data.realTimeGuide) { sourceData = data; // 📦 직접 구조에서 데이터 추출 } else { console.error('❌ 올바른 가이드 구조를 찾을 수 없음:', Object.keys(data)); console.error('❌ data.content 구조:', data.content ? Object.keys(data.content) : 'undefined'); throw new Error('올바른 가이드 데이터 구조가 아닙니다.'); } // 🔍 mustVisitSpots 데이터 추적 /* console.log('🎯 MultiLangGuideClient에서 sourceData 확인:', { hasSourceData: !!sourceData, sourceDataKeys: Object.keys(sourceData || {}), sourceMustVisitSpots: sourceData?.mustVisitSpots, keyHighlights: sourceData?.keyHighlights, highlights: sourceData?.highlights }); */ // 🎯 정규화된 GuideData 생성 const normalizedData: GuideData = { overview: { title: sourceData.overview?.title || locationName, // 새로운 개요 필드들 location: sourceData.overview?.location || '', keyFeatures: sourceData.overview?.keyFeatures || '', background: sourceData.overview?.background || '', // 기존 필드들 (호환성) summary: sourceData.overview?.summary || '', narrativeTheme: sourceData.overview?.narrativeTheme || '', keyFacts: Array.isArray(sourceData.overview?.keyFacts) ? sourceData.overview.keyFacts : [], visitingTips: sourceData.overview?.visitingTips, historicalBackground: sourceData.overview?.historicalBackground, visitInfo: sourceData.overview?.visitInfo || {} }, route: { steps: Array.isArray(sourceData.route?.steps) ? sourceData.route.steps : [] }, realTimeGuide: { chapters: Array.isArray(sourceData.realTimeGuide?.chapters) ? sourceData.realTimeGuide.chapters : [], ...sourceData.realTimeGuide }, safetyWarnings: sourceData.safetyWarnings || '', // 안전 주의사항 추가 mustVisitSpots: sourceData.mustVisitSpots || sourceData.keyHighlights || sourceData.highlights || '', // 필수관람포인트 추가 metadata: { originalLocationName: locationName, generatedAt: sourceData.metadata?.generatedAt || new Date().toISOString(), version: sourceData.metadata?.version || '1.0', language: sourceData.metadata?.language || 'ko', ...sourceData.metadata } }; // 🔧 챕터 ID 정규화 (타입 요구사항 충족) if (normalizedData.realTimeGuide?.chapters) { normalizedData.realTimeGuide.chapters = normalizedData.realTimeGuide.chapters.map((chapter, index) => { // 챕터 데이터 정규화: 3개 필드를 narrative로 통합 const normalizedChapter = { ...chapter, id: chapter.id !== undefined ? chapter.id : index, title: chapter.title || `챕터 ${index + 1}`, // narrative가 있으면 사용, 없으면 3개 필드 합치기 narrative: chapter.narrative || [chapter.sceneDescription, chapter.coreNarrative, chapter.humanStories] .filter(Boolean).join(' '), nextDirection: chapter.nextDirection || '' }; return normalizedChapter; }); } // 🔍 최종 정규화 결과 확인 /* console.log('🎯 MultiLangGuideClient 최종 정규화 결과:', { hasMustVisitSpots: !!normalizedData.mustVisitSpots, mustVisitSpots: normalizedData.mustVisitSpots, mustVisitSpotsType: typeof normalizedData.mustVisitSpots, mustVisitSpotsLength: normalizedData.mustVisitSpots?.length }); */ return normalizedData; }; export default function MultiLangGuideClient({ locationName, initialGuide, requestedLanguage, parentRegion, regionalContext }: Props) { const router = useRouter(); const { currentLanguage, t } = useLanguage(); const { data: session } = useSession(); const [guideData, setGuideData] = useState",
      "nullconstshouldshowexplo2158": "(null); const [shouldShowExploreHub, setShouldShowExploreHub] = useState(false); // 🚀 좌표 상태 관리 const [coordinates, setCoordinates] = useState",
      "null좌표상태폴링함수cons2159": "(null); // 🎯 좌표 상태 폴링 함수 const pollCoordinates = useCallback(async () => { if (!guideData?.metadata?.originalLocationName || !currentLanguage || isCoordinatesPolling) { return; } setIsCoordinatesPolling(true); try { const normLocation = normalizeLocationName(guideData.metadata.originalLocationName); console.log('🔍 좌표 폴링 시작:', { locationName: normLocation, language: currentLanguage.toLowerCase() }); const { data, error } = await supabase .from('guides') .select('coordinates') .eq('locationname', normLocation) .eq('language', currentLanguage.toLowerCase()) .maybeSingle(); if (error) { console.error('❌ 좌표 폴링 오류:', error); return; } if (data?.coordinates && Array.isArray(data.coordinates) && data.coordinates.length > 0) { console.log('✅ 좌표 폴링 성공:', data.coordinates.length, '개 좌표 발견'); setCoordinates(data.coordinates); setIsCoordinatesPolling(false); // 폴링 중단 if (pollingTimeoutRef.current) { clearTimeout(pollingTimeoutRef.current); pollingTimeoutRef.current = null; } } else { console.log('⏳ 좌표 아직 생성 중... 3초 후 재시도'); // 3초 후 재시도 (최대 5회 = 15초) pollingTimeoutRef.current = setTimeout(() => { if (isCoordinatesPolling) { pollCoordinates(); } }, 3000); } } catch (error) { console.error('❌ 좌표 폴링 예외:', error); } finally { // 폴링 상태는 성공 시에만 false로 변경 (재시도를 위해) } }, [guideData?.metadata?.originalLocationName, currentLanguage, isCoordinatesPolling]); // 🔄 폴링 정리 함수 const stopCoordinatesPolling = useCallback(() => { setIsCoordinatesPolling(false); if (pollingTimeoutRef.current) { clearTimeout(pollingTimeoutRef.current); pollingTimeoutRef.current = null; } }, []); // 컴포넌트 언마운트 시 정리 useEffect(() => { return () => { stopCoordinatesPolling(); }; }, [stopCoordinatesPolling]); // 히스토리 저장 함수 const saveToHistory = useCallback(async (guideData: GuideData) => { try { // 로컬 히스토리 저장 (userProfile 매개변수 확인 필요) guideHistory.saveGuide( guideData.metadata.originalLocationName, guideData ); // 로그인한 사용자의 경우 Supabase에도 저장 if (session?.user) { const userProfile: UserProfile = safeUserProfile({ preferredLanguage: currentLanguage, interests: ['여행', '문화'], travelStyle: 'cultural' as const }); await saveGuideHistoryToSupabase(session.user, guideData.metadata.originalLocationName, guideData, userProfile); } } catch (error) { console.warn('히스토리 저장 실패:', error); } }, [session, currentLanguage]); // 🌍 언어별 가이드 로드 const loadGuideForLanguage = useCallback(async (language: SupportedLanguage, forceRegenerate = false, contextualParentRegion?: string) => { setIsLoading(true); setError(null); try { // 🔄 ${language} 가이드 로드: locationName, { forceRegenerate } let result; if (forceRegenerate) { // 강제 재생성 result = await MultiLangGuideManager.forceRegenerateGuide( locationName, language, undefined, contextualParentRegion ); } else { // 🚀 스마트 언어 전환 (새로운 regionalContext 포함) result = await MultiLangGuideManager.smartLanguageSwitch( locationName, language, undefined, contextualParentRegion, regionalContext // 새로운 구조화된 지역 정보 전달 ); } if (result.success && result.data) { // 🔥 핵심: data.data가 실제 가이드 데이터 const guideResponse = result.data; // 정규화 함수에 위임 (coordinates 데이터도 전달) const normalizedData = normalizeGuideData(guideResponse, locationName); // coordinates 데이터가 있다면 normalizedData에 추가 if ((result as any).coordinates) { (normalizedData as any).coordinates = (result as any).coordinates; } setGuideData(normalizedData); setSource((result as any).source || 'unknown'); // 히스토리 저장 await saveToHistory(normalizedData); // ✅ ${language} 가이드 로드 완료 (source: ${(result as any).source || 'unknown'}) } else { throw new Error((result as any).error?.message || result.error || '가이드 로드 실패'); } } catch (err) { console.error('❌ 가이드 로드 오류:', err); setError(err instanceof Error ? err.message : '가이드 로드 중 오류가 발생했습니다.'); } finally { setIsLoading(false); setIsRegenerating(false); } }, [locationName, saveToHistory]); // currentLanguage 의존성 제거 (매개변수로 전달되므로) // 🌍 사용 가능한 언어 목록 로드 const loadAvailableLanguages = useCallback(async () => { try { const versions = await MultiLangGuideManager.getAllLanguageVersions(locationName); if (versions.success && versions.data) { setAvailableLanguages(versions.data); } } catch (error) { console.warn('언어 목록 로드 실패:', error); } }, [locationName]); // 🎯 라우팅 분석 함수 (번역 컨텍스트 지원) const analyzeRouting = useCallback(async () => { try { // 세션 스토리지에서 번역 컨텍스트 확인 let translationContext; if (typeof window !== 'undefined') { const storedContext = window.sessionStorage.getItem('translationContext'); if (storedContext) { try { translationContext = JSON.parse(storedContext); console.log('🌐 번역 컨텍스트 발견:', translationContext); } catch (e) { console.warn('번역 컨텍스트 파싱 실패:', e); } } } // 🚀 위치 라우팅 분석 시작: locationName (번역 컨텍스트 포함) const result = await routeLocationQueryCached( locationName, currentLanguage, translationContext ); setRoutingResult(result); // RegionExploreHub 페이지 여부 결정 const shouldShowHub = result.pageType === 'RegionExploreHub'; setShouldShowExploreHub(shouldShowHub); console.log('📍 라우팅 분석 완료:', { pageType: result.pageType, confidence: result.confidence, showHub: shouldShowHub, hasTranslationContext: !!translationContext }); } catch (error) { console.warn('⚠️ 라우팅 분석 실패, 기본 가이드 페이지 사용:', error); setShouldShowExploreHub(false); } }, [locationName, currentLanguage]); // 🔄 재생성 함수 const handleRegenerateGuide = useCallback(async () => { setIsRegenerating(true); setError(null); try { console.log(`🔄 ${currentLanguage} 가이드 재생성:`, locationName); await loadGuideForLanguage(currentLanguage, true); console.log('✅ 가이드 재생성 완료'); } catch (error) { console.error('❌ 재생성 오류:', error); setError(error instanceof Error ? error.message : '재생성 중 오류 발생'); } }, [currentLanguage, locationName, loadGuideForLanguage]); // 재생성 함수를 전역에 노출 (TourContent에서 사용) useEffect(() => { if (typeof window !== 'undefined') { (window as any).handleRegenerateGuide = handleRegenerateGuide; } return () => { if (typeof window !== 'undefined') { delete (window as any).handleRegenerateGuide; } }; }, [handleRegenerateGuide]); // 🔥 개선된 초기 로드 (라우팅 분석 + 서버-클라이언트 언어 동기화) useEffect(() => { const initializeGuide = async () => { // 🎯 0단계: 세션 스토리지에서 지역 컨텍스트 확인 let sessionRegionalContext = null; if (typeof window !== 'undefined') { try { const storedContext = sessionStorage.getItem('guideRegionalContext'); if (storedContext) { sessionRegionalContext = JSON.parse(storedContext); console.log('🎯 세션 스토리지에서 지역 컨텍스트 발견:', sessionRegionalContext); // 타임스탬프 체크 (5분 이내의 것만 유효) const contextAge = Date.now() - ((sessionRegionalContext as any)?.timestamp || 0); if (contextAge > 5 * 60 * 1000) { console.log('⚠️ 세션 컨텍스트가 너무 오래됨 - 무시'); sessionStorage.removeItem('guideRegionalContext'); sessionRegionalContext = null; } } } catch (e) { console.warn('세션 컨텍스트 파싱 실패:', e); } } // 🎯 최종 지역 컨텍스트 결정: URL 우선, 세션 스토리지 보조 let finalParentRegion = parentRegion; if (!finalParentRegion && sessionRegionalContext && 'parentRegion' in sessionRegionalContext) { finalParentRegion = (sessionRegionalContext as any).parentRegion; console.log('🔄 세션 스토리지의 지역 컨텍스트 사용:', finalParentRegion); } // 🎯 1단계: 라우팅 분석 먼저 수행 await analyzeRouting(); // 🎯 2단계: 새로운 언어 우선순위: // 1순위: 서버에서 감지된 언어 (requestedLanguage - 쿠키 기반) // 2순위: 현재 헤더 언어 (currentLanguage) let targetLanguage: SupportedLanguage; // 🔥 서버 감지 언어가 있고, 헤더 언어와 같다면 서버 언어 사용 if (requestedLanguage && requestedLanguage === currentLanguage) { targetLanguage = requestedLanguage as SupportedLanguage; console.log(`🎯 서버-클라이언트 언어 일치: ${targetLanguage}`); } else if (requestedLanguage) { // 서버 언어는 있지만 헤더와 다를 때 - 서버 우선 (쿠키 기반) targetLanguage = requestedLanguage as SupportedLanguage; console.log(`🎯 서버 언어 우선 사용: ${targetLanguage} (헤더: ${currentLanguage})`); } else { // 서버 언어 없으면 헤더 언어 사용 targetLanguage = currentLanguage; console.log(`🎯 헤더 언어 사용: ${targetLanguage}`); } // 🎯 3단계: 라우팅 결과에 따라 초기 가이드 사용 여부 결정 // RegionExploreHub일 경우 초기 가이드를 무시하고 새로 로드하지 않음 if (shouldShowExploreHub) { console.log('🏛️ RegionExploreHub 페이지 - 초기 가이드 사용하여 탐색 허브 표시'); if (initialGuide) { try { const normalizedData = normalizeGuideData(initialGuide, locationName); setGuideData(normalizedData); setSource('cache'); await saveToHistory(normalizedData); } catch (error) { console.error('초기 가이드 처리 오류:', error); // RegionExploreHub는 가이드 데이터 없이도 작동 가능 setGuideData(null); } } setIsLoading(false); } else { // 일반 가이드 페이지 처리 if (initialGuide) { console.log('🎯 서버에서 받은 초기 가이드 사용:', initialGuide); try { // 🔥 핵심: initialGuide를 정규화 함수로 처리 const normalizedData = normalizeGuideData(initialGuide, locationName); setGuideData(normalizedData); setSource('cache'); setIsLoading(false); await saveToHistory(normalizedData); } catch (error) { console.error('초기 가이드 처리 오류:', error); // 초기 가이드 처리 실패시 새로 로드 await loadGuideForLanguage(targetLanguage, false, finalParentRegion); } } else { console.log(`🔄 새로운 가이드 로드 필요 (${targetLanguage})`); await loadGuideForLanguage(targetLanguage, false, finalParentRegion); } } await loadAvailableLanguages(); }; initializeGuide(); }, [locationName, initialGuide, requestedLanguage, currentLanguage, loadAvailableLanguages, loadGuideForLanguage, saveToHistory, analyzeRouting]); // 모든 의존성 추가 // 🚀 좌표 폴링 시작 로직 useEffect(() => { // 가이드 데이터가 로드되고 좌표가 없을 때 폴링 시작 if (!isLoading && guideData && !coordinates) { // 기존 좌표 데이터 확인 (guideData에서) const existingCoordinates = (guideData as any)?.coordinates; if (existingCoordinates && Array.isArray(existingCoordinates) && existingCoordinates.length > 0) { // 이미 좌표가 있으면 상태 업데이트 console.log('✅ 기존 좌표 데이터 발견:', existingCoordinates.length, '개'); setCoordinates(existingCoordinates); } else { // 좌표가 없으면 폴링 시작 console.log('🔍 좌표 없음 - 폴링 시작'); pollCoordinates(); } } }, [isLoading, guideData, coordinates, pollCoordinates]); // 🔄 언어 변경 추적용 ref const lastLanguageRef = useRef",
      "nullconsthasinitialloaded2160": "(null); const hasInitialLoadedRef = useRef(false); // 언어 변경 감지 및 자동 로드 (안정화된 버전) useEffect(() => { // 초기 로드 완료 표시 if (!isLoading && guideData && !hasInitialLoadedRef.current) { hasInitialLoadedRef.current = true; const currentGuideLanguage = guideData.metadata?.language || currentLanguage; lastLanguageRef.current = currentGuideLanguage; console.log(`✅ 초기 로드 완료: ${currentGuideLanguage}`); return; } // 🔥 개선된 언어 변경 감지 (헤더 언어 설정 우선) const shouldChangeLanguage = currentLanguage && hasInitialLoadedRef.current && !isLoading && lastLanguageRef.current !== currentLanguage; // 🎯 핵심: 헤더 언어 설정이 가장 우선 if (shouldChangeLanguage) { console.log(`🌍 언어 변경 감지: ${lastLanguageRef.current} → ${currentLanguage}`); lastLanguageRef.current = currentLanguage; // 즉시 업데이트하여 중복 방지 // 직접 호출하여 dependency cycle 방지 (async () => { setIsLoading(true); setError(null); try { // 🔄 장소명 번역 처리: URL의 장소명을 한국어로 역번역 후 사용 let translatedLocationName = locationName; // 현재 가이드 데이터가 있고 해당 언어가 한국어가 아닌 경우 if (guideData?.metadata?.language && guideData.metadata.language !== 'ko') { const { MicrosoftTranslator } = await import('@/lib/location/microsoft-translator'); console.log(`🔄 장소명 역번역 시도: ${locationName} (${guideData.metadata.language} → ko)`); try { translatedLocationName = await MicrosoftTranslator.reverseTranslateLocationName( locationName, guideData.metadata.language as any ); console.log(`✅ 장소명 역번역 완료: ${locationName} → ${translatedLocationName}`); } catch (error) { console.error('❌ 장소명 역번역 실패:', error); // 실패 시 원본 사용 } } // 🎯 언어 변경 시에도 지역 컨텍스트 확인 let languageChangeParentRegion = parentRegion; if (!languageChangeParentRegion && typeof window !== 'undefined') { try { const storedContext = sessionStorage.getItem('guideRegionalContext'); if (storedContext) { const parsedContext = JSON.parse(storedContext); const contextAge = Date.now() - parsedContext.timestamp; if (contextAge",
      "에러상태가이드가없는경우if2161": "); } // 에러 상태 (가이드가 없는 경우) if (!guideData || error) { return (",
      "currentlanguageko가2162": "{currentLanguage === 'ko' ? '가이드를 찾을 수 없습니다' : 'Guide not found'}",
      "errorcurrentlanguage2163": "{error || (currentLanguage === 'ko' ? '가이드 데이터를 찾을 수 없습니다.' : 'No guide data found.')}",
      "currentlanguageko생2164": "{currentLanguage === 'ko' ? '생성 중...' : 'Generating...'}",
      "currentlanguageko2165": ") : ( currentLanguage === 'ko' ? '가이드 생성' : 'Generate Guide' )}",
      "언어currentlanguage2168": "언어: {currentLanguage}",
      "소스source2169": "소스: {source}",
      "가능한언어availablelanguagesjo2170": "가능한 언어: {availableLanguages.join(', ')}",
      "챕터수guidedatarealtimeguide2171": "챕터 수: {guideData.realTimeGuide?.chapters?.length || 0}",
      "생성시간guidedatametadatagen2172": "생성 시간: {guideData.metadata.generatedAt ? new Date(guideData.metadata.generatedAt).toLocaleTimeString() : 'N/A'}",
      "오류알림가이드는있지만오류가발생한2173": ")} {/* 오류 알림 (가이드는 있지만 오류가 발생한 경우) */} {error && guideData && (",
      "currentlanguageko지2176": "{currentLanguage === 'ko' ? '지도 정보 제한' : 'Map Information Limited'}",
      "가이드내용은정상적으로이용하실수있지만지도기2178": "가이드 내용은 정상적으로 이용하실 수 있지만, 지도 기능은 제한될 수 있습니다.",
      "isregeneratingcurrentlang2179": "{isRegenerating ? (currentLanguage === 'ko' ? '다시 생성 중...' : 'Regenerating...') : (currentLanguage === 'ko' ? '가이드 다시 생성' : 'Regenerate Guide') }",
      "새로운가이드를생성하고있습니다2182": "새로운 가이드를 생성하고 있습니다...",
      "잠시만기다려주세요2183": "잠시만 기다려주세요",
      "라우팅결과에따른컴포넌트선택2184": ")} {/* 🎯 라우팅 결과에 따른 컴포넌트 선택 */} {shouldShowExploreHub ? (",
      "광고배치탐색허브하단2185": "{/* 광고 배치: 탐색 허브 하단 */}",
      "광고배치가이드콘텐츠하단2186": "{/* 광고 배치: 가이드 콘텐츠 하단 */}",
      "키보드단축키안내개발환경pr2187": "{/* 키보드 단축키 안내 (개발 환경) */} {process.env.NODE_ENV === 'development' && (",
      "키보드단축키2188": "키보드 단축키",
      "r재생성2189": "R: 재생성",
      "d다운로드2190": "D: 다운로드",
      "챕터이동2191": "←/→: 챕터 이동",
      "space오디오재생일시정지2192": "Space: 오디오 재생/일시정지",
      "esc뒤로가기2193": "Esc: 뒤로가기",
      "투어콘텐츠로딩중2195": "투어 콘텐츠 로딩 중...",
      "regionexplorehub동적로드co2196": "; // RegionExploreHub 동적 로드 const RegionExploreHub = dynamic(() => import(",
      "탐색허브로딩중2197": "탐색 허브 로딩 중...",
      "핵심수정content래핑2198": "; }; } // 🔥 핵심 수정: content 래핑 구조 올바른 처리 const normalizeGuideData = (data: any, locationName: string): GuideData => { if (!data) { throw new Error(",
      "핵심수정content래핑구2199": "); } // 🔥 핵심 수정: content 래핑 구조 올바른 처리 (이중 래핑 지원) let sourceData = data; // data.content.content가 있으면 그것을 사용 (이중 래핑 케이스) if (data.content && data.content.content && typeof data.content.content ===",
      "sourcedatadatacontent2200": ") { sourceData = data.content.content; // 📦 content.content 필드에서 데이터 추출 (이중 래핑) } // data.content가 있고 overview, route, realTimeGuide 중 하나라도 있으면 사용 else if (data.content && typeof data.content ===",
      "datacontentoverviewd2201": "&& (data.content.overview || data.content.route || data.content.realTimeGuide)) { sourceData = data.content; // 📦 content 필드에서 데이터 추출 } // data가 직접 overview, route, realTimeGuide를 가지면 직접 사용 else if (data.overview || data.route || data.realTimeGuide) { sourceData = data; // 📦 직접 구조에서 데이터 추출 } else { console.error(",
      "datacontent구조2202": "❌ data.content 구조:",
      "올바른가이드데이터구조가아닙니다2203": "올바른 가이드 데이터 구조가 아닙니다.",
      "multilangguideclient에서sour2204": "🎯 MultiLangGuideClient에서 sourceData 확인:",
      "기존필드들호환성summarysou2205": ", // 기존 필드들 (호환성) summary: sourceData.overview?.summary ||",
      "안전주의사항추가mustvisitspots2206": ", // 안전 주의사항 추가 mustVisitSpots: sourceData.mustVisitSpots || sourceData.keyHighlights || sourceData.highlights ||",
      "필수관람포인트추가metadataor2207": ", // 필수관람포인트 추가 metadata: { originalLocationName: locationName, generatedAt: sourceData.metadata?.generatedAt || new Date().toISOString(), version: sourceData.metadata?.version ||",
      "sourcedatametadata2208": ", ...sourceData.metadata } }; // 🔧 챕터 ID 정규화 (타입 요구사항 충족) if (normalizedData.realTimeGuide?.chapters) { normalizedData.realTimeGuide.chapters = normalizedData.realTimeGuide.chapters.map((chapter, index) => { // 챕터 데이터 정규화: 3개 필드를 narrative로 통합 const normalizedChapter = { ...chapter, id: chapter.id !== undefined ? chapter.id : index, title: chapter.title || `챕터 ${index + 1}`, // narrative가 있으면 사용, 없으면 3개 필드 합치기 narrative: chapter.narrative || [chapter.sceneDescription, chapter.coreNarrative, chapter.humanStories] .filter(Boolean).join(",
      "nullnullconstavailabl2210": "| null>(null); const [availableLanguages, setAvailableLanguages] = useState<string[]>([]); const [isRegenerating, setIsRegenerating] = useState(false); const [routingResult, setRoutingResult] = useState<any>(null); const [shouldShowExploreHub, setShouldShowExploreHub] = useState(false); // 🚀 좌표 상태 관리 const [coordinates, setCoordinates] = useState<any>(null); const [isCoordinatesPolling, setIsCoordinatesPolling] = useState(false); const pollingTimeoutRef = useRef<NodeJS.Timeout | null>(null); // 🎯 좌표 상태 폴링 함수 const pollCoordinates = useCallback(async () => { if (!guideData?.metadata?.originalLocationName || !currentLanguage || isCoordinatesPolling) { return; } setIsCoordinatesPolling(true); try { const normLocation = normalizeLocationName(guideData.metadata.originalLocationName); console.log(",
      "좌표폴링오류2211": "❌ 좌표 폴링 오류:",
      "좌표폴링성공2212": "✅ 좌표 폴링 성공:",
      "개좌표발견2213": "개 좌표 발견",
      "좌표아직생성중3초후재시도2214": "⏳ 좌표 아직 생성 중... 3초 후 재시도",
      "좌표폴링예외2215": "❌ 좌표 폴링 예외:",
      "여행2216": "여행",
      "문화2217": "문화",
      "히스토리저장실패2218": "히스토리 저장 실패:",
      "히스토리저장awaitsavetohist2219": "); // 히스토리 저장 await saveToHistory(normalizedData); // ✅ ${language} 가이드 로드 완료 (source: ${(result as any).source ||",
      "가이드로드실패2220": "가이드 로드 실패",
      "가이드로드오류2221": "❌ 가이드 로드 오류:",
      "가이드로드중오류가발생했습니다2222": "가이드 로드 중 오류가 발생했습니다.",
      "언어목록로드실패2223": "언어 목록 로드 실패:",
      "번역컨텍스트발견2224": "🌐 번역 컨텍스트 발견:",
      "번역컨텍스트파싱실패2225": "번역 컨텍스트 파싱 실패:",
      "라우팅분석완료2226": "📍 라우팅 분석 완료:",
      "라우팅분석실패기본가이드페이지사용2227": "⚠️ 라우팅 분석 실패, 기본 가이드 페이지 사용:",
      "가이드재생성완료2228": "✅ 가이드 재생성 완료",
      "재생성오류2229": "❌ 재생성 오류:",
      "재생성중오류발생2230": "재생성 중 오류 발생",
      "deletewindowasanyhan2231": ") { delete (window as any).handleRegenerateGuide; } }; }, [handleRegenerateGuide]); // 🔥 개선된 초기 로드 (라우팅 분석 + 서버-클라이언트 언어 동기화) useEffect(() => { const initializeGuide = async () => { // 🎯 0단계: 세션 스토리지에서 지역 컨텍스트 확인 let sessionRegionalContext = null; if (typeof window !==",
      "세션스토리지에서지역컨텍스트발견2232": "🎯 세션 스토리지에서 지역 컨텍스트 발견:",
      "세션컨텍스트가너무오래됨무시2233": "⚠️ 세션 컨텍스트가 너무 오래됨 - 무시",
      "세션컨텍스트파싱실패2234": "세션 컨텍스트 파싱 실패:",
      "세션스토리지의지역컨텍스트사용2235": "🔄 세션 스토리지의 지역 컨텍스트 사용:",
      "regionexplorehub페이지초기2236": "🏛️ RegionExploreHub 페이지 - 초기 가이드 사용하여 탐색 허브 표시",
      "초기가이드처리오류2237": "초기 가이드 처리 오류:",
      "서버에서받은초기가이드사용2238": "🎯 서버에서 받은 초기 가이드 사용:",
      "초기가이드처리오류2239": "초기 가이드 처리 오류:",
      "기존좌표데이터발견2240": "✅ 기존 좌표 데이터 발견:",
      "좌표없음폴링시작2241": "🔍 좌표 없음 - 폴링 시작",
      "consolelog장소명역번역시도2242": "); console.log(`🔄 장소명 역번역 시도: ${locationName} (${guideData.metadata.language} → ko)`); try { translatedLocationName = await MicrosoftTranslator.reverseTranslateLocationName( locationName, guideData.metadata.language as any ); console.log(`✅ 장소명 역번역 완료: ${locationName} → ${translatedLocationName}`); } catch (error) { console.error(",
      "error실패시원본사용2243": ", error); // 실패 시 원본 사용 } } // 🎯 언어 변경 시에도 지역 컨텍스트 확인 let languageChangeParentRegion = parentRegion; if (!languageChangeParentRegion && typeof window !==",
      "언어변경시세션컨텍스트확인실패2244": "언어 변경 시 세션 컨텍스트 확인 실패:",
      "awaitsavetohistorynormali2245": "); await saveToHistory(normalizedData); console.log(`✅ ${currentLanguage} 가이드 로드 완료`); } else { throw new Error((result as any).error?.message || result.error ||",
      "언어변경중오류2246": "❌ 언어 변경 중 오류:",
      "언어변경중오류가발생했습니다2247": "언어 변경 중 오류가 발생했습니다.",
      "여행지2248": "여행지",
      "가이드불러오는중loading2249": "가이드 불러오는 중` : `Loading",
      "다국어가이드데이터를준비하고있어요2250": "다국어 가이드 데이터를 준비하고 있어요...",
      "showprogresstruediv2251": "} showProgress={true} /> </div> ); } // 에러 상태 (가이드가 없는 경우) if (!guideData || error) { return ( <div className=",
      "가이드를찾을수없습니다2252": "가이드를 찾을 수 없습니다",
      "가이드데이터를찾을수없습니다2253": "가이드 데이터를 찾을 수 없습니다.",
      "생성중2254": "생성 중...",
      "가이드생성2255": "가이드 생성",
      "buttondivdivd2256": ")} </button> </div> </div> </div> ); } // 정상적인 가이드 렌더링 return ( <div className=",
      "div언어currentlanguagedi2258": "<div>언어: {currentLanguage}</div> <div>소스: {source}</div> <div>가능한 언어: {availableLanguages.join(",
      "divdiv챕터수guidedata2259": ")}</div> <div>챕터 수: {guideData.realTimeGuide?.chapters?.length || 0}</div> <div>생성 시간: {guideData.metadata.generatedAt ? new Date(guideData.metadata.generatedAt).toLocaleTimeString() :",
      "divdiv오류알림가2260": "}</div> </div> )} {/* 오류 알림 (가이드는 있지만 오류가 발생한 경우) */} {error && guideData && ( <div className=",
      "지도정보제한2262": "지도 정보 제한",
      "다시생성중2264": "다시 생성 중...",
      "가이드다시생성2265": "가이드 다시 생성",
      "buttondivdiv2266": ") } </button> </div> </div> </div> </div> </div> )} {/* 메인 가이드 컨텐츠 */} <div className=",
      "새로운가이드를생성하고있습니다ppc2268": "새로운 가이드를 생성하고 있습니다...</p> <p className=",
      "잠시만기다려주세요pdivdiv2269": "잠시만 기다려주세요</p> </div> </div> )} {/* 🎯 라우팅 결과에 따른 컴포넌트 선택 */} {shouldShowExploreHub ? ( <> <RegionExploreHub locationName={locationName} routingResult={routingResult} language={currentLanguage} content={guideData} /> {/* 광고 배치: 탐색 허브 하단 */} <div className=",
      "divminima2270": "/> </div> </> ) : ( <> <MinimalTourContent guide={guideData} language={currentLanguage} guideCoordinates={coordinates || (guideData as any)?.coordinates} /> {/* 광고 배치: 가이드 콘텐츠 하단 */} <div className=",
      "divdiv키보2271": "/> </div> </> )} </div> {/* 키보드 단축키 안내 (개발 환경) */} {process.env.NODE_ENV ===",
      "키보드단축키divdivr재생성div2272": "키보드 단축키</div> <div>R: 재생성</div> <div>D: 다운로드</div> <div>←/→: 챕터 이동</div> <div>Space: 오디오 재생/일시정지</div> <div>Esc: 뒤로가기</div> </div> )} </div> ); } // 키보드 단축키 처리 (개발 환경) if (typeof window !==",
      "eifetargetinstan2273": ", (e) => { if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) { return; // 입력 필드에서는 단축키 비활성화 } switch (e.key.toLowerCase()) { case",
      "ifectrlkeyemetakey2274": ": if (e.ctrlKey || e.metaKey) return; // 브라우저 새로고침과 충돌 방지 // 재생성 버튼 클릭 시뮬레이션 break; case",
      "ifectrlkeyemetakey2275": ": if (e.ctrlKey || e.metaKey) return; // 다운로드 버튼 클릭 시뮬레이션 break; case",
      "currentlanguage가이드재생성2277": "🔄 ${currentLanguage} 가이드 재생성:",
      "서버클라이언트언어일치targetlan2278": "🎯 서버-클라이언트 언어 일치: ${targetLanguage}",
      "서버언어우선사용targetlangua2279": "🎯 서버 언어 우선 사용: ${targetLanguage} (헤더: ${currentLanguage})",
      "헤더언어사용targetlanguage2280": "🎯 헤더 언어 사용: ${targetLanguage}",
      "새로운가이드로드필요targetlang2281": "🔄 새로운 가이드 로드 필요 (${targetLanguage})",
      "초기로드완료currentguidelang2282": "✅ 초기 로드 완료: ${currentGuideLanguage}",
      "언어변경감지lastlanguageref2283": "🌍 언어 변경 감지: ${lastLanguageRef.current} → ${currentLanguage}",
      "장소명역번역시도locationname2284": "🔄 장소명 역번역 시도: ${locationName} (${guideData.metadata.language} → ko)",
      "장소명역번역완료locationname2285": "✅ 장소명 역번역 완료: ${locationName} → ${translatedLocationName}",
      "currentlanguage가이드로드완료2286": "✅ ${currentLanguage} 가이드 로드 완료",
      "locationname여행지가이드2287": "${locationName || '여행지'}\" 가이드 불러오는 중",
      "submessagecurrentlanguage2288": "} subMessage={currentLanguage === 'ko' ? '다국어 가이드 데이터를 준비하고 있어요...' : 'Preparing multilingual guide data...'} showProgress={true} /> </div> ); } // 에러 상태 (가이드가 없는 경우) if (!guideData || error) { return ( <div className=\"min-h-screen bg-gray-50 ios-viewport-fix\"> <div className=\"container-responsive\" style={{ padding: 'var(--space-4) var(--space-4) var(--space-16) var(--space-4)' }}> <div className=\"text-center\"> <div className=\"text-fluid-6xl\" style={{ marginBottom: 'var(--space-4)' }}>😕</div> <h1 className=\"heading-responsive text-gray-900\" style={{ marginBottom: 'var(--space-4)' }}> {currentLanguage === 'ko' ? '가이드를 찾을 수 없습니다' : 'Guide not found'} </h1> <p className=\"body-responsive text-gray-600\" style={{ marginBottom: 'var(--space-6)' }}> {error || (currentLanguage === 'ko' ? '가이드 데이터를 찾을 수 없습니다.' : 'No guide data found.')} </p> <button onClick={handleRegenerateGuide} disabled={isRegenerating} className=\"btn-base btn-mobile-friendly bg-blue-600 text-white hover:bg-blue-700 hover:-translate-y-0.5 hover:shadow-md active:translate-y-0 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none mobile-touch-action safari-button-reset transition-compat\" style={{ padding: 'var(--space-3) var(--space-6)', borderRadius: 'var(--radius-md)' }} > {isRegenerating ? ( <div className=\"flex items-center\"> <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div> {currentLanguage === 'ko' ? '생성 중...' : 'Generating...'} </div> ) : ( currentLanguage === 'ko' ? '가이드 생성' : 'Generate Guide' )} </button> </div> </div> </div> ); } // 정상적인 가이드 렌더링 return ( <div className=\"min-h-screen bg-gray-50 ios-viewport-fix safari-scroll-fix\"> {/* 디버그 정보 (개발 환경에서만) */} {process.env.NODE_ENV === 'development' && ( <div className=\"fixed top-4 right-4 z-50 bg-black bg-opacity-75 text-white text-xs p-2 rounded max-w-xs\"> <div>언어: {currentLanguage}</div> <div>소스: {source}</div> <div>가능한 언어: {availableLanguages.join(', ')}</div> <div>챕터 수: {guideData.realTimeGuide?.chapters?.length || 0}</div> <div>생성 시간: {guideData.metadata.generatedAt ? new Date(guideData.metadata.generatedAt).toLocaleTimeString() : 'N/A'}</div> </div> )} {/* 오류 알림 (가이드는 있지만 오류가 발생한 경우) */} {error && guideData && ( <div className=\"bg-yellow-100 border-l-4 border-yellow-500 p-4 mb-4\"> <div className=\"flex\"> <div className=\"ml-3\"> <p className=\"text-sm text-yellow-700\">{error}</p> <button onClick={() => setError(null)} className=\"text-xs text-yellow-600 underline mt-1 hover:text-yellow-800\" > 닫기 </button> </div> </div> </div> )} {/* 좌표 생성 실패 알림 - 재생성 시도 후에만 표시 */} {guideData?.coordinateGenerationFailed && ( <div className=\"bg-orange-100 border-l-4 border-orange-500 p-4 mb-4\"> <div className=\"flex\"> <div className=\"flex-shrink-0\"> <svg className=\"h-5 w-5 text-orange-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\"> <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" /> </svg> </div> <div className=\"ml-3\"> <h3 className=\"text-sm font-medium text-orange-800\"> {currentLanguage === 'ko' ? '지도 정보 제한' : 'Map Information Limited'} </h3> <div className=\"mt-2 text-sm text-orange-700\"> <p> {currentLanguage === 'ko' ? ( <> AI가 이 위치의 정확한 좌표를 찾지 못했습니다. {guideData.missingCoordinatesCount &&",
      "br가이드내용은정상적으로이용하실수2289": "} <br /> 가이드 내용은 정상적으로 이용하실 수 있지만, 지도 기능은 제한될 수 있습니다. </> ) : ( <> AI could not find exact coordinates for this location. {guideData.missingCoordinatesCount &&",
      "hassourcedatasourced2290": ":', { hasSourceData: !!sourceData, sourceDataKeys: Object.keys(sourceData || {}), sourceMustVisitSpots: sourceData?.mustVisitSpots, keyHighlights: sourceData?.keyHighlights, highlights: sourceData?.highlights }); */ // 🎯 정규화된 GuideData 생성 const normalizedData: GuideData = { overview: { title: sourceData.overview?.title || locationName, // 새로운 개요 필드들 location: sourceData.overview?.location ||",
      "errorfinally폴링2291": ":', error); } finally { // 폴링 상태는 성공 시에만 false로 변경 (재시도를 위해) } }, [guideData?.metadata?.originalLocationName, currentLanguage, isCoordinatesPolling]); // 🔄 폴링 정리 함수 const stopCoordinatesPolling = useCallback(() => { setIsCoordinatesPolling(false); if (pollingTimeoutRef.current) { clearTimeout(pollingTimeoutRef.current); pollingTimeoutRef.current = null; } }, []); // 컴포넌트 언마운트 시 정리 useEffect(() => { return () => { stopCoordinatesPolling(); }; }, [stopCoordinatesPolling]); // 히스토리 저장 함수 const saveToHistory = useCallback(async (guideData: GuideData) => { try { // 로컬 히스토리 저장 (userProfile 매개변수 확인 필요) guideHistory.saveGuide( guideData.metadata.originalLocationName, guideData ); // 로그인한 사용자의 경우 Supabase에도 저장 if (session?.user) { const userProfile: UserProfile = safeUserProfile({ preferredLanguage: currentLanguage, interests: [",
      "errorsessioncur2292": ":', error); } }, [session, currentLanguage]); // 🌍 언어별 가이드 로드 const loadGuideForLanguage = useCallback(async (language: SupportedLanguage, forceRegenerate = false, contextualParentRegion?: string) => { setIsLoading(true); setError(null); try { // 🔄 ${language} 가이드 로드: locationName, { forceRegenerate } let result; if (forceRegenerate) { // 강제 재생성 result = await MultiLangGuideManager.forceRegenerateGuide( locationName, language, undefined, contextualParentRegion ); } else { // 🚀 스마트 언어 전환 (새로운 regionalContext 포함) result = await MultiLangGuideManager.smartLanguageSwitch( locationName, language, undefined, contextualParentRegion, regionalContext // 새로운 구조화된 지역 정보 전달 ); } if (result.success && result.data) { // 🔥 핵심: data.data가 실제 가이드 데이터 const guideResponse = result.data; // 정규화 함수에 위임 (coordinates 데이터도 전달) const normalizedData = normalizeGuideData(guideResponse, locationName); // coordinates 데이터가 있다면 normalizedData에 추가 if ((result as any).coordinates) { (normalizedData as any).coordinates = (result as any).coordinates; } setGuideData(normalizedData); setSource((result as any).source ||",
      "가이드로드중오류가발생했습니다2293": ": '가이드 로드 중 오류가 발생했습니다.",
      "errorlocationname2294": ":', error); } }, [locationName]); // 🎯 라우팅 분석 함수 (번역 컨텍스트 지원) const analyzeRouting = useCallback(async () => { try { // 세션 스토리지에서 번역 컨텍스트 확인 let translationContext; if (typeof window !==",
      "e위치라우팅분석2295": ":', e); } } } // 🚀 위치 라우팅 분석 시작: locationName (번역 컨텍스트 포함) const result = await routeLocationQueryCached( locationName, currentLanguage, translationContext ); setRoutingResult(result); // RegionExploreHub 페이지 여부 결정 const shouldShowHub = result.pageType ===",
      "errorsetshouldshowexplo2296": ":', error); setShouldShowExploreHub(false); } }, [locationName, currentLanguage]); // 🔄 재생성 함수 const handleRegenerateGuide = useCallback(async () => { setIsRegenerating(true); setError(null); try { console.log(`🔄 ${currentLanguage} 가이드 재생성:`, locationName); await loadGuideForLanguage(currentLanguage, true); console.log(",
      "재생성중오류발생2297": ": '재생성 중 오류 발생",
      "sessionregionalcontext2298": ":', sessionRegionalContext); // 타임스탬프 체크 (5분 이내의 것만 유효) const contextAge = Date.now() - ((sessionRegionalContext as any)?.timestamp || 0); if (contextAge > 5 * 60 * 1000) { console.log(",
      "e최종지역컨텍스트결2299": ":', e); } } // 🎯 최종 지역 컨텍스트 결정: URL 우선, 세션 스토리지 보조 let finalParentRegion = parentRegion; if (!finalParentRegion && sessionRegionalContext &&",
      "finalparentregion2300": ":', finalParentRegion); } // 🎯 1단계: 라우팅 분석 먼저 수행 await analyzeRouting(); // 🎯 2단계: 새로운 언어 우선순위: // 1순위: 서버에서 감지된 언어 (requestedLanguage - 쿠키 기반) // 2순위: 현재 헤더 언어 (currentLanguage) let targetLanguage: SupportedLanguage; // 🔥 서버 감지 언어가 있고, 헤더 언어와 같다면 서버 언어 사용 if (requestedLanguage && requestedLanguage === currentLanguage) { targetLanguage = requestedLanguage as SupportedLanguage; console.log(`🎯 서버-클라이언트 언어 일치: ${targetLanguage}`); } else if (requestedLanguage) { // 서버 언어는 있지만 헤더와 다를 때 - 서버 우선 (쿠키 기반) targetLanguage = requestedLanguage as SupportedLanguage; console.log(`🎯 서버 언어 우선 사용: ${targetLanguage} (헤더: ${currentLanguage})`); } else { // 서버 언어 없으면 헤더 언어 사용 targetLanguage = currentLanguage; console.log(`🎯 헤더 언어 사용: ${targetLanguage}`); } // 🎯 3단계: 라우팅 결과에 따라 초기 가이드 사용 여부 결정 // RegionExploreHub일 경우 초기 가이드를 무시하고 새로 로드하지 않음 if (shouldShowExploreHub) { console.log(",
      "errorregionexplorehu2301": ":', error); // RegionExploreHub는 가이드 데이터 없이도 작동 가능 setGuideData(null); } } setIsLoading(false); } else { // 일반 가이드 페이지 처리 if (initialGuide) { console.log(",
      "initialguidetry2302": ":', initialGuide); try { // 🔥 핵심: initialGuide를 정규화 함수로 처리 const normalizedData = normalizeGuideData(initialGuide, locationName); setGuideData(normalizedData); setSource(",
      "error초기가이드처리실패시새2303": ":', error); // 초기 가이드 처리 실패시 새로 로드 await loadGuideForLanguage(targetLanguage, false, finalParentRegion); } } else { console.log(`🔄 새로운 가이드 로드 필요 (${targetLanguage})`); await loadGuideForLanguage(targetLanguage, false, finalParentRegion); } } await loadAvailableLanguages(); }; initializeGuide(); }, [locationName, initialGuide, requestedLanguage, currentLanguage, loadAvailableLanguages, loadGuideForLanguage, saveToHistory, analyzeRouting]); // 모든 의존성 추가 // 🚀 좌표 폴링 시작 로직 useEffect(() => { // 가이드 데이터가 로드되고 좌표가 없을 때 폴링 시작 if (!isLoading && guideData && !coordinates) { // 기존 좌표 데이터 확인 (guideData에서) const existingCoordinates = (guideData as any)?.coordinates; if (existingCoordinates && Array.isArray(existingCoordinates) && existingCoordinates.length > 0) { // 이미 좌표가 있으면 상태 업데이트 console.log(",
      "error실패시원본사용2304": ":', error); // 실패 시 원본 사용 } } // 🎯 언어 변경 시에도 지역 컨텍스트 확인 let languageChangeParentRegion = parentRegion; if (!languageChangeParentRegion && typeof window !==",
      "언어변경중오류가발생했습니다2305": ": '언어 변경 중 오류가 발생했습니다."
    },
    "button": {
      "정상적인가이드렌더링return2166": "); } // 정상적인 가이드 렌더링 return (",
      "디버그정보개발환경에서만pro2167": "{/* 디버그 정보 (개발 환경에서만) */} {process.env.NODE_ENV === 'development' && (",
      "seterrornullclassnametex2174": "setError(null)} className=\"text-xs text-yellow-600 underline mt-1 hover:text-yellow-800\" > 닫기",
      "좌표생성실패알림재생성시도후에2175": ")} {/* 좌표 생성 실패 알림 - 재생성 시도 후에만 표시 */} {guideData?.coordinateGenerationFailed && (",
      "메인가이드컨텐츠2180": ")} {/* 메인 가이드 컨텐츠 */}",
      "로딩오버레이재생성중isreg2181": "{/* 로딩 오버레이 (재생성 중) */} {isRegenerating && (",
      "디버그정보개발환경에서만pro2257": "{/* 디버그 정보 (개발 환경에서만) */} {process.env.NODE_ENV ===",
      "닫기buttondivdivd2261": "닫기 </button> </div> </div> </div> )} {/* 좌표 생성 실패 알림 - 재생성 시도 후에만 표시 */} {guideData?.coordinateGenerationFailed && ( <div className=",
      "로딩오버레이재생성중isreg2267": "{/* 로딩 오버레이 (재생성 중) */} {isRegenerating && ( <div className="
    },
    "form": {
      "ai가이위치의정확한좌표를찾지못했습니다g2177": "AI가 이 위치의 정확한 좌표를 찾지 못했습니다. {guideData.missingCoordinatesCount && ` (${guideData.missingCoordinatesCount}개 챕터)`}",
      "ai가이위치의정확한좌표를찾지못했2263": "? ( <> AI가 이 위치의 정확한 좌표를 찾지 못했습니다. {guideData.missingCoordinatesCount && ` (${guideData.missingCoordinatesCount}개 챕터)`} <br /> 가이드 내용은 정상적으로 이용하실 수 있지만, 지도 기능은 제한될 수 있습니다. </> ) : ( <> AI could not find exact coordinates for this location. {guideData.missingCoordinatesCount && ` (${guideData.missingCoordinatesCount} chapters)`} <br /> The guide content is available normally, but map functionality may be limited. </> )} </p> </div> <div className="
    },
    "navigation": {
      "동적import로큰컴포넌트지연로딩c2194": "; // 동적 import로 큰 컴포넌트 지연 로딩 const MinimalTourContent = dynamic(() => import("
    },
    "filter": {
      "returnnormalizedchapter2209": "}; return normalizedChapter; }); } // 🔍 최종 정규화 결과 확인 /* console.log("
    },
    "title": {
      "챕터index12276": "챕터 ${index + 1}"
    }
  },
  "RegionExploreHub": {
    "general": {
      "ssrfalseinterfacereg2321": ", ssr: false }); interface RegionData { name: string; country: string; description: string; highlights: string[]; quickFacts: { area?: string; population?: string; bestTime?: string; timeZone?: string; }; coordinates?: { lat: number; lng: number; } | null; heroImage?: string; } interface RecommendedSpot { id: string; name: string; location: string; category: string; description: string; highlights: string[]; estimatedDays: number; difficulty: 'easy' | 'moderate' | 'challenging'; seasonality: string; popularity: number; image?: string; coordinates?: { lat: number; lng: number; }; } interface RegionExploreHubProps { locationName: string; routingResult: any; language: string; content?: any; // content 데이터 추가 } const RegionExploreHub = ({ locationName, routingResult, language, content }: RegionExploreHubProps) => { const { t } = useLanguage(); const router = useRouter(); const [regionData, setRegionData] = useState",
      "constloadregiondatau2322": "(''); const loadRegionData = useCallback(async () => { setIsLoading(true); setError(''); try { // 🔍 DEBUG: content 데이터 구조 확인 console.log('🎯 RegionExploreHub content 확인:', { hasContent: !!content, contentKeys: content ? Object.keys(content) : 'undefined', content: content, contentType: typeof content }); // 🔍 DEBUG: overview.keyFacts 구조 상세 확인 if (content && content.overview && content.overview.keyFacts) { console.log('🔑 keyFacts 상세 구조:', { keyFacts: content.overview.keyFacts, isArray: Array.isArray(content.overview.keyFacts), length: content.overview.keyFacts.length, firstItem: content.overview.keyFacts[0], mappedTitles: content.overview.keyFacts.map((kf: any) => kf.title), mappedDescriptions: content.overview.keyFacts.map((kf: any) => kf.description) }); } // content가 있는 경우 DB 데이터 직접 사용 (서울+ko 정확한 내용) if (content) { // 🎯 DB content에서 정확한 지역 정보 추출 (올바른 필드명 사용) const overview = content.overview || {}; const realTimeGuide = content.realTimeGuide || {}; // 지역 데이터 설정 (DB의 실제 내용만 사용, 하드코딩 제거) const actualRegionData = { name: locationName, country: overview.location || '', description: overview.background || overview.keyFeatures || '', highlights: overview.keyFacts && Array.isArray(overview.keyFacts) ? overview.keyFacts.map((kf: any) => kf.description || kf.title || kf.toString()) : [], quickFacts: { area: overview.visitInfo?.area || '', population: overview.visitInfo?.population || '', bestTime: overview.visitInfo?.season || overview.visitInfo?.duration || '', timeZone: overview.visitInfo?.timeZone || '' }, coordinates: content?.coordinates?.[0] ? { lat: parseFloat(content.coordinates[0].lat), lng: parseFloat(content.coordinates[0].lng) } : (realTimeGuide.chapters?.[0]?.coordinates || null) }; setRegionData(actualRegionData); // 🎯 실제 DB 구조에 맞게 추천 장소 추출 let spotsToAdd: RecommendedSpot[] = []; // ✅ 실제 DB 구조: content.route.steps에서 추천 장소 추출 if (content?.route?.steps && Array.isArray(content.route.steps)) { const stepSpots = content.route.steps.slice(0, 8).map((step: any, index: number) => { // ✅ DB에서 location 필드가 정확히 존재함: \"시테 섬\", \"루브르 박물관\" 등 const placeName = step?.location; if (!placeName) return null; // 🎯 좌표는 coordinates 칼럼에서 우선 가져오기 let coordinates: { lat: number; lng: number; } | null = null; // 먼저 coordinates 칼럼에서 찾기 if (content?.coordinates && Array.isArray(content.coordinates)) { const coordItem = content.coordinates[index]; if (coordItem?.lat && coordItem?.lng) { coordinates = { lat: parseFloat(coordItem.lat), lng: parseFloat(coordItem.lng) }; } } // Fallback: realTimeGuide.chapters에서 매칭해서 가져오기 if (!coordinates && realTimeGuide.chapters && Array.isArray(realTimeGuide.chapters)) { const matchingChapter = realTimeGuide.chapters.find((chapter: any) => chapter.id === index); if (matchingChapter?.coordinates?.lat && matchingChapter?.coordinates?.lng) { coordinates = { lat: parseFloat(matchingChapter.coordinates.lat), lng: parseFloat(matchingChapter.coordinates.lng) }; } } // ✅ 설명은 step.title에서 콜론 뒤 부분만 사용 (하드코딩 메시지 제거) let description = ''; // step.title에서 콜론 뒤 설명 부분 추출: \"루브르 박물관: 세계적인 예술 작품의 향연\" → \"세계적인 예술 작품의 향연\" if (step.title && step.title.includes(':')) { const titleDescription = step.title.split(':')[1]?.trim(); if (titleDescription && titleDescription.length > 5) { description = titleDescription; } } return { id: `route-step-${index}`, name: placeName, // ✅ DB의 location 필드 직접 사용: \"시테 섬\", \"루브르 박물관\" 등 location: locationName, category: 'travel', description, highlights: [], estimatedDays: Math.min(Math.ceil((index + 1) / 3), 2), difficulty: 'easy' as const, seasonality: t('common.yearRound'), popularity: Math.max(95 - (index * 3), 70), coordinates }; }).filter(Boolean); spotsToAdd = stepSpots; } setRecommendedSpots(spotsToAdd); } else { // content가 없는 경우에만 API 호출 const response = await fetch(`/api/ai/generate-region-overview`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ locationName, language, routingResult }) }); const result = await response.json(); if (result.success) { setRegionData(result.regionData); setRecommendedSpots(result.recommendedSpots || []); } else { setError(result.error || t('guide.cannotLoadInfo')); } } } catch (err) { console.error('지역 정보 로드 오류:', err); setError(t('guide.loadRegionError') as string); } finally { setIsLoading(false); } }, [locationName, language, routingResult, content, t]); // 지역 정보 및 추천 장소 로드 useEffect(() => { loadRegionData(); }, [loadRegionData]); const handleSpotClick = (spot: RecommendedSpot) => { // 🎯 지역 컨텍스트 포함한 URL 생성 - 동일명 장소 혼동 방지 const spotName = encodeURIComponent(spot.name); const parentRegion = encodeURIComponent(locationName); // URL에 parent 파라미터로 상위 지역 정보 포함 const targetUrl = `/guide/${spotName}?parent=${parentRegion}&lang=${language}`; // 🔄 세션 스토리지에 지역 컨텍스트 저장 (추가 보안) if (typeof window !== 'undefined') { sessionStorage.setItem('guideRegionalContext', JSON.stringify({ parentRegion: locationName, spotName: spot.name, timestamp: Date.now() })); } console.log('🎯 지역 컨텍스트 포함 네비게이션:', { spot: spot.name, parent: locationName, url: targetUrl, location: spot.location }); router.push(targetUrl); }; const getDifficultyColor = (difficulty: string) => { switch (difficulty) { case 'easy': return 'bg-black/5 text-black/80 border border-black/10'; case 'moderate': return 'bg-black/10 text-black/90 border border-black/20'; case 'challenging': return 'bg-black text-white border border-black'; default: return 'bg-black/5 text-black/70 border border-black/10'; } }; const getDifficultyText = (difficulty: string) => { switch (difficulty) { case 'easy': return t('common.easy'); case 'moderate': return t('common.moderate'); case 'challenging': return t('common.challenging'); default: return t('common.moderate'); } }; if (isLoading) { return (",
      "메인콘텐츠실시간가이드스타일2324": "{/* 🎨 메인 콘텐츠 - 실시간 가이드 스타일 */}",
      "지역소개카드regiondat2325": "{/* 🎨 지역 소개 카드 */} {regionData?.description && (",
      "추천여행지카드2327": ")} {/* 🎨 추천 여행지 카드 */}",
      "추천장소리스트recommen2328": "{/* 🎨 추천 장소 리스트 */} {recommendedSpots.length > 0 ? (",
      "지역관광지지도카드recom2329": "{/* 🎨 지역 관광지 지도 카드 */} {recommendedSpots.length > 0 && (",
      "지도컴포넌트동적로드constregio2331": "; // 지도 컴포넌트 동적 로드 const RegionTouristMap = dynamic(() => import(",
      "trydebugcontent2333": "); try { // 🔍 DEBUG: content 데이터 구조 확인 console.log(",
      "contentcontentcontenttyp2334": ", content: content, contentType: typeof content }); // 🔍 DEBUG: overview.keyFacts 구조 상세 확인 if (content && content.overview && content.overview.keyFacts) { console.log(",
      "keyfactscontentoverview2335": ", { keyFacts: content.overview.keyFacts, isArray: Array.isArray(content.overview.keyFacts), length: content.overview.keyFacts.length, firstItem: content.overview.keyFacts[0], mappedTitles: content.overview.keyFacts.map((kf: any) => kf.title), mappedDescriptions: content.overview.keyFacts.map((kf: any) => kf.description) }); } // content가 있는 경우 DB 데이터 직접 사용 (서울+ko 정확한 내용) if (content) { // 🎯 DB content에서 정확한 지역 정보 추출 (올바른 필드명 사용) const overview = content.overview || {}; const realTimeGuide = content.realTimeGuide || {}; // 지역 데이터 설정 (DB의 실제 내용만 사용, 하드코딩 제거) const actualRegionData = { name: locationName, country: overview.location ||",
      "coordinatescontentcoord2336": "}, coordinates: content?.coordinates?.[0] ? { lat: parseFloat(content.coordinates[0].lat), lng: parseFloat(content.coordinates[0].lng) } : (realTimeGuide.chapters?.[0]?.coordinates || null) }; setRegionData(actualRegionData); // 🎯 실제 DB 구조에 맞게 추천 장소 추출 let spotsToAdd: RecommendedSpot[] = []; // ✅ 실제 DB 구조: content.route.steps에서 추천 장소 추출 if (content?.route?.steps && Array.isArray(content.route.steps)) { const stepSpots = content.route.steps.slice(0, 8).map((step: any, index: number) => { // ✅ DB에서 location 필드가 정확히 존재함:",
      "루브르박물관2337": "루브르 박물관",
      "popularitymathmax952342": "), popularity: Math.max(95 - (index * 3), 70), coordinates }; }).filter(Boolean); spotsToAdd = stepSpots; } setRecommendedSpots(spotsToAdd); } else { // content가 없는 경우에만 API 호출 const response = await fetch(`/api/ai/generate-region-overview`, { method:",
      "지역정보로드오류2343": "지역 정보 로드 오류:",
      "asstringfinallyseti2344": ") as string); } finally { setIsLoading(false); } }, [locationName, language, routingResult, content, t]); // 지역 정보 및 추천 장소 로드 useEffect(() => { loadRegionData(); }, [loadRegionData]); const handleSpotClick = (spot: RecommendedSpot) => { // 🎯 지역 컨텍스트 포함한 URL 생성 - 동일명 장소 혼동 방지 const spotName = encodeURIComponent(spot.name); const parentRegion = encodeURIComponent(locationName); // URL에 parent 파라미터로 상위 지역 정보 포함 const targetUrl = `/guide/${spotName}?parent=${parentRegion}&lang=${language}`; // 🔄 세션 스토리지에 지역 컨텍스트 저장 (추가 보안) if (typeof window !==",
      "지역컨텍스트포함네비게이션2345": "🎯 지역 컨텍스트 포함 네비게이션:",
      "regiondatacountryp2347": "{regionData.country}</p> )} </div> </div> </div> </div> {/* 🎨 메인 콘텐츠 - 실시간 가이드 스타일 */} <div className=",
      "지역소개카드regiondat2348": "{/* 🎨 지역 소개 카드 */} {regionData?.description && ( <div className=",
      "regiondatadescriptionp2349": "{regionData.description}</p> </div> </div> )} {/* 🎨 하이라이트 카드 */} {regionData?.highlights && regionData.highlights.length > 0 && ( <div className=",
      "highlightspandiv2350": "{highlight}</span> </div> ))} </div> </div> </div> )} {/* 🎨 추천 여행지 카드 */} <div className=",
      "recommendedspotslength2351": ")} ({recommendedSpots.length}) </h2> </div> {/* 🎨 추천 장소 리스트 */} {recommendedSpots.length > 0 ? ( <div className=",
      "pdivdivdiv2352": ")}</p> </div> )} </div> </div> {/* 🎨 지역 관광지 지도 카드 */} {recommendedSpots.length > 0 && ( <div className=",
      "regiontouristmaplocationname2353": "<RegionTouristMap locationName={locationName} recommendedSpots={recommendedSpots.filter(spot => spot.coordinates).map(spot => ({ id: spot.id, name: spot.name, lat: spot.coordinates!.lat, lng: spot.coordinates!.lng, description: spot.description }))} regionCenter={regionData?.coordinates ? { lat: regionData.coordinates.lat, lng: regionData.coordinates.lng, name: `${locationName} 중심` } : (content?.realTimeGuide?.chapters?.[0]?.coordinates ? { lat: parseFloat(content.realTimeGuide.chapters[0].coordinates.lat), lng: parseFloat(content.realTimeGuide.chapters[0].coordinates.lng), name: `${locationName} 중심` } : undefined)} guideCoordinates={content?.coordinatesArray || content?.coordinates || null} // 🎯 coordinates 칼럼 데이터 전달 className=",
      "methodpostheaders2355": ", { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ locationName, language, routingResult }) }); const result = await response.json(); if (result.success) { setRegionData(result.regionData); setRecommendedSpots(result.recommendedSpots || []); } else { setError(result.error || t('guide.cannotLoadInfo')); } } } catch (err) { console.error('지역 정보 로드 오류:', err); setError(t('guide.loadRegionError') as string); } finally { setIsLoading(false); } }, [locationName, language, routingResult, content, t]); // 지역 정보 및 추천 장소 로드 useEffect(() => { loadRegionData(); }, [loadRegionData]); const handleSpotClick = (spot: RecommendedSpot) => { // 🎯 지역 컨텍스트 포함한 URL 생성 - 동일명 장소 혼동 방지 const spotName = encodeURIComponent(spot.name); const parentRegion = encodeURIComponent(locationName); // URL에 parent 파라미터로 상위 지역 정보 포함 const targetUrl =",
      "세션스토리지에지역컨텍스트저장추2356": "; // 🔄 세션 스토리지에 지역 컨텍스트 저장 (추가 보안) if (typeof window !== 'undefined') { sessionStorage.setItem('guideRegionalContext', JSON.stringify({ parentRegion: locationName, spotName: spot.name, timestamp: Date.now() })); } console.log('🎯 지역 컨텍스트 포함 네비게이션:', { spot: spot.name, parent: locationName, url: targetUrl, location: spot.location }); router.push(targetUrl); }; const getDifficultyColor = (difficulty: string) => { switch (difficulty) { case 'easy': return 'bg-black/5 text-black/80 border border-black/10'; case 'moderate': return 'bg-black/10 text-black/90 border border-black/20'; case 'challenging': return 'bg-black text-white border border-black'; default: return 'bg-black/5 text-black/70 border border-black/10'; } }; const getDifficultyText = (difficulty: string) => { switch (difficulty) { case 'easy': return t('common.easy'); case 'moderate': return t('common.moderate'); case 'challenging': return t('common.challenging'); default: return t('common.moderate'); } }; if (isLoading) { return ( <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\"> <GuideLoading message={t('guide.loadingRegionInfo') as string} /> </div> ); } if (error) { return ( <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\"> <div className=\"text-center\"> <div className=\"text-4xl mb-4\">😕</div> <h2 className=\"text-xl font-medium text-gray-900 mb-2\">{t('guide.cannotLoadInfo')}</h2> <p className=\"text-gray-600 mb-4\">{error}</p> <button onClick={loadRegionData} className=\"px-4 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-800 transition-colors focus:ring-2 focus:ring-gray-500 focus:ring-offset-2\" aria-label={t('guide.loadMapAriaLabel') as string} > <RefreshCw className=\"w-4 h-4 mr-2 inline\" /> {t('common.tryAgain')} </button> </div> </div> ); } return ( <div className=\"min-h-screen bg-white\"> {/* 🎨 모던 미니멀 헤더 */} <div className=\"border-b border-black/8\"> <div className=\"max-w-4xl mx-auto p-6\"> <div className=\"flex items-center gap-4\"> <button onClick={() => router.back()} className=\"p-3 hover:bg-black/5 rounded-2xl transition-colors\" aria-label={t('common.goBack') as string} > <svg className=\"w-5 h-5 text-black/60\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"> <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1.5} d=\"M15 19l-7-7 7-7\" /> </svg> </button> <div className=\"text-center\"> <h1 className=\"text-3xl font-bold text-black tracking-tight\"> {regionData?.name || locationName} </h1> {regionData?.country && ( <p className=\"text-black/60 mt-1 font-medium\">{regionData.country}</p> )} </div> </div> </div> </div> {/* 🎨 메인 콘텐츠 - 실시간 가이드 스타일 */} <div className=\"max-w-4xl mx-auto p-6 space-y-8\"> {/* 🎨 지역 소개 카드 */} {regionData?.description && ( <div className=\"relative overflow-hidden rounded-3xl bg-white border border-black/8 shadow-lg shadow-black/3 transition-all duration-500 hover:shadow-xl hover:shadow-black/8 hover:border-black/12\"> <div className=\"p-8\"> <div className=\"flex items-center gap-3 mb-4\"> <div className=\"w-8 h-8 bg-black rounded-full flex items-center justify-center\"> <Info className=\"w-4 h-4 text-white\" /> </div> <h2 className=\"text-xl font-semibold text-black\">{t('guide.regionIntroduction')}</h2> </div> <p className=\"text-black/70 leading-relaxed text-lg\">{regionData.description}</p> </div> </div> )} {/* 🎨 하이라이트 카드 */} {regionData?.highlights && regionData.highlights.length > 0 && ( <div className=\"relative overflow-hidden rounded-3xl bg-white border border-black/8 shadow-lg shadow-black/3 transition-all duration-500 hover:shadow-xl hover:shadow-black/8 hover:border-black/12\"> <div className=\"p-6\"> <div className=\"flex items-center gap-3 mb-4\"> <div className=\"w-8 h-8 bg-black rounded-full flex items-center justify-center\"> <Star className=\"w-4 h-4 text-white\" /> </div> <h2 className=\"text-xl font-semibold text-black\">{t('guide.keyFeatures')}</h2> </div> <div className=\"space-y-3\"> {regionData.highlights.map((highlight, index) => ( <div key={index} className=\"flex items-start gap-3\" > <div className=\"w-1.5 h-1.5 bg-black rounded-full flex-shrink-0 mt-2\"></div> <span className=\"text-black/80 font-medium leading-relaxed\">{highlight}</span> </div> ))} </div> </div> </div> )} {/* 🎨 추천 여행지 카드 */} <div className=\"relative overflow-hidden rounded-3xl bg-white border border-black/8 shadow-lg shadow-black/3 transition-all duration-500 hover:shadow-xl hover:shadow-black/8 hover:border-black/12\"> <div className=\"p-8\"> <div className=\"flex items-center gap-3 mb-6\"> <div className=\"w-8 h-8 bg-black rounded-full flex items-center justify-center\"> <Compass className=\"w-4 h-4 text-white\" /> </div> <h2 className=\"text-xl font-semibold text-black\"> {t('guide.recommendedSpots')} ({recommendedSpots.length}) </h2> </div> {/* 🎨 추천 장소 리스트 */} {recommendedSpots.length > 0 ? ( <div className=\"space-y-4\"> {recommendedSpots.map((spot, index) => ( <div key={spot.id} onClick={() => handleSpotClick(spot)} className=\"group flex items-center justify-between p-4 bg-black/2 border border-black/5 rounded-2xl cursor-pointer transition-all duration-300 hover:border-black/20 hover:bg-black/5 active:scale-[0.99] focus:ring-2 focus:ring-black/30 focus:ring-offset-2\" role=\"button\" tabIndex={0} onKeyDown={(e) => { if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); handleSpotClick(spot); } }} aria-label={",
      "divclassnameflexitems2357": "} > <div className=\"flex items-center gap-4 flex-1\"> <div className=\"w-8 h-8 bg-black text-white text-sm font-semibold rounded-xl flex items-center justify-center flex-shrink-0\"> {index + 1} </div> <div className=\"flex-1\"> <h3 className=\"text-lg font-semibold text-black group-hover:text-black/80\"> {spot.name} </h3> </div> </div> <div className=\"flex items-center gap-3 flex-shrink-0\"> <div className=\"flex items-center gap-1 text-black/60 text-sm\"> <Star className=\"w-4 h-4 fill-black/60 text-black/60\" /> <span className=\"font-medium\">{Math.floor(spot.popularity/10)}</span> </div> <ArrowRight className=\"w-5 h-5 text-black/40 group-hover:text-black/60 transition-colors\" /> </div> </div> ))} </div> ) : ( <div className=\"text-center py-12\"> <div className=\"text-6xl mb-4\">🗺️</div> <p className=\"text-black/60 text-lg\">{t('guide.noRecommendedSpots')}</p> </div> )} </div> </div> {/* 🎨 지역 관광지 지도 카드 */} {recommendedSpots.length > 0 && ( <div className=\"relative overflow-hidden rounded-3xl bg-white border border-black/8 shadow-lg shadow-black/3 transition-all duration-500 hover:shadow-xl hover:shadow-black/8 hover:border-black/12\"> <div className=\"p-8\"> <RegionTouristMap locationName={locationName} recommendedSpots={recommendedSpots.filter(spot => spot.coordinates).map(spot => ({ id: spot.id, name: spot.name, lat: spot.coordinates!.lat, lng: spot.coordinates!.lng, description: spot.description }))} regionCenter={regionData?.coordinates ? { lat: regionData.coordinates.lat, lng: regionData.coordinates.lng, name:",
      "locationname중심2358": "${locationName} 중심",
      "keyfactscontentovervi2359": ":', { keyFacts: content.overview.keyFacts, isArray: Array.isArray(content.overview.keyFacts), length: content.overview.keyFacts.length, firstItem: content.overview.keyFacts[0], mappedTitles: content.overview.keyFacts.map((kf: any) => kf.title), mappedDescriptions: content.overview.keyFacts.map((kf: any) => kf.description) }); } // content가 있는 경우 DB 데이터 직접 사용 (서울+ko 정확한 내용) if (content) { // 🎯 DB content에서 정확한 지역 정보 추출 (올바른 필드명 사용) const overview = content.overview || {}; const realTimeGuide = content.realTimeGuide || {}; // 지역 데이터 설정 (DB의 실제 내용만 사용, 하드코딩 제거) const actualRegionData = { name: locationName, country: overview.location ||",
      "시테섬2360": ": \"시테 섬"
    },
    "button": {
      "모던미니멀헤더2323": "{/* 🎨 모던 미니멀 헤더 */}",
      "모던미니멀헤더divclas2346": "{/* 🎨 모던 미니멀 헤더 */} <div className="
    },
    "description": {
      "하이라이트카드region2326": ")} {/* 🎨 하이라이트 카드 */} {regionData?.highlights && regionData.highlights.length > 0 && (",
      "seasonalitystringpopular2332": "; seasonality: string; popularity: number; image?: string; coordinates?: { lat: number; lng: number; }; } interface RegionExploreHubProps { locationName: string; routingResult: any; language: string; content?: any; // content 데이터 추가 } const RegionExploreHub = ({ locationName, routingResult, language, content }: RegionExploreHubProps) => { const { t } = useLanguage(); const router = useRouter(); const [regionData, setRegionData] = useState<RegionData | null>(null); const [recommendedSpots, setRecommendedSpots] = useState<RecommendedSpot[]>([]); const [isLoading, setIsLoading] = useState(true); const [error, setError] = useState<string>("
    },
    "filter": {
      "spotcoordinatesmapspot2330": "spot.coordinates).map(spot => ({ id: spot.id, name: spot.name, lat: spot.coordinates!.lat, lng: spot.coordinates!.lng, description: spot.description }))} regionCenter={regionData?.coordinates ? { lat: regionData.coordinates.lat, lng: regionData.coordinates.lng, name: `${locationName} 중심` } : (content?.realTimeGuide?.chapters?.[0]?.coordinates ? { lat: parseFloat(content.realTimeGuide.chapters[0].coordinates.lat), lng: parseFloat(content.realTimeGuide.chapters[0].coordinates.lng), name: `${locationName} 중심` } : undefined)} guideCoordinates={content?.coordinatesArray || content?.coordinates || null} // 🎯 coordinates 칼럼 데이터 전달 className=\"w-full\" />"
    },
    "title": {
      "steptitle에서콜론뒤설명부분추2338": "; // step.title에서 콜론 뒤 설명 부분 추출:",
      "세계적인예술작품의향연2339": "세계적인 예술 작품의 향연",
      "1trimiftitledescrip2340": ")[1]?.trim(); if (titleDescription && titleDescription.length > 5) { description = titleDescription; } } return { id: `route-step-${index}`, name: placeName, // ✅ DB의 location 필드 직접 사용:",
      "루브르박물관2341": "루브르 박물관",
      "nameplacenamedb의lo2354": ", name: placeName, // ✅ DB의 location 필드 직접 사용: \"시테 섬\", \"루브르 박물관\" 등 location: locationName, category: 'travel', description, highlights: [], estimatedDays: Math.min(Math.ceil((index + 1) / 3), 2), difficulty: 'easy' as const, seasonality: t('common.yearRound'), popularity: Math.max(95 - (index * 3), 70), coordinates }; }).filter(Boolean); spotsToAdd = stepSpots; } setRecommendedSpots(spotsToAdd); } else { // content가 없는 경우에만 API 호출 const response = await fetch(",
      "루브르박물관세계적인예술작품의향연2361": ": \"루브르 박물관: 세계적인 예술 작품의 향연",
      "1trimiftitledescr2362": ":')[1]?.trim(); if (titleDescription && titleDescription.length > 5) { description = titleDescription; } } return { id: `route-step-${index}`, name: placeName, // ✅ DB의 location 필드 직접 사용:"
    }
  },
  "TourContent": {
    "general": {
      "guidecoordinatesanys2363": "; guideCoordinates?: any; // Supabase coordinates 컬럼 데이터 } const TourContent = ({ guide, language, chapterRefs, guideCoordinates }: TourContentProps) => { const { currentLanguage, t } = useLanguage(); const router = useRouter(); const { data: session } = useSession(); const [currentChapterIndex, setCurrentChapterIndex] = useState(0); const [expandedChapters, setExpandedChapters] = useState",
      "0constshowscrolltops2364": "([0]); const [showScrollTop, setShowScrollTop] = useState(false); const [showScrollButtons, setShowScrollButtons] = useState(false); const [componentKey, setComponentKey] = useState(0); // 새로운 상태들 const [isBookmarked, setIsBookmarked] = useState(false); const [isBookmarking, setIsBookmarking] = useState(false); const [showSuccessPopup, setShowSuccessPopup] = useState(false); const [showRegenerateConfirm, setShowRegenerateConfirm] = useState(false); const [isRegenerating, setIsRegenerating] = useState(false); // 가이드 데이터를 전역에 노출 (라이브 페이지에서 사용) useEffect(() => { if (guide) { (window as any).currentGuideData = guide; console.log('🌍 TourContent에서 가이드 데이터 전역 설정:', guide); } }, [guide]); const internalChapterRefs = useRef",
      "ai생성인트로챗터사용또는2365": "([]); // 🎯 AI 생성 인트로 챗터 사용 또는 폴백 인트로 생성 const createIntroChapter = () => { const locationName = guide?.metadata?.originalLocationName || guide?.overview?.title || String(t('guide.thisPlace')); // 🔥 React Error #185 방지: AI가 이미 인트로 챕터(id: 0)를 생성했는지 안전하게 확인 const aiGeneratedIntro = guide?.realTimeGuide?.chapters?.find?.(chapter => chapter?.id === 0); if (aiGeneratedIntro && aiGeneratedIntro.narrative) { // 🤖 AI가 생성한 96.3% 만족도 최적화 인트로 사용 console.log('🤖 AI 생성 인트로 챕터 사용:', aiGeneratedIntro.title); return aiGeneratedIntro; } // 🔄 폴백: AI가 인트로를 생성하지 않은 경우 기본 인트로 생성 console.log('🔄 폴백 인트로 챕터 생성'); return { id: 0, title: `${locationName} ${t('guide.tourStart')}`, narrative: `${locationName}에 오신 것을 환영합니다. ${guide.overview?.location || '특별한 장소'}에 위치한 이곳은 ${guide.overview?.keyFeatures || guide.overview?.summary || '독특한 매력'}으로 유명합니다. ${guide.overview?.background || '풍부한 역사'}를 간직한 특별한 장소로 여러분을 안내하겠습니다.`, nextDirection: `이제 ${locationName}의 첫 번째 핵심 공간으로 함께 이동하여 본격적인 투어를 시작해보겠습니다.` }; }; // 🔥 React Error #185 방지: 인트로 챕터를 포함한 전체 챕터 배열 (AI 생성 시스템 보존) const introChapter = createIntroChapter(); const originalChapters = guide?.realTimeGuide?.chapters || []; const aiGeneratedIntro = originalChapters.find?.(chapter => chapter?.id === 0 && chapter?.narrative); let allChapters; if (aiGeneratedIntro) { // 🤖 AI가 인트로를 생성한 경우: 기존 AI 시스템 결과를 그대로 사용 console.log('🤖 AI 생성 인트로 챕터 발견:', aiGeneratedIntro.title); allChapters = originalChapters; } else { // 🔄 AI가 인트로를 생성하지 않은 경우: 폴백 인트로 추가 + 기존 챕터들의 ID 조정 console.log('🔄 폴백 인트로 챕터 추가'); const adjustedChapters = originalChapters.map((chapter, index) => ({ ...chapter, id: index + 1 // 기존 챕터들의 ID를 1부터 시작하도록 조정 })); allChapters = [introChapter, ...adjustedChapters]; } const totalChapters = allChapters.length; // 🎵 GuideChapter를 AudioChapter로 변환 const audioChapters: AudioChapter[] = allChapters.map((chapter) => ({ id: chapter.id, title: chapter.title || `챕터 ${chapter.id}`, text: chapter.narrative || '', duration: chapter.estimatedDuration || 120 // 기본 2분 })); // 🎯 챕터 변경 핸들러 const handleChapterChange = (chapterIndex: number) => { setCurrentChapterIndex(chapterIndex); // 해당 챕터로 스크롤 if (chapterRefs?.current?.[chapterIndex] || internalChapterRefs.current[chapterIndex]) { const targetRef = chapterRefs?.current?.[chapterIndex] || internalChapterRefs.current[chapterIndex]; targetRef?.scrollIntoView({ behavior: 'smooth', block: 'start' }); } // 챕터 확장 if (!expandedChapters.includes(chapterIndex)) { setExpandedChapters(prev => [...prev, chapterIndex]); } }; // 🎧 라이브 투어로 업그레이드 유도 const locationName = guide.metadata?.originalLocationName || guide.overview?.title; const currentChapter = allChapters[currentChapterIndex]; // 안전한 필드 접근 (기본값 제공) const sceneDescription = currentChapter?.sceneDescription || ''; const coreNarrative = currentChapter?.coreNarrative || ''; const humanStories = currentChapter?.humanStories || ''; const nextDirection = currentChapter?.nextDirection || ''; // 🔍 챕터별 좌표 데이터 상세 디버깅 console.log('🔍 TourContent 데이터 구조 (인트로 챕터 포함):', { hasRealTimeGuide: !!guide?.realTimeGuide, originalChaptersLength: guide?.realTimeGuide?.chapters?.length || 0, totalChaptersWithIntro: totalChapters, currentChapterIndex, isIntroChapter: currentChapterIndex === 0, currentChapter: currentChapter ? { id: currentChapter.id, title: currentChapter.title, hasNarrative: !!currentChapter.narrative, hasSceneDescription: !!currentChapter.sceneDescription, hasCoreNarrative: !!currentChapter.coreNarrative, hasHumanStories: !!currentChapter.humanStories, hasNextDirection: !!currentChapter.nextDirection, // 🚨 좌표 데이터 확인 coordinates: currentChapter.coordinates || null, lat: currentChapter.lat || null, lng: currentChapter.lng || null, location: currentChapter.location || null } : null, // 🚨 전체 챕터 좌표 정보 allChaptersCoordinates: allChapters.map(chapter => ({ id: chapter.id, title: chapter.title, coordinates: chapter.coordinates || null, lat: chapter.lat || null, lng: chapter.lng || null, location: chapter.location || null, hasCoordinateData: !!(chapter.coordinates || chapter.lat || chapter.location) })) }); // refs 안전한 초기화 useEffect(() => { if (totalChapters > 0) { // 기존 배열과 길이가 다르면 새로 생성 if (internalChapterRefs.current.length !== totalChapters) { internalChapterRefs.current = new Array(totalChapters).fill(null); } if (chapterRefs && chapterRefs.current.length !== totalChapters) { chapterRefs.current = new Array(totalChapters).fill(null); } } }, [totalChapters, chapterRefs]); // 가이드 데이터 변경 시 컴포넌트 리셋 useEffect(() => { setComponentKey(prev => prev + 1); setCurrentChapterIndex(0); setExpandedChapters([0]); }, [guide?.metadata?.originalLocationName, guide?.realTimeGuide?.chapters?.length]); // 스크롤 이벤트 처리 useEffect(() => { const handleScroll = () => { const scrollY = window.scrollY; setShowScrollTop(scrollY > 300); setShowScrollButtons(scrollY > 300); }; window.addEventListener('scroll', handleScroll, { passive: true }); handleScroll(); // 초기 상태 확인 return () => window.removeEventListener('scroll', handleScroll); }, []); // 컴포넌트 언마운트 시 오디오 정리는 AdvancedAudioPlayer에서 관리됨 // 즐겨찾기 상태 확인 useEffect(() => { const checkBookmarkStatus = async () => { if (session?.user && guide?.metadata?.originalLocationName) { const bookmarked = await isFavoriteGuide(session.user, guide.metadata.originalLocationName); setIsBookmarked(bookmarked); } }; checkBookmarkStatus(); }, [session, guide?.metadata?.originalLocationName]); // 즐겨찾기 핸들러 const handleBookmark = async () => { if (!session?.user) { // 비회원은 로그인 페이지로 리다이렉트 router.push('/auth/signin'); return; } if (!guide?.metadata?.originalLocationName) return; setIsBookmarking(true); try { const result = await saveFavoriteGuide( session.user, guide, guide.metadata.originalLocationName ); if (result.success) { setIsBookmarked(true); setShowSuccessPopup(true); } else { console.error('즐겨찾기 저장 실패:', result.error); } } catch (error) { console.error('즐겨찾기 오류:', error); } finally { setIsBookmarking(false); } }; // 재생성 확인 핸들러 const handleRegenerateConfirm = () => { setShowRegenerateConfirm(false); setIsRegenerating(true); // 기존 재생성 로직 호출 (MultiLangGuideClient의 handleRegenerateGuide와 동일) if (typeof window !== 'undefined' && (window as any).handleRegenerateGuide) { (window as any).handleRegenerateGuide(); } else { // 페이지 새로고침으로 폴백 window.location.reload(); } }; // 맨 위로 스크롤 const scrollToTop = () => { window.scrollTo({ top: 0, behavior: 'smooth' }); }; // 홈으로 이동 const goToHome = () => { router.push('/'); }; // 텍스트 포맷팅 const formatText = (text: string) => { if (!text) return ''; const paragraphs = text.split(/ \\s* /) .filter(paragraph => paragraph.trim().length > 0) .map(paragraph => paragraph.trim().replace(/ /g, ' ')); return paragraphs.map((paragraph, index) => (",
      "챕터토글함수consttoggl2366": ")); }; // 챕터 토글 함수 const toggleChapter = (index: number) => { setExpandedChapters(prev => prev.includes(index) ? prev.filter(i => i !== index) : [...prev, index] ); }; // 🔥 React Error #185 방지: 가이드 데이터 안전성 검증 강화 if (!guide || (!guide.overview && !guide.realTimeGuide)) { return (",
      "reacterror185방지2367": "); } // 🔥 React Error #185 방지: 추가 안전성 검증 if (!guide.metadata) { console.warn('⚠️ Guide metadata is missing, using fallback'); } return (",
      "장소정보2368": "{/* 장소 정보 */}",
      "tier1immediaterecognit2370": "{/* Tier 1: Immediate Recognition - 3초 정보 */}",
      "tier2keyfeatures7초2371": "{/* Tier 2: Key Features - 7초 정보 */} {guide.overview.keyFeatures && (",
      "tier3historicalcont2372": ")} {/* Tier 3: Historical Context - 선택적 확장 */} {guide.overview.background && (",
      "legacysupport기존sum2373": ")} {/* Legacy Support - 기존 summary */} {guide.overview.summary && !guide.overview.location && !guide.overview.keyFeatures && !guide.overview.background && (",
      "필수관람포인트모바일최적화2374": ")} {/* 필수 관람 포인트 - 모바일 최적화 */} {(() => { const mustVisitContent = guide.mustVisitSpots || ''; return mustVisitContent && mustVisitContent.trim().length > 0; })() && (",
      "주의사항글로벌safetyfirst2375": ")} {/* 주의사항 - 글로벌 Safety-First 디자인 */} {(() => { const safetyContent = guide.safetyWarnings || ''; return safetyContent && safetyContent.trim().length > 0; })() && (",
      "시작점지도2376": ")} {/* 시작점 지도 */}",
      "실제위치데이터가져오기co2377": "{(() => { // 실제 위치 데이터 가져오기 const locationData = getLocationCoordinates(locationName || ''); const startPoint = locationData ? locationData.center : DEFAULT_SEOUL_CENTER; const pois = locationData ? locationData.pois.slice(0, 8) : []; // 최대 8개 POI // 🎯 실제 투어 챕터 데이터 준비 - 지능형 좌표 생성 const getSmartCoordinates = (locationName: string, index: number, total: number) => { // 🌍 주요 도시별 기본 좌표 (API 없이) const cityCoords: Record",
      "한국주요명소경복궁lat2378": "= { // 한국 주요 명소 '경복궁': { lat: 37.5796, lng: 126.9770 }, '남산타워': { lat: 37.5512, lng: 126.9882 }, '명동': { lat: 37.5636, lng: 126.9826 }, '서울': { lat: 37.5665, lng: 126.9780 }, '부산': { lat: 35.1796, lng: 129.0756 }, '제주도': { lat: 33.4996, lng: 126.5312 }, // 해외 주요 도시 '에펠탑': { lat: 48.8584, lng: 2.2945 }, '파리': { lat: 48.8566, lng: 2.3522 }, '도쿄': { lat: 35.6762, lng: 139.6503 }, '뉴욕': { lat: 40.7128, lng: -74.0060 }, '런던': { lat: 51.5074, lng: -0.1278 }, '로마': { lat: 41.9028, lng: 12.4964 } }; console.log(`🔍 좌표 매칭 시도: \"${locationName}\"`); // 1. 정확한 매칭 시도 let baseCoord = cityCoords[locationName]; if (baseCoord) { console.log(`✅ 정확 매칭: ${locationName} → ${baseCoord.lat}, ${baseCoord.lng}`); } else { // 2. 부분 매칭 시도 (한국 명소 우선) const koreanMatches = Object.keys(cityCoords).filter(city => city.includes('경복') || city.includes('남산') || city.includes('명동') || city.includes('서울') || city.includes('부산') || city.includes('제주') ); const matchedCity = koreanMatches.find(city => locationName.includes(city) || city.includes(locationName) ); if (matchedCity) { baseCoord = cityCoords[matchedCity]; console.log(`🎯 부분 매칭: ${locationName} → ${matchedCity} → ${baseCoord.lat}, ${baseCoord.lng}`); } else { // 3. 기본값: 서울 중심 baseCoord = cityCoords['서울']; console.log(`🏠 기본값 사용: ${locationName} → 서울 → ${baseCoord.lat}, ${baseCoord.lng}`); } } // 챕터별 스마트 분산 (원형 배치) const angle = (index / total) * 2 * Math.PI; const radius = 0.005 + (index * 0.002); // 거리 증가 return { lat: baseCoord.lat + Math.cos(angle) * radius, lng: baseCoord.lng + Math.sin(angle) * radius }; }; const chaptersForMap = allChapters.map((chapter, index) => { // 🎯 AI 생성 좌표를 그대로 사용 (Enhanced Service로 보정된) let coords; if (chapter.coordinates?.lat && chapter.coordinates?.lng) { // AI가 생성한 좌표 사용 (Enhanced Service로 보정되어야 함) coords = { lat: chapter.coordinates.lat, lng: chapter.coordinates.lng }; console.log(`🤖 AI 좌표 사용 - 챕터 ${chapter.id}: ${coords.lat}, ${coords.lng}`); } else if (chapter.lat && chapter.lng) { // 대체 좌표 필드 사용 coords = { lat: chapter.lat, lng: chapter.lng }; console.log(`📍 기존 좌표 사용 - 챕터 ${chapter.id}: ${coords.lat}, ${coords.lng}`); } else { // 폴백: 동적 좌표 생성 coords = getSmartCoordinates(locationName || '', index, allChapters.length); console.log(`🔄 동적 좌표 생성 - 챕터 ${chapter.id}: ${coords.lat}, ${coords.lng}`); } return { id: chapter.id, title: chapter.title, lat: coords.lat, lng: coords.lng, narrative: chapter.narrative || chapter.sceneDescription || '', originalIndex: index }; }); // 🎯 스마트 시작점 설정 - 실제 챕터 좌표 우선 사용 let smartStartPoint; if (chaptersForMap.length > 0) { // 유효한 좌표를 가진 첫 번째 챕터 사용 const validChapter = chaptersForMap.find(chapter => chapter.lat !== undefined && chapter.lng !== undefined && !isNaN(chapter.lat) && !isNaN(chapter.lng) ); if (validChapter) { smartStartPoint = { lat: validChapter.lat, lng: validChapter.lng, name: `${locationName} 시작점` }; console.log('✅ 실제 챕터 좌표로 중심점 설정:', smartStartPoint); } else { // 모든 챕터 좌표의 평균값 계산 const validCoords = chaptersForMap.filter(c => c.lat !== undefined && c.lng !== undefined && !isNaN(c.lat) && !isNaN(c.lng) ); if (validCoords.length > 0) { const avgLat = validCoords.reduce((sum, c) => sum + c.lat, 0) / validCoords.length; const avgLng = validCoords.reduce((sum, c) => sum + c.lng, 0) / validCoords.length; smartStartPoint = { lat: avgLat, lng: avgLng, name: `${locationName} 중심점` }; console.log('🎯 평균 좌표로 중심점 설정:', smartStartPoint); } else { // 최후 폴백: 기본 좌표 smartStartPoint = { lat: 48.8584, lng: 2.2945, name: '에펠탑' }; console.log('⚠️ 폴백 좌표 사용:', smartStartPoint); } } } else { // 챕터가 없을 때 기본값 smartStartPoint = { lat: 48.8584, lng: 2.2945, name: '에펠탑' }; console.log('📍 기본 좌표 사용 (챕터 없음):', smartStartPoint); } console.log('🗺️ 지도 데이터 (API 없음):', { locationName, smartStartPoint, chaptersCount: chaptersForMap.length, chapters: chaptersForMap.map(c => ({ id: c.id, title: c.title, lat: c.lat, lng: c.lng })) }); return (",
      "챕터리스트2379": "{/* 챕터 리스트 */}",
      "총totalchapters개챕터2380": "총 {totalChapters}개 챕터",
      "확장인디케이터2383": "{/* 확장 인디케이터 */}",
      "챕터내용expandedchapter2384": "{/* 챕터 내용 */} {expandedChapters.includes(index) && (",
      "디버깅정보개발모드에서만2386": ")} {/* 디버깅 정보 (개발 모드에서만) */} {process.env.NODE_ENV === 'development' && (",
      "즐겨찾기버튼2388": "{/* 즐겨찾기 버튼 */}",
      "isbookmarking저장중is2389": "{isBookmarking ? '저장중...' : isBookmarked ? '저장됨' : String(t('guide.bookmarkGuide'))}",
      "isregenerating생성중s2391": "{isRegenerating ? '생성중...' : String(t('guide.regenerateGuide'))}",
      "interfacetourcontentprops2397": "; interface TourContentProps { guide: GuideData; language: string; chapterRefs?: MutableRefObject<(HTMLElement | null)[]>; guideCoordinates?: any; // Supabase coordinates 컬럼 데이터 } const TourContent = ({ guide, language, chapterRefs, guideCoordinates }: TourContentProps) => { const { currentLanguage, t } = useLanguage(); const router = useRouter(); const { data: session } = useSession(); const [currentChapterIndex, setCurrentChapterIndex] = useState(0); const [expandedChapters, setExpandedChapters] = useState<number[]>([0]); const [showScrollTop, setShowScrollTop] = useState(false); const [showScrollButtons, setShowScrollButtons] = useState(false); const [componentKey, setComponentKey] = useState(0); // 새로운 상태들 const [isBookmarked, setIsBookmarked] = useState(false); const [isBookmarking, setIsBookmarking] = useState(false); const [showSuccessPopup, setShowSuccessPopup] = useState(false); const [showRegenerateConfirm, setShowRegenerateConfirm] = useState(false); const [isRegenerating, setIsRegenerating] = useState(false); // 가이드 데이터를 전역에 노출 (라이브 페이지에서 사용) useEffect(() => { if (guide) { (window as any).currentGuideData = guide; console.log(",
      "guideguideconst2398": ", guide); } }, [guide]); const internalChapterRefs = useRef<(HTMLElement | null)[]>([]); // 🎯 AI 생성 인트로 챗터 사용 또는 폴백 인트로 생성 const createIntroChapter = () => { const locationName = guide?.metadata?.originalLocationName || guide?.overview?.title || String(t(",
      "aigeneratedintrotitleret2400": ", aiGeneratedIntro.title); return aiGeneratedIntro; } // 🔄 폴백: AI가 인트로를 생성하지 않은 경우 기본 인트로 생성 console.log(",
      "으로유명합니다guideoverviewb2403": "}으로 유명합니다. ${guide.overview?.background ||",
      "를간직한특별한장소로여러분을안내하겠습니다2404": "}를 간직한 특별한 장소로 여러분을 안내하겠습니다.`, nextDirection: `이제 ${locationName}의 첫 번째 핵심 공간으로 함께 이동하여 본격적인 투어를 시작해보겠습니다.` }; }; // 🔥 React Error #185 방지: 인트로 챕터를 포함한 전체 챕터 배열 (AI 생성 시스템 보존) const introChapter = createIntroChapter(); const originalChapters = guide?.realTimeGuide?.chapters || []; const aiGeneratedIntro = originalChapters.find?.(chapter => chapter?.id === 0 && chapter?.narrative); let allChapters; if (aiGeneratedIntro) { // 🤖 AI가 인트로를 생성한 경우: 기존 AI 시스템 결과를 그대로 사용 console.log(",
      "aigeneratedintrotitleall2405": ", aiGeneratedIntro.title); allChapters = originalChapters; } else { // 🔄 AI가 인트로를 생성하지 않은 경우: 폴백 인트로 추가 + 기존 챕터들의 ID 조정 console.log(",
      "챕터확장ifexpandedch2408": "}); } // 챕터 확장 if (!expandedChapters.includes(chapterIndex)) { setExpandedChapters(prev => [...prev, chapterIndex]); } }; // 🎧 라이브 투어로 업그레이드 유도 const locationName = guide.metadata?.originalLocationName || guide.overview?.title; const currentChapter = allChapters[currentChapterIndex]; // 안전한 필드 접근 (기본값 제공) const sceneDescription = currentChapter?.sceneDescription ||",
      "챕터별좌표데이터상세디버깅cons2409": "; // 🔍 챕터별 좌표 데이터 상세 디버깅 console.log(",
      "hasrealtimeguideguide2410": ", { hasRealTimeGuide: !!guide?.realTimeGuide, originalChaptersLength: guide?.realTimeGuide?.chapters?.length || 0, totalChaptersWithIntro: totalChapters, currentChapterIndex, isIntroChapter: currentChapterIndex === 0, currentChapter: currentChapter ? { id: currentChapter.id, title: currentChapter.title, hasNarrative: !!currentChapter.narrative, hasSceneDescription: !!currentChapter.sceneDescription, hasCoreNarrative: !!currentChapter.coreNarrative, hasHumanStories: !!currentChapter.humanStories, hasNextDirection: !!currentChapter.nextDirection, // 🚨 좌표 데이터 확인 coordinates: currentChapter.coordinates || null, lat: currentChapter.lat || null, lng: currentChapter.lng || null, location: currentChapter.location || null } : null, // 🚨 전체 챕터 좌표 정보 allChaptersCoordinates: allChapters.map(chapter => ({ id: chapter.id, title: chapter.title, coordinates: chapter.coordinates || null, lat: chapter.lat || null, lng: chapter.lng || null, location: chapter.location || null, hasCoordinateData: !!(chapter.coordinates || chapter.lat || chapter.location) })) }); // refs 안전한 초기화 useEffect(() => { if (totalChapters > 0) { // 기존 배열과 길이가 다르면 새로 생성 if (internalChapterRefs.current.length !== totalChapters) { internalChapterRefs.current = new Array(totalChapters).fill(null); } if (chapterRefs && chapterRefs.current.length !== totalChapters) { chapterRefs.current = new Array(totalChapters).fill(null); } } }, [totalChapters, chapterRefs]); // 가이드 데이터 변경 시 컴포넌트 리셋 useEffect(() => { setComponentKey(prev => prev + 1); setCurrentChapterIndex(0); setExpandedChapters([0]); }, [guide?.metadata?.originalLocationName, guide?.realTimeGuide?.chapters?.length]); // 스크롤 이벤트 처리 useEffect(() => { const handleScroll = () => { const scrollY = window.scrollY; setShowScrollTop(scrollY > 300); setShowScrollButtons(scrollY > 300); }; window.addEventListener(",
      "즐겨찾기저장실패2413": "즐겨찾기 저장 실패:",
      "즐겨찾기오류2414": "즐겨찾기 오류:",
      "windowasanyhandleregen2415": "&& (window as any).handleRegenerateGuide) { (window as any).handleRegenerateGuide(); } else { // 페이지 새로고침으로 폴백 window.location.reload(); } }; // 맨 위로 스크롤 const scrollToTop = () => { window.scrollTo({ top: 0, behavior:",
      "홈으로이동constgotohom2416": "}); }; // 홈으로 이동 const goToHome = () => { router.push(",
      "텍스트포맷팅constformatt2417": "); }; // 텍스트 포맷팅 const formatText = (text: string) => { if (!text) return",
      "paragraphp챕터2418": "{paragraph} </p> )); }; // 챕터 토글 함수 const toggleChapter = (index: number) => { setExpandedChapters(prev => prev.includes(index) ? prev.filter(i => i !== index) : [...prev, index] ); }; // 🔥 React Error #185 방지: 가이드 데이터 안전성 검증 강화 if (!guide || (!guide.overview && !guide.realTimeGuide)) { return ( <div className=",
      "showprogresstrued2419": "))} showProgress={true} /> </div> ); } // 🔥 React Error #185 방지: 추가 안전성 검증 if (!guide.metadata) { console.warn(",
      "장소정보divclassname2420": "{/* 장소 정보 */} <div className=",
      "tier1immediaterecognit2422": "{/* Tier 1: Immediate Recognition - 3초 정보 */} <div className=",
      "guideoverviewvisitinfoseas2423": "{guide.overview.visitInfo.season}</span> </div> )} </div> </div> </div> {/* Tier 2: Key Features - 7초 정보 */} {guide.overview.keyFeatures && ( <div className=",
      "guideoverviewkeyfeatures2424": "{guide.overview.keyFeatures}</p> </div> )} {/* Tier 3: Historical Context - 선택적 확장 */} {guide.overview.background && ( <div className=",
      "guideoverviewbackgroundp2425": "{guide.overview.background}</p> </div> )} {/* Legacy Support - 기존 summary */} {guide.overview.summary && !guide.overview.location && !guide.overview.keyFeatures && !guide.overview.background && ( <div className=",
      "divdivdiv필수2426": "</div> </div> </div> )} {/* 필수 관람 포인트 - 모바일 최적화 */} {(() => { const mustVisitContent = guide.mustVisitSpots ||",
      "divdivdiv주의2427": "</div> </div> </div> )} {/* 주의사항 - 글로벌 Safety-First 디자인 */} {(() => { const safetyContent = guide.safetyWarnings ||",
      "divdivdiv시작2428": "</div> </div> </div> )} {/* 시작점 지도 */} <div className=",
      "실제위치데이터가져오기co2429": "{(() => { // 실제 위치 데이터 가져오기 const locationData = getLocationCoordinates(locationName ||",
      "conststartpointlocation2430": "); const startPoint = locationData ? locationData.center : DEFAULT_SEOUL_CENTER; const pois = locationData ? locationData.pois.slice(0, 8) : []; // 최대 8개 POI // 🎯 실제 투어 챕터 데이터 준비 - 지능형 좌표 생성 const getSmartCoordinates = (locationName: string, index: number, total: number) => { // 🌍 주요 도시별 기본 좌표 (API 없이) const cityCoords: Record<string, {lat: number, lng: number}> = { // 한국 주요 명소",
      "남산타워2431": "남산타워",
      "명동2432": "명동",
      "서울2433": "서울",
      "부산2434": "부산",
      "제주도2435": "제주도",
      "에펠탑2436": "에펠탑",
      "파리2437": "파리",
      "도쿄2438": "도쿄",
      "뉴욕2439": "뉴욕",
      "런던2440": "런던",
      "로마2441": "로마",
      "1정확한매칭시도letbasecoo2442": "); // 1. 정확한 매칭 시도 let baseCoord = cityCoords[locationName]; if (baseCoord) { console.log(`✅ 정확 매칭: ${locationName} → ${baseCoord.lat}, ${baseCoord.lng}`); } else { // 2. 부분 매칭 시도 (한국 명소 우선) const koreanMatches = Object.keys(cityCoords).filter(city => city.includes(",
      "서울2448": "서울",
      "indexallchapterslength2449": ", index, allChapters.length); console.log(`🔄 동적 좌표 생성 - 챕터 ${chapter.id}: ${coords.lat}, ${coords.lng}`); } return { id: chapter.id, title: chapter.title, lat: coords.lat, lng: coords.lng, narrative: chapter.narrative || chapter.sceneDescription ||",
      "smartstartpointelse2451": ", smartStartPoint); } else { // 모든 챕터 좌표의 평균값 계산 const validCoords = chaptersForMap.filter(c => c.lat !== undefined && c.lng !== undefined && !isNaN(c.lat) && !isNaN(c.lng) ); if (validCoords.length > 0) { const avgLat = validCoords.reduce((sum, c) => sum + c.lat, 0) / validCoords.length; const avgLng = validCoords.reduce((sum, c) => sum + c.lng, 0) / validCoords.length; smartStartPoint = { lat: avgLat, lng: avgLng, name: `${locationName} 중심점` }; console.log(",
      "smartstartpointelse2452": ", smartStartPoint); } else { // 최후 폴백: 기본 좌표 smartStartPoint = { lat: 48.8584, lng: 2.2945, name:",
      "폴백좌표사용2453": "⚠️ 폴백 좌표 사용:",
      "에펠탑2454": "에펠탑",
      "기본좌표사용챕터없음2455": "📍 기본 좌표 사용 (챕터 없음):",
      "지도데이터api없음2456": "🗺️ 지도 데이터 (API 없음):",
      "guidecoordinatesguidecoordin2458": "guideCoordinates={guideCoordinates} /> ); })()} </div> {/* 챕터 리스트 */} <div className=",
      "총totalchapters개챕터div2459": "총 {totalChapters}개 챕터 </div> </div> <div className=",
      "챕터ref설정오류2460": "챕터 ref 설정 오류:",
      "chaptertitleh3챕터별오2462": "{chapter.title}</h3> {/* 챕터별 오디오 플레이어 */} {audioChapters[index] && ( <div className=",
      "확장인디케이터divclassnam2463": "{/* 확장 인디케이터 */} <div className={`transition-transform duration-300 ${ expandedChapters.includes(index) ?",
      "divflexflexdi2464": "/> </div> </Flex> </Flex> </div> {/* 챕터 내용 */} {expandedChapters.includes(index) && ( <div className=",
      "chapternextdirectionp2466": "{chapter.nextDirection} </p> </div> </div> </div> )} {/* 디버깅 정보 (개발 모드에서만) */} {process.env.NODE_ENV ===",
      "pdivstackd2467": ")}</p>} </div> )} </Stack> </div> )} </Card> </div> ))} </div> </div> {/* 하단 액션 버튼들 */} <div className=",
      "즐겨찾기버튼buttononclic2468": "{/* 즐겨찾기 버튼 */} <button onClick={handleBookmark} disabled={isBookmarking || isBookmarked} className=",
      "저장중2469": "저장중...",
      "저장됨2470": "저장됨",
      "spanbutton재생성2471": "))} </span> </button> {/* 재생성 버튼 */} <button onClick={() => setShowRegenerateConfirm(true)} disabled={isRegenerating} className=",
      "생성중2472": "생성중...",
      "showscrollbuttonscreate2475": "&& showScrollButtons && createPortal( <> {/* 스크롤 투 탑 버튼 (우하단) - 모던 모노크롬 스타일 */} <div style={{ position:",
      "이제locationname의첫번째핵심공간2479": "이제 ${locationName}의 첫 번째 핵심 공간으로 함께 이동하여 본격적인 투어를 시작해보겠습니다.",
      "variantfullwidthpadding2481": "} variant=\"fullwidth\" padding=\"none\" className=\"min-h-screen\"> <div className=\"flex-1 overflow-y-auto\"> <div className=\"px-0.5 py-2 sm:px-0.5 lg:px-1\"> <Stack space=\"sm\"> {/* 장소 정보 */} <div className=\"text-center space-y-2\"> <div className=\"w-20 h-20 border-4 border-foreground rounded-full flex items-center justify-center mx-auto\"> <MapPin className=\"w-10 h-10\" /> </div> <div> <h1 className=\"text-2xl font-medium mb-2\"> {guide?.metadata?.originalLocationName || guide?.overview?.title || String(t('guide.guideTitle'))} </h1> </div> </div> {/* 개요 - 글로벌 프리미엄 디자인 시스템 */} {guide.overview && ( <div className=\"relative mb-3\"> <div className=\"relative overflow-hidden rounded-3xl bg-white border border-black/8 shadow-lg shadow-black/3 transition-all duration-500 hover:shadow-xl hover:shadow-black/8 hover:border-black/12\"> {/* Header Section - Ultra Minimal */} <div className=\"px-4 pt-4 pb-4\"> <div className=\"flex items-center justify-between\"> <div className=\"flex items-center gap-4\"> <div className=\"w-12 h-12 bg-black rounded-2xl flex items-center justify-center shadow-lg\"> <Info className=\"w-6 h-6 text-white\" /> </div> <div> <h2 className=\"text-2xl font-bold text-black tracking-tight\">{t('guide.overview')}</h2> <p className=\"text-sm text-black/60 font-medium mt-0.5\">{t('guide.essentialInfo')}</p> </div> </div> {/* Status Indicator - Minimal Dots */} <div className=\"flex gap-1.5\"> <div className=\"w-2 h-2 bg-black/20 rounded-full\"></div> <div className=\"w-2 h-2 bg-black rounded-full\"></div> <div className=\"w-2 h-2 bg-black/20 rounded-full\"></div> </div> </div> </div> {/* Quick Info Grid - Mobile First */} <div className=\"px-4 pb-4\"> <div className=\"grid grid-cols-1 gap-2\"> {/* Tier 1: Immediate Recognition - 3초 정보 */} <div className=\"p-4 bg-black/3 rounded-2xl border border-black/5\"> <div className=\"flex items-center gap-3 mb-2\"> <div className=\"w-6 h-6 bg-black rounded-lg flex items-center justify-center\"> <MapPin className=\"w-4 h-4 text-white\" /> </div> <span className=\"text-xs font-bold text-black/60 uppercase tracking-wider\">{t('guide.locationAccess')}</span> </div> <div className=\"space-y-2\"> {guide.overview.location && ( <div className=\"flex items-center gap-3\"> <div className=\"w-1 h-4 bg-black rounded-full\"></div> <p className=\"text-sm font-semibold text-black\">{guide.overview.location}</p> </div> )} {/* Practical Info Row */} <div className=\"flex flex-wrap gap-4 mt-3\"> {guide.overview.visitInfo?.duration && ( <div className=\"flex items-center gap-2\"> <Clock className=\"w-4 h-4 text-black/60\" /> <span className=\"text-sm font-medium text-black\">{guide.overview.visitInfo.duration}</span> </div> )} {guide.overview.visitInfo?.difficulty && ( <div className=\"flex items-center gap-2\"> <Users className=\"w-4 h-4 text-black/60\" /> <span className=\"text-sm font-medium text-black\">{guide.overview.visitInfo.difficulty}</span> </div> )} {guide.overview.visitInfo?.season && ( <div className=\"flex items-center gap-2\"> <Calendar className=\"w-4 h-4 text-black/60\" /> <span className=\"text-sm font-medium text-black\">{guide.overview.visitInfo.season}</span> </div> )} </div> </div> </div> {/* Tier 2: Key Features - 7초 정보 */} {guide.overview.keyFeatures && ( <div className=\"p-4 bg-black/2 rounded-2xl border border-black/5\"> <div className=\"flex items-center gap-3 mb-3\"> <div className=\"w-6 h-6 bg-black rounded-lg flex items-center justify-center\"> <Eye className=\"w-4 h-4 text-white\" /> </div> <span className=\"text-xs font-bold text-black/60 uppercase tracking-wider\">{t('guide.keyFeatures')}</span> </div> <p className=\"text-sm font-medium text-black leading-relaxed\">{guide.overview.keyFeatures}</p> </div> )} {/* Tier 3: Historical Context - 선택적 확장 */} {guide.overview.background && ( <div className=\"p-4 bg-black/1 rounded-2xl border border-black/5\"> <div className=\"flex items-center gap-3 mb-3\"> <div className=\"w-6 h-6 bg-black rounded-lg flex items-center justify-center\"> <BookOpen className=\"w-4 h-4 text-white\" /> </div> <span className=\"text-xs font-bold text-black/60 uppercase tracking-wider\">{t('guide.historicalContext')}</span> </div> <p className=\"text-sm font-medium text-black/80 leading-relaxed\">{guide.overview.background}</p> </div> )} {/* Legacy Support - 기존 summary */} {guide.overview.summary && !guide.overview.location && !guide.overview.keyFeatures && !guide.overview.background && ( <div className=\"p-4 bg-black/2 rounded-2xl border border-black/5\"> <p className=\"text-sm font-medium text-black leading-relaxed\">{guide.overview.summary}</p> </div> )} </div> </div> {/* Bottom Accent Line - Ultra Minimal */} <div className=\"absolute bottom-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-black/10 to-transparent\"></div> </div> </div> )} {/* 필수 관람 포인트 - 모바일 최적화 */} {(() => { const mustVisitContent = guide.mustVisitSpots || ''; return mustVisitContent && mustVisitContent.trim().length > 0; })() && ( <div className=\"relative mb-2\"> <div className=\"relative overflow-hidden rounded-3xl bg-white border border-black/8 shadow-lg shadow-black/3 transition-all duration-500 hover:shadow-xl hover:shadow-black/8 hover:border-black/12\"> {/* Header */} <div className=\"px-2 pt-2 pb-2\"> <div className=\"flex items-center justify-between\"> <div className=\"flex items-center gap-4\"> <div className=\"w-12 h-12 bg-black rounded-2xl flex items-center justify-center shadow-lg\"> <Sparkles className=\"w-6 h-6 text-white\" /> </div> <div> <h2 className=\"text-2xl font-bold text-black tracking-tight\">{t('guide.mustSeePoints')}</h2> <p className=\"text-sm text-black/60 font-medium mt-0.5\">{t('guide.mustSeeHighlights')}</p> </div> </div> {/* Counter */} <div className=\"w-8 h-8 bg-black rounded-full flex items-center justify-center\"> <span className=\"text-xs font-bold text-white\"> {(guide.mustVisitSpots || '').split(/[, ]|#/).filter(spot => spot && spot.trim()).length - 1} </span> </div> </div> </div> {/* Tags Container - Mobile Optimized */} <div className=\"px-4 pb-4\"> <div className=\"flex flex-wrap gap-3\"> {(guide.mustVisitSpots || '').split(/[, ]|#/).filter(spot => spot && spot.trim()).map((spot, index) => { const cleanSpot = spot.trim().replace(/^#+/, ''); if (!cleanSpot || index === 0) return null; return ( <div key={",
      "classnamegrouprelativeov2482": "} className=\"group relative overflow-hidden\" > <div className=\"relative px-5 py-3 bg-black rounded-2xl shadow-md transition-all duration-300 hover:shadow-lg hover:scale-105 active:scale-95 cursor-pointer\"> <div className=\"flex items-center gap-2\"> <span className=\"text-white font-semibold text-sm\"> #{cleanSpot} </span> <div className=\"w-1 h-1 bg-white/60 rounded-full opacity-0 group-hover:opacity-100 transition-opacity\"></div> </div> {/* Hover Shine Effect */} <div className=\"absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0 translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-700\"></div> </div> </div> ); })} </div> {/* Fallback for Non-Hashtag Format */} {guide.mustVisitSpots && !guide.mustVisitSpots.includes('#') && ( <div className=\"mt-4 p-4 bg-black/3 border border-black/5 rounded-2xl\"> <p className=\"text-sm font-medium text-black leading-relaxed\">{guide.mustVisitSpots}</p> </div> )} </div> {/* Bottom Accent */} <div className=\"absolute bottom-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-black/10 to-transparent\"></div> </div> </div> )} {/* 주의사항 - 글로벌 Safety-First 디자인 */} {(() => { const safetyContent = guide.safetyWarnings || ''; return safetyContent && safetyContent.trim().length > 0; })() && ( <div className=\"relative mb-2\"> <div className=\"relative overflow-hidden rounded-3xl bg-white border border-black/8 shadow-lg shadow-black/3 transition-all duration-500 hover:shadow-xl hover:shadow-black/8 hover:border-black/12\"> {/* Header */} <div className=\"px-2 pt-2 pb-2\"> <div className=\"flex items-center justify-between\"> <div className=\"flex items-center gap-4\"> <div className=\"w-12 h-12 bg-black rounded-2xl flex items-center justify-center shadow-lg\"> <AlertTriangle className=\"w-6 h-6 text-white\" /> </div> <div> <h2 className=\"text-2xl font-bold text-black tracking-tight\">{t('guide.precautions')}</h2> <p className=\"text-sm text-black/60 font-medium mt-0.5\">{t('guide.safetyGuidelines')}</p> </div> </div> {/* Priority Indicator */} <div className=\"w-3 h-3 bg-black rounded-full opacity-80\"></div> </div> </div> {/* Safety Items - Mobile Optimized List */} <div className=\"px-4 pb-4\"> <div className=\"space-y-3\"> {(() => { const safetyContent = guide.safetyWarnings || ''; return safetyContent.split(' ').filter(w => w.trim()).map((warning, index) => { const cleanWarning = warning.trim().replace(/^[•·-]\\s*/, ''); if (!cleanWarning) return null; return ( <div key={",
      "classnamegrouprelative2483": "} className=\"group relative\"> <div className=\"flex items-start gap-4 p-4 bg-black/2 hover:bg-black/4 rounded-2xl border border-black/5 transition-all duration-200\"> {/* Bullet Point - Ultra Minimal */} <div className=\"flex-shrink-0 w-2 h-2 bg-black rounded-full mt-2 group-hover:scale-110 transition-transform\"></div> {/* Content */} <p className=\"text-sm font-medium text-black leading-relaxed\"> {cleanWarning} </p> </div> </div> ); }); })()} </div> </div> {/* Bottom Accent */} <div className=\"absolute bottom-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-black/10 to-transparent\"></div> </div> </div> )} {/* 시작점 지도 */} <div className=\"mb-3\"> {(() => { // 실제 위치 데이터 가져오기 const locationData = getLocationCoordinates(locationName || ''); const startPoint = locationData ? locationData.center : DEFAULT_SEOUL_CENTER; const pois = locationData ? locationData.pois.slice(0, 8) : []; // 최대 8개 POI // 🎯 실제 투어 챕터 데이터 준비 - 지능형 좌표 생성 const getSmartCoordinates = (locationName: string, index: number, total: number) => { // 🌍 주요 도시별 기본 좌표 (API 없이) const cityCoords: Record<string, {lat: number, lng: number}> = { // 한국 주요 명소 '경복궁': { lat: 37.5796, lng: 126.9770 }, '남산타워': { lat: 37.5512, lng: 126.9882 }, '명동': { lat: 37.5636, lng: 126.9826 }, '서울': { lat: 37.5665, lng: 126.9780 }, '부산': { lat: 35.1796, lng: 129.0756 }, '제주도': { lat: 33.4996, lng: 126.5312 }, // 해외 주요 도시 '에펠탑': { lat: 48.8584, lng: 2.2945 }, '파리': { lat: 48.8566, lng: 2.3522 }, '도쿄': { lat: 35.6762, lng: 139.6503 }, '뉴욕': { lat: 40.7128, lng: -74.0060 }, '런던': { lat: 51.5074, lng: -0.1278 }, '로마': { lat: 41.9028, lng: 12.4964 } }; console.log(",
      "1정확한매칭시도letbasecoo2484": "); // 1. 정확한 매칭 시도 let baseCoord = cityCoords[locationName]; if (baseCoord) { console.log(",
      "else2부분매칭시도한국2485": "); } else { // 2. 부분 매칭 시도 (한국 명소 우선) const koreanMatches = Object.keys(cityCoords).filter(city => city.includes('경복') || city.includes('남산') || city.includes('명동') || city.includes('서울') || city.includes('부산') || city.includes('제주') ); const matchedCity = koreanMatches.find(city => locationName.includes(city) || city.includes(locationName) ); if (matchedCity) { baseCoord = cityCoords[matchedCity]; console.log(",
      "else3기본값서울중심b2486": "); } else { // 3. 기본값: 서울 중심 baseCoord = cityCoords['서울']; console.log(",
      "챕터별스마트분산원형배치c2487": "); } } // 챕터별 스마트 분산 (원형 배치) const angle = (index / total) * 2 * Math.PI; const radius = 0.005 + (index * 0.002); // 거리 증가 return { lat: baseCoord.lat + Math.cos(angle) * radius, lng: baseCoord.lng + Math.sin(angle) * radius }; }; const chaptersForMap = allChapters.map((chapter, index) => { // 🎯 AI 생성 좌표를 그대로 사용 (Enhanced Service로 보정된) let coords; if (chapter.coordinates?.lat && chapter.coordinates?.lng) { // AI가 생성한 좌표 사용 (Enhanced Service로 보정되어야 함) coords = { lat: chapter.coordinates.lat, lng: chapter.coordinates.lng }; console.log(",
      "elseifchapterlatc2488": "); } else if (chapter.lat && chapter.lng) { // 대체 좌표 필드 사용 coords = { lat: chapter.lat, lng: chapter.lng }; console.log(",
      "else폴백동적좌표생성co2489": "); } else { // 폴백: 동적 좌표 생성 coords = getSmartCoordinates(locationName || '', index, allChapters.length); console.log(",
      "returnidchapterid2490": "); } return { id: chapter.id, title: chapter.title, lat: coords.lat, lng: coords.lng, narrative: chapter.narrative || chapter.sceneDescription || '', originalIndex: index }; }); // 🎯 스마트 시작점 설정 - 실제 챕터 좌표 우선 사용 let smartStartPoint; if (chaptersForMap.length > 0) { // 유효한 좌표를 가진 첫 번째 챕터 사용 const validChapter = chaptersForMap.find(chapter => chapter.lat !== undefined && chapter.lng !== undefined && !isNaN(chapter.lat) && !isNaN(chapter.lng) ); if (validChapter) { smartStartPoint = { lat: validChapter.lat, lng: validChapter.lng, name:",
      "consolelog실제챕터좌표로중심2491": "}; console.log('✅ 실제 챕터 좌표로 중심점 설정:', smartStartPoint); } else { // 모든 챕터 좌표의 평균값 계산 const validCoords = chaptersForMap.filter(c => c.lat !== undefined && c.lng !== undefined && !isNaN(c.lat) && !isNaN(c.lng) ); if (validCoords.length > 0) { const avgLat = validCoords.reduce((sum, c) => sum + c.lat, 0) / validCoords.length; const avgLng = validCoords.reduce((sum, c) => sum + c.lng, 0) / validCoords.length; smartStartPoint = { lat: avgLat, lng: avgLng, name:",
      "consolelog평균좌표로중심점2492": "}; console.log('🎯 평균 좌표로 중심점 설정:', smartStartPoint); } else { // 최후 폴백: 기본 좌표 smartStartPoint = { lat: 48.8584, lng: 2.2945, name: '에펠탑' }; console.log('⚠️ 폴백 좌표 사용:', smartStartPoint); } } } else { // 챕터가 없을 때 기본값 smartStartPoint = { lat: 48.8584, lng: 2.2945, name: '에펠탑' }; console.log('📍 기본 좌표 사용 (챕터 없음):', smartStartPoint); } console.log('🗺️ 지도 데이터 (API 없음):', { locationName, smartStartPoint, chaptersCount: chaptersForMap.length, chapters: chaptersForMap.map(c => ({ id: c.id, title: c.title, lat: c.lat, lng: c.lng })) }); return ( <StartLocationMap locationName={locationName || ''} startPoint={smartStartPoint} // 🔥 스마트 시작점 사용 chapters={chaptersForMap} // 🔥 실제 챕터 데이터 전달 pois={[]} // POI는 비워둠 (챕터 우선) className=\"w-full\" guideCoordinates={guideCoordinates} /> ); })()} </div> {/* 챕터 리스트 */} <div className=\"space-y-2\"> <div className=\"flex items-center gap-3\"> <div className=\"w-8 h-8 border-2 border-foreground rounded-full flex items-center justify-center\"> <Route className=\"w-5 h-5\" /> </div> <h2 className=\"text-xl font-medium\">{t('guide.viewingOrder')}</h2> <div className=\"px-3 py-1 bg-muted rounded-full text-sm text-muted-foreground\"> 총 {totalChapters}개 챕터 </div> </div> <div className=\"space-y-2\"> {allChapters.map((chapter, index) => ( <div key={",
      "refeltryifint2493": "} ref={(el) => { try { if (internalChapterRefs.current && index < internalChapterRefs.current.length) { internalChapterRefs.current[index] = el; } if (chapterRefs?.current && index < chapterRefs.current.length) { chapterRefs.current[index] = el; } } catch (error) { console.warn('챕터 ref 설정 오류:', error); } }} > <Card variant={currentChapterIndex === index ? \"elevated\" : \"default\"} className=\"overflow-hidden transition-all duration-200\" > {/* 챕터 헤더 */} <div className=\"p-2 cursor-pointer\" onClick={() => toggleChapter(index)} > <Flex align=\"center\" justify=\"between\"> <Flex align=\"center\" gap=\"md\" className=\"flex-1\"> <div className={",
      "index0tguideint2494": "}> {index === 0 ? t('guide.intro') : String(index).padStart(2, '0')} </div> <div className=\"flex-1\"> <div className=\"space-y-2\"> <h3 className=\"font-medium\">{chapter.title}</h3> {/* 챕터별 오디오 플레이어 */} {audioChapters[index] && ( <div className=\"w-full\"> <ChapterAudioPlayer chapter={audioChapters[index]} className=\"w-full max-w-sm\" /> </div> )} </div> </div> </Flex> <Flex align=\"center\" gap=\"sm\"> {/* 확장 인디케이터 */} <div className={",
      "pptitlechaptertitl2496": "}:</p> <p>Title: {chapter.title}</p> <p>Narrative: {chapter.narrative ? t('common.exists') : t('common.notExists')}</p> <p>Scene: {chapter.sceneDescription ? t('common.exists') : t('common.notExists')}</p> <p>Core: {chapter.coreNarrative ? t('common.exists') : t('common.notExists')}</p> <p>Stories: {chapter.humanStories ? t('common.exists') : t('common.notExists')}</p> <p>Next Direction: {chapter.nextDirection ? t('common.exists') : t('common.notExists')}</p> {index === 0 && <p className=\"text-slate-600 font-medium\">🎯 {t('guide.autoGeneratedIntro')}</p>} </div> )} </Stack> </div> )} </Card> </div> ))} </div> </div> {/* 하단 액션 버튼들 */} <div className=\"mt-8 mb-4 px-4\"> <div className=\"flex gap-4\"> {/* 즐겨찾기 버튼 */} <button onClick={handleBookmark} disabled={isBookmarking || isBookmarked} className=\"flex-1 flex items-center justify-center gap-3 px-6 py-4 bg-white border-2 border-black rounded-2xl font-semibold text-black transition-all duration-300 hover:bg-black hover:text-white active:scale-95 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white disabled:hover:text-black disabled:active:scale-100\" > <Heart className={",
      "spanisbookmarking2497": "} /> <span> {isBookmarking ? '저장중...' : isBookmarked ? '저장됨' : String(t('guide.bookmarkGuide'))} </span> </button> {/* 재생성 버튼 */} <button onClick={() => setShowRegenerateConfirm(true)} disabled={isRegenerating} className=\"flex-1 flex items-center justify-center gap-3 px-6 py-4 bg-white border-2 border-black rounded-2xl font-semibold text-black transition-all duration-300 hover:bg-black hover:text-white active:scale-95 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white disabled:hover:text-black disabled:active:scale-100\" > <RefreshCw className={",
      "guideguidecon2498": ":', guide); } }, [guide]); const internalChapterRefs = useRef<(HTMLElement | null)[]>([]); // 🎯 AI 생성 인트로 챗터 사용 또는 폴백 인트로 생성 const createIntroChapter = () => { const locationName = guide?.metadata?.originalLocationName || guide?.overview?.title || String(t(",
      "aigeneratedintrotitler2499": ":', aiGeneratedIntro.title); return aiGeneratedIntro; } // 🔄 폴백: AI가 인트로를 생성하지 않은 경우 기본 인트로 생성 console.log(",
      "aigeneratedintrotitlea2500": ":', aiGeneratedIntro.title); allChapters = originalChapters; } else { // 🔄 AI가 인트로를 생성하지 않은 경우: 폴백 인트로 추가 + 기존 챕터들의 ID 조정 console.log(",
      "hasrealtimeguideguid2501": ":', { hasRealTimeGuide: !!guide?.realTimeGuide, originalChaptersLength: guide?.realTimeGuide?.chapters?.length || 0, totalChaptersWithIntro: totalChapters, currentChapterIndex, isIntroChapter: currentChapterIndex === 0, currentChapter: currentChapter ? { id: currentChapter.id, title: currentChapter.title, hasNarrative: !!currentChapter.narrative, hasSceneDescription: !!currentChapter.sceneDescription, hasCoreNarrative: !!currentChapter.coreNarrative, hasHumanStories: !!currentChapter.humanStories, hasNextDirection: !!currentChapter.nextDirection, // 🚨 좌표 데이터 확인 coordinates: currentChapter.coordinates || null, lat: currentChapter.lat || null, lng: currentChapter.lng || null, location: currentChapter.location || null } : null, // 🚨 전체 챕터 좌표 정보 allChaptersCoordinates: allChapters.map(chapter => ({ id: chapter.id, title: chapter.title, coordinates: chapter.coordinates || null, lat: chapter.lat || null, lng: chapter.lng || null, location: chapter.location || null, hasCoordinateData: !!(chapter.coordinates || chapter.lat || chapter.location) })) }); // refs 안전한 초기화 useEffect(() => { if (totalChapters > 0) { // 기존 배열과 길이가 다르면 새로 생성 if (internalChapterRefs.current.length !== totalChapters) { internalChapterRefs.current = new Array(totalChapters).fill(null); } if (chapterRefs && chapterRefs.current.length !== totalChapters) { chapterRefs.current = new Array(totalChapters).fill(null); } } }, [totalChapters, chapterRefs]); // 가이드 데이터 변경 시 컴포넌트 리셋 useEffect(() => { setComponentKey(prev => prev + 1); setCurrentChapterIndex(0); setExpandedChapters([0]); }, [guide?.metadata?.originalLocationName, guide?.realTimeGuide?.chapters?.length]); // 스크롤 이벤트 처리 useEffect(() => { const handleScroll = () => { const scrollY = window.scrollY; setShowScrollTop(scrollY > 300); setShowScrollButtons(scrollY > 300); }; window.addEventListener(",
      "errorfinallysetisb2502": ":', error); } finally { setIsBookmarking(false); } }; // 재생성 확인 핸들러 const handleRegenerateConfirm = () => { setShowRegenerateConfirm(false); setIsRegenerating(true); // 기존 재생성 로직 호출 (MultiLangGuideClient의 handleRegenerateGuide와 동일) if (typeof window !==",
      "smartstartpointelse2503": ":', smartStartPoint); } else { // 모든 챕터 좌표의 평균값 계산 const validCoords = chaptersForMap.filter(c => c.lat !== undefined && c.lng !== undefined && !isNaN(c.lat) && !isNaN(c.lng) ); if (validCoords.length > 0) { const avgLat = validCoords.reduce((sum, c) => sum + c.lat, 0) / validCoords.length; const avgLng = validCoords.reduce((sum, c) => sum + c.lng, 0) / validCoords.length; smartStartPoint = { lat: avgLat, lng: avgLng, name: `${locationName} 중심점` }; console.log(",
      "smartstartpointelse2504": ":', smartStartPoint); } else { // 최후 폴백: 기본 좌표 smartStartPoint = { lat: 48.8584, lng: 2.2945, name:",
      "smartstartpointel2505": ":', smartStartPoint); } } } else { // 챕터가 없을 때 기본값 smartStartPoint = { lat: 48.8584, lng: 2.2945, name:"
    },
    "title": {
      "개요글로벌프리미엄디자인시스템2369": "{/* 개요 - 글로벌 프리미엄 디자인 시스템 */} {guide.overview && (",
      "챕터별오디오플레이어audiocha2382": "{/* 챕터별 오디오 플레이어 */} {audioChapters[index] && (",
      "reacterror185방지2399": ")); // 🔥 React Error #185 방지: AI가 이미 인트로 챕터(id: 0)를 생성했는지 안전하게 확인 const aiGeneratedIntro = guide?.realTimeGuide?.chapters?.find?.(chapter => chapter?.id === 0); if (aiGeneratedIntro && aiGeneratedIntro.narrative) { // 🤖 AI가 생성한 96.3% 만족도 최적화 인트로 사용 console.log(",
      "narrativelocationnam2401": ")}`, narrative: `${locationName}에 오신 것을 환영합니다. ${guide.overview?.location ||",
      "에위치한이곳은guideoverviewk2402": "}에 위치한 이곳은 ${guide.overview?.keyFeatures || guide.overview?.summary ||",
      "constadjustedchaptersor2406": "); const adjustedChapters = originalChapters.map((chapter, index) => ({ ...chapter, id: index + 1 // 기존 챕터들의 ID를 1부터 시작하도록 조정 })); allChapters = [introChapter, ...adjustedChapters]; } const totalChapters = allChapters.length; // 🎵 GuideChapter를 AudioChapter로 변환 const audioChapters: AudioChapter[] = allChapters.map((chapter) => ({ id: chapter.id, title: chapter.title || `챕터 ${chapter.id}`, text: chapter.narrative ||",
      "durationchapterestimatedd2407": ", duration: chapter.estimatedDuration || 120 // 기본 2분 })); // 🎯 챕터 변경 핸들러 const handleChapterChange = (chapterIndex: number) => { setCurrentChapterIndex(chapterIndex); // 해당 챕터로 스크롤 if (chapterRefs?.current?.[chapterIndex] || internalChapterRefs.current[chapterIndex]) { const targetRef = chapterRefs?.current?.[chapterIndex] || internalChapterRefs.current[chapterIndex]; targetRef?.scrollIntoView({ behavior:",
      "h1divdiv개요2421": "))} </h1> </div> </div> {/* 개요 - 글로벌 프리미엄 디자인 시스템 */} {guide.overview && ( <div className=",
      "originalindexindex2450": ", originalIndex: index }; }); // 🎯 스마트 시작점 설정 - 실제 챕터 좌표 우선 사용 let smartStartPoint; if (chaptersForMap.length > 0) { // 유효한 좌표를 가진 첫 번째 챕터 사용 const validChapter = chaptersForMap.find(chapter => chapter.lat !== undefined && chapter.lng !== undefined && !isNaN(chapter.lat) && !isNaN(chapter.lng) ); if (validChapter) { smartStartPoint = { lat: validChapter.lat, lng: validChapter.lng, name: `${locationName} 시작점` }; console.log(",
      "startpointsmartstartpoint2457": "} startPoint={smartStartPoint} // 🔥 스마트 시작점 사용 chapters={chaptersForMap} // 🔥 실제 챕터 데이터 전달 pois={[]} // POI는 비워둠 (챕터 우선) className=",
      "locationname에오신것을환영합니다2478": "${locationName}에 오신 것을 환영합니다. ${guide.overview?.location || '특별한 장소'}에 위치한 이곳은 ${guide.overview?.keyFeatures || guide.overview?.summary || '독특한 매력'}으로 유명합니다. ${guide.overview?.background || '풍부한 역사'}를 간직한 특별한 장소로 여러분을 안내하겠습니다.",
      "챕터chapterid2480": "챕터 ${chapter.id}"
    },
    "card": {
      "챕터헤더2381": "{/* 챕터 헤더 */}",
      "하단액션버튼들2387": "{/* 하단 액션 버튼들 */}",
      "챕터헤더divclassname2461": "{/* 챕터 헤더 */} <div className="
    },
    "filter": {
      "다음이동안내chapternext2385": "{/* 다음 이동 안내 */} {chapter.nextDirection && (",
      "남산2443": "남산",
      "명동2444": "명동",
      "서울2445": "서울",
      "부산2446": "부산",
      "제주2447": "제주"
    },
    "button": {
      "재생성버튼2390": "{/* 재생성 버튼 */}",
      "디버깅정보개발환경에서만pro2392": "{/* 디버깅 정보 (개발 환경에서만) */} {process.env.NODE_ENV === 'development' && (",
      "스크롤네비게이션버튼들reactport2393": "{/* 스크롤 네비게이션 버튼들 - React Portal로 body에 직접 렌더링 */} {typeof window !== 'undefined' && showScrollButtons && createPortal(",
      "스크롤투탑버튼우하단모던모노크롬2394": "{/* 스크롤 투 탑 버튼 (우하단) - 모던 모노크롬 스타일 */}",
      "handlescrollpassivetru2411": ", handleScroll, { passive: true }); handleScroll(); // 초기 상태 확인 return () => window.removeEventListener(",
      "handlescroll컴포2412": ", handleScroll); }, []); // 컴포넌트 언마운트 시 오디오 정리는 AdvancedAudioPlayer에서 관리됨 // 즐겨찾기 상태 확인 useEffect(() => { const checkBookmarkStatus = async () => { if (session?.user && guide?.metadata?.originalLocationName) { const bookmarked = await isFavoriteGuide(session.user, guide.metadata.originalLocationName); setIsBookmarked(bookmarked); } }; checkBookmarkStatus(); }, [session, guide?.metadata?.originalLocationName]); // 즐겨찾기 핸들러 const handleBookmark = async () => { if (!session?.user) { // 비회원은 로그인 페이지로 리다이렉트 router.push(",
      "stackdivdiv2473": "/> </Stack> </div> </div> {/* 디버깅 정보 (개발 환경에서만) */} {process.env.NODE_ENV ===",
      "divdivresponsive2474": "}</div> </div> )} </ResponsiveContainer> {/* 스크롤 네비게이션 버튼들 - React Portal로 body에 직접 렌더링 */} {typeof window !=="
    },
    "form": {
      "홈버튼좌하단모던모노크롬스타일2395": "{/* 홈 버튼 (좌하단) - 모던 모노크롬 스타일 */}",
      "documentbody팝업들2396": ", document.body )} {/* 팝업들 */}",
      "div다음이동안내2465": ")) } </div> {/* 다음 이동 안내 */} {chapter.nextDirection && ( <div className=",
      "div홈버튼좌하단모던2476": "/> </div> {/* 홈 버튼 (좌하단) - 모던 모노크롬 스타일 */} <div style={{ position:",
      "divdocumentbody2477": "/> </div> </>, document.body )} {/* 팝업들 */} <PopupNotification isOpen={showSuccessPopup} onClose={() => setShowSuccessPopup(false)} type=",
      "chevrondownclassnamew52495": "}> <ChevronDown className=\"w-5 h-5 text-muted-foreground\" /> </div> </Flex> </Flex> </div> {/* 챕터 내용 */} {expandedChapters.includes(index) && ( <div className=\"border-t border-border p-2\"> <Stack space=\"sm\"> <div className=\"text-muted-foreground leading-relaxed\"> {chapter.narrative ? formatText(chapter.narrative) : formatText([chapter.sceneDescription, chapter.coreNarrative, chapter.humanStories] .filter(Boolean).join(' ')) } </div> {/* 다음 이동 안내 */} {chapter.nextDirection && ( <div className=\"mt-2 p-2 bg-muted/30 rounded-lg border-l-4 border-foreground\"> <div className=\"flex items-start gap-3\"> <div className=\"w-6 h-6 border-2 border-foreground rounded-full flex items-center justify-center flex-shrink-0 mt-1\"> <Route className=\"w-3 h-3\" /> </div> <div> <h4 className=\"text-sm font-medium mb-1\">{t('guide.nextMoveGuide')}</h4> <p className=\"text-sm text-muted-foreground leading-relaxed\"> {chapter.nextDirection} </p> </div> </div> </div> )} {/* 디버깅 정보 (개발 모드에서만) */} {process.env.NODE_ENV === 'development' && ( <div className=\"text-xs text-muted-foreground bg-muted p-2 rounded-lg\"> <p>Debug - {index === 0 ? 'Intro Chapter' :"
    }
  },
  "layout": {
    "general": {
      "동적메타데이터생성exportasyn2506": "; } // 동적 메타데이터 생성 export async function generateMetadata({ params }: { params: Promise",
      "constresolvedparamsawait2507": "{ const resolvedParams = await params; const locationName = decodeURIComponent(resolvedParams.location || ''); const cookieStore = await cookies(); const cookieLanguage = cookieStore.get(LANGUAGE_COOKIE_NAME)?.value; const serverDetectedLanguage = detectPreferredLanguage({ cookieValue: cookieLanguage, prioritizeUrl: false }); const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://navidocent.com'; // 언어별 메타데이터 템플릿 const templates = { ko: { title: `${locationName} 실시간 투어 가이드 - TripRadio.AI`, description: `${locationName}의 AI 기반 실시간 투어 가이드입니다. 개인 맞춤형 음성 해설과 경로 안내로 완벽한 ${locationName} 여행을 경험하세요.`, keywords: ['실시간 투어', 'AI 가이드', '음성 해설', '여행 가이드', locationName] }, en: { title: `${locationName} Real-time Tour Guide - TripRadio.AI`, description: `AI-powered real-time tour guide for ${locationName}. Experience perfect ${locationName} travel with personalized voice commentary and route guidance.`, keywords: ['real-time tour', 'AI guide', 'voice commentary', 'travel guide', locationName] }, ja: { title: `${locationName}リアルタイムツアーガイド - TripRadio.AI`, description: `${locationName}のAI駆動型リアルタイムツアーガイドです。パーソナライズされた音声解説とルート案内で完璧な${locationName}旅行を体験してください。`, keywords: ['リアルタイムツアー', 'AIガイド', '音声解説', '旅行ガイド', locationName] }, zh: { title: `${locationName}实时旅游指南 - TripRadio.AI`, description: `${locationName}的AI驱动实时旅游指南。通过个性化语音解说和路线指导，体验完美的${locationName}旅行。`, keywords: ['实时导览', 'AI指南', '语音解说', '旅游指南', locationName] }, es: { title: `Guía de Tour en Tiempo Real de ${locationName} - TripRadio.AI`, description: `Guía de tour en tiempo real impulsada por IA para ${locationName}. Experimenta el viaje perfecto a ${locationName} con comentarios de voz personalizados y orientación de ruta.`, keywords: ['tour en tiempo real', 'guía IA', 'comentarios de voz', 'guía de viaje', locationName] } }; const template = templates[serverDetectedLanguage as keyof typeof templates] || templates.ko; const metadata: Metadata = { title: template.title, description: template.description, keywords: template.keywords, openGraph: { title: template.title, description: template.description, type: 'article', locale: getOpenGraphLocale(serverDetectedLanguage), url: `/guide/${encodeURIComponent(locationName)}/tour`, siteName: 'NaviDocent', images: [ { url: `/og-image.jpg`, width: 1200, height: 630, alt: `${locationName} Real-time Tour Guide - TripRadio.AI` } ] }, twitter: { card: 'summary_large_image', title: template.title, description: template.description, images: [`/og-image.jpg`] }, alternates: { canonical: `${baseUrl}/guide/${encodeURIComponent(locationName)}/tour`, languages: { 'ko': `${baseUrl}/guide/${encodeURIComponent(locationName)}/tour?lang=ko`, 'en': `${baseUrl}/guide/${encodeURIComponent(locationName)}/tour?lang=en`, 'ja': `${baseUrl}/guide/${encodeURIComponent(locationName)}/tour?lang=ja`, 'zh': `${baseUrl}/guide/${encodeURIComponent(locationName)}/tour?lang=zh`, 'es': `${baseUrl}/guide/${encodeURIComponent(locationName)}/tour?lang=es`, } }, other: { 'article:author': 'TripRadio.AI', 'article:section': 'Real-time Tour Guide', 'article:tag': template.keywords.join(','), // AI Content Transparency 'ai-content-declaration': `AI-generated real-time tour guide for ${locationName}`, 'content-generation': 'AI-assisted', 'ai-disclosure': `This ${locationName} real-time tour guide is generated with AI assistance`, } }; return metadata; } // OpenGraph 로케일 매핑 function getOpenGraphLocale(language: string): string { const localeMap: Record",
      "interfacetourlayoutprops2508": "; interface TourLayoutProps { children: React.ReactNode; params: Promise<{ location: string }>; } // 동적 메타데이터 생성 export async function generateMetadata({ params }: { params: Promise<{ location: string }> }): Promise<Metadata> { const resolvedParams = await params; const locationName = decodeURIComponent(resolvedParams.location ||",
      "thislocationnamerealt2513": ": `This ${locationName} real-time tour guide is generated with AI assistance`, } }; return metadata; } // OpenGraph 로케일 매핑 function getOpenGraphLocale(language: string): string { const localeMap: Record<string, string> = { ko:",
      "returnmetadatao2517": ", } }; return metadata; } // OpenGraph 로케일 매핑 function getOpenGraphLocale(language: string): string { const localeMap: Record<string, string> = { ko: 'ko_KR', en: 'en_US', ja: 'ja_JP', zh: 'zh_CN', es: 'es_ES' }; return localeMap[language] || 'ko_KR'; } export default async function TourLayout({ children, params }: TourLayoutProps) { const resolvedParams = await params; const locationName = decodeURIComponent(resolvedParams.location || ''); const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://navidocent.com'; return ( <> {/* Article Schema for tour content */} <ArticleSchema title={",
      "adsenseautoads초기화중2574": "{/* ✅ AdSense Auto Ads 초기화 - 중복 방지 */}",
      "windowaddeventlistenerlo2575": "{` window.addEventListener('load', function() { // 중복 초기화 방지 if (window.adsenseAutoAdsInitialized) { console.log('ℹ️ AdSense Auto Ads 이미 초기화됨 - 중복 방지'); return; } console.log('🟢 AdSense Auto Ads 초기화 시작'); if (typeof window.adsbygoogle !== 'undefined') { try { (window.adsbygoogle = window.adsbygoogle || []).push({ google_ad_client: \"ca-pub-8225961966676319\", enable_page_level_ads: true }); window.adsenseAutoAdsInitialized = true; console.log('✅ AdSense Auto Ads 활성화 완료'); } catch (error) { console.warn('⚠️ AdSense Auto Ads 초기화 실패:', error); } } else { console.warn('⚠️ AdSense 스크립트 로드 대기 중...'); } }); `}",
      "amp자동광고는일반react앱에서는사2576": "{/* AMP 자동 광고는 일반 React 앱에서는 사용하지 않고, 대신 AutoAdSense 컴포넌트 사용 */}",
      "googleanalytics최적화된sc2577": "{/* Google Analytics - 최적화된 Script 컴포넌트 사용 */}",
      "viewport별도exportex2578": "}); // ✅ viewport 별도 export export const viewport: Viewport = { width:",
      "initialscale1maximumscal2579": ", initialScale: 1, maximumScale: 5, }; // ✅ 다국어 메타데이터 개선 - TripRadio.AI 브랜딩 export const metadata: Metadata = { title: { default:",
      "무료체험2591": "무료체험",
      "여행ai2592": "여행AI",
      "tripradioai팀2593": "TripRadio.AI 팀",
      "tripradioaiai여행오디오가이드가이2596": "TripRadio.AI - AI 여행 오디오가이드 가이드",
      "exportdefaultasyncf2597": ", }, }; export default async function RootLayout({ children, }: { children: React.ReactNode; }) { // 🔥 서버에서 쿠키 기반 언어 감지 (Next.js 15 호환) const cookieStore = await cookies(); const cookieLanguage = cookieStore.get(LANGUAGE_COOKIE_NAME)?.value; // 서버-클라이언트 일관성을 위한 언어 감지 const serverLanguage = detectPreferredLanguage({ cookieValue: cookieLanguage }); console.log(`🌍 서버 언어 감지: ${serverLanguage} (쿠키: ${cookieLanguage})`); return ( <html lang={serverLanguage} suppressHydrationWarning> <head> {/* DNS Prefetch for Performance */} <link rel=",
      "adsenseautoads초기화2599": "/> {/* ✅ AdSense Auto Ads 초기화 - 중복 방지 */} <Script id=",
      "function중복초기화방지if2600": ", function() { // 중복 초기화 방지 if (window.adsenseAutoAdsInitialized) { console.log(",
      "adsenseautoads초기화시작2601": "🟢 AdSense Auto Ads 초기화 시작",
      "adsenseautoads활성화완료2602": "✅ AdSense Auto Ads 활성화 완료",
      "adsenseautoads초기화실패2603": "⚠️ AdSense Auto Ads 초기화 실패:",
      "adsense스크립트로드대기중2604": "⚠️ AdSense 스크립트 로드 대기 중...",
      "headbodyclassname2605": "/> </head> <body className={`${roboto.variable} font-sans antialiased`} suppressHydrationWarning> {/* AMP 자동 광고는 일반 React 앱에서는 사용하지 않고, 대신 AutoAdSense 컴포넌트 사용 */} <SessionProvider> <LanguageProvider> <ClientLayout> {children} </ClientLayout> </LanguageProvider> </SessionProvider> {/* Google Analytics - 최적화된 Script 컴포넌트 사용 */} <Script src=",
      "서버언어감지serverlanguage2606": "🌍 서버 언어 감지: ${serverLanguage} (쿠키: ${cookieLanguage})",
      "suppresshydrationwarning2608": "} suppressHydrationWarning> {/* AMP 자동 광고는 일반 React 앱에서는 사용하지 않고, 대신 AutoAdSense 컴포넌트 사용 */} <SessionProvider> <LanguageProvider> <ClientLayout> {children} </ClientLayout> </LanguageProvider> </SessionProvider> {/* Google Analytics - 최적화된 Script 컴포넌트 사용 */} <Script src=\"https://www.googletagmanager.com/gtag/js?id=G-MZ7XSC2X43\" strategy=\"afterInteractive\" /> <Script id=\"google-analytics\" strategy=\"afterInteractive\"> {",
      "tripradioai팀2611": ": 'TripRadio.AI 팀",
      "tripradioaiai여행오디오가이드2614": ": 'TripRadio.AI - AI 여행 오디오가이드 가이드"
    },
    "navigation": {
      "언어별메타데이터템플릿consttempl2509": "; // 언어별 메타데이터 템플릿 const templates = { ko: { title: `${locationName} 실시간 투어 가이드 - TripRadio.AI`, description: `${locationName}의 AI 기반 실시간 투어 가이드입니다. 개인 맞춤형 음성 해설과 경로 안내로 완벽한 ${locationName} 여행을 경험하세요.`, keywords: [",
      "returnarticlesche2514": "; return ( <> {/* Article Schema for tour content */} <ArticleSchema title={`${locationName} 실시간 투어 가이드`} description={`${locationName}의 AI 기반 실시간 투어 가이드입니다. 개인 맞춤형 음성 해설과 경로 안내를 제공합니다.`} url={`/guide/${encodeURIComponent(locationName)}/tour`} locationName={locationName} category=",
      "googleadsense안전한aut2573": "{/* ✅ Google AdSense - 안전한 Auto Ads 전용 초기화 */}",
      "googleadsense안전2598": "} /> {/* ✅ Google AdSense - 안전한 Auto Ads 전용 초기화 */} <script async src=",
      "linkrelalternatehre2607": "} /> <link rel=\"alternate\" hrefLang=\"x-default\" href={process.env.NEXT_PUBLIC_BASE_URL || 'https://navidocent.com'} /> {/* ✅ Google AdSense - 안전한 Auto Ads 전용 초기화 */} <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8225961966676319\" crossOrigin=\"anonymous\" /> {/* ✅ AdSense Auto Ads 초기화 - 중복 방지 */} <Script id=\"google-adsense-auto-ads\" strategy=\"afterInteractive\" > {"
    },
    "title": {
      "ai가이드2510": "AI 가이드",
      "locationname실시간투어가이드t2515": "${locationName} 실시간 투어 가이드 - TripRadio.AI",
      "locationname의ai기반실시간투어2516": "${locationName}의 AI 기반 실시간 투어 가이드입니다. 개인 맞춤형 음성 해설과 경로 안내로 완벽한 ${locationName} 여행을 경험하세요.",
      "locationname의ai기반실시간투어2518": "${locationName}의 AI 기반 실시간 투어 가이드입니다. 개인 맞춤형 음성 해설과 경로 안내를 제공합니다.",
      "혼자여행이심심하다면ai가실시간으로만들어2580": "🎧 혼자 여행이 심심하다면? AI가 실시간으로 만들어주는 나만의 여행 오디오가이드! 무료 다운로드하고 특별한 여행 경험을 시작하세요 ✈️",
      "ai오디오가이드앱추천1위무료여행해설t2594": "AI 오디오가이드 앱 추천 1위 | 무료 여행 해설 TripRadio.AI",
      "혼자여행이심심하다면ai가실시간으로만들어2595": "🎧 혼자 여행이 심심하다면? AI가 실시간으로 만들어주는 나만의 여행 오디오가이드! 무료 다운로드하고 특별한 여행 경험을 시작하세요 ✈️",
      "ai오디오가이드앱추천1위무료여행해2609": ": 'AI 오디오가이드 앱 추천 1위 | 무료 여행 해설 TripRadio.AI",
      "혼자여행이심심하다면ai가실시간으로2610": ": '🎧 혼자 여행이 심심하다면? AI가 실시간으로 만들어주는 나만의 여행 오디오가이드! 무료 다운로드하고 특별한 여행 경험을 시작하세요 ✈️",
      "ai오디오가이드앱추천1위무료여행해2612": ": 'AI 오디오가이드 앱 추천 1위 | 무료 여행 해설 TripRadio.AI",
      "혼자여행이심심하다면ai가실시간으로2613": ": '🎧 혼자 여행이 심심하다면? AI가 실시간으로 만들어주는 나만의 여행 오디오가이드! 무료 다운로드하고 특별한 여행 경험을 시작하세요 ✈️",
      "마이페이지tripradioaiai여행가이드2748": "마이페이지 | TripRadio.AI AI 여행 가이드",
      "tripradioai에서생성한나만의여행가이드를2749": "TripRadio.AI에서 생성한 나만의 여행 가이드를 확인하고 관리하세요. 개인 여행 히스토리와 맞춤형 추천을 받아보세요.",
      "마이페이지2750": "마이페이지",
      "여행히스토리2751": "여행 히스토리",
      "개인가이드2752": "개인 가이드",
      "여행기록2753": "여행 기록",
      "마이페이지tripradioaiai여행가이드2754": "마이페이지 | TripRadio.AI AI 여행 가이드",
      "tripradioai에서생성한나만의여행가이드를2755": "TripRadio.AI에서 생성한 나만의 여행 가이드를 확인하고 관리하세요.",
      "마이페이지tripradioaiai여행가이드2756": "마이페이지 | TripRadio.AI AI 여행 가이드",
      "tripradioai에서생성한나만의여행가이드를2757": "TripRadio.AI에서 생성한 나만의 여행 가이드를 확인하고 관리하세요.",
      "마이페이지tripradioaiai여행2758": ": '마이페이지 | TripRadio.AI AI 여행 가이드",
      "tripradioai에서생성한나만의여행가2759": ": 'TripRadio.AI에서 생성한 나만의 여행 가이드를 확인하고 관리하세요. 개인 여행 히스토리와 맞춤형 추천을 받아보세요.",
      "마이페이지tripradioaiai여행2760": ": '마이페이지 | TripRadio.AI AI 여행 가이드",
      "tripradioai에서생성한나만의여행가2761": ": 'TripRadio.AI에서 생성한 나만의 여행 가이드를 확인하고 관리하세요.",
      "마이페이지tripradioaiai여행2762": ": '마이페이지 | TripRadio.AI AI 여행 가이드",
      "tripradioai에서생성한나만의여행가2763": ": 'TripRadio.AI에서 생성한 나만의 여행 가이드를 확인하고 관리하세요.",
      "개인정보처리방침tripradioaiai여행3579": "개인정보 처리방침 | TripRadio.AI AI 여행 가이드",
      "tripradioai의개인정보처리방침을확인하세요3580": "TripRadio.AI의 개인정보 처리방침을 확인하세요. 사용자의 개인정보 보호와 데이터 처리 방식에 대한 상세한 안내를 제공합니다.",
      "개인정보처리방침3581": "개인정보 처리방침",
      "프라이버시3582": "프라이버시",
      "데이터보호3583": "데이터 보호",
      "개인정보처리방침tripradioaiai여행3585": "개인정보 처리방침 | TripRadio.AI AI 여행 가이드",
      "tripradioai의개인정보처리방침과데이터보3586": "TripRadio.AI의 개인정보 처리방침과 데이터 보호 정책을 확인하세요.",
      "개인정보처리방침tripradioai3587": "개인정보 처리방침 | TripRadio.AI",
      "tripradioai의개인정보처리방침과데이터보3588": "TripRadio.AI의 개인정보 처리방침과 데이터 보호 정책을 확인하세요.",
      "개인정보처리방침tripradioaiai3589": ": '개인정보 처리방침 | TripRadio.AI AI 여행 가이드",
      "tripradioai의개인정보처리방침을확인3590": ": 'TripRadio.AI의 개인정보 처리방침을 확인하세요. 사용자의 개인정보 보호와 데이터 처리 방식에 대한 상세한 안내를 제공합니다.",
      "개인정보처리방침tripradioaiai3591": ": '개인정보 처리방침 | TripRadio.AI AI 여행 가이드",
      "tripradioai의개인정보처리방침과데이3592": ": 'TripRadio.AI의 개인정보 처리방침과 데이터 보호 정책을 확인하세요.",
      "개인정보처리방침tripradioai3593": ": '개인정보 처리방침 | TripRadio.AI",
      "tripradioai의개인정보처리방침과데이3594": ": 'TripRadio.AI의 개인정보 처리방침과 데이터 보호 정책을 확인하세요.",
      "이용약관tripradioaiai여행가이드3601": "이용약관 | TripRadio.AI AI 여행 가이드",
      "tripradioai서비스이용약관을확인하세요3602": "TripRadio.AI 서비스 이용약관을 확인하세요. 서비스 사용 규정과 사용자 권리에 대한 상세한 내용을 제공합니다.",
      "이용약관3603": "이용약관",
      "서비스약관3604": "서비스 약관",
      "사용자규정3605": "사용자 규정",
      "서비스이용3606": "서비스 이용",
      "이용약관tripradioaiai여행가이드3607": "이용약관 | TripRadio.AI AI 여행 가이드",
      "tripradioai서비스이용약관과사용자권리를3608": "TripRadio.AI 서비스 이용약관과 사용자 권리를 확인하세요.",
      "이용약관tripradioai3609": "이용약관 | TripRadio.AI",
      "tripradioai서비스이용약관과사용자권리를3610": "TripRadio.AI 서비스 이용약관과 사용자 권리를 확인하세요.",
      "이용약관tripradioaiai여행가3611": ": '이용약관 | TripRadio.AI AI 여행 가이드",
      "tripradioai서비스이용약관을확인하세3612": ": 'TripRadio.AI 서비스 이용약관을 확인하세요. 서비스 사용 규정과 사용자 권리에 대한 상세한 내용을 제공합니다.",
      "이용약관tripradioaiai여행가3613": ": '이용약관 | TripRadio.AI AI 여행 가이드",
      "tripradioai서비스이용약관과사용자3614": ": 'TripRadio.AI 서비스 이용약관과 사용자 권리를 확인하세요.",
      "이용약관tripradioai3615": ": '이용약관 | TripRadio.AI",
      "tripradioai서비스이용약관과사용자3616": ": 'TripRadio.AI 서비스 이용약관과 사용자 권리를 확인하세요."
    },
    "description": {
      "음성해설2511": "음성 해설",
      "여행가이드2512": "여행 가이드",
      "트립라디오2581": "트립라디오",
      "여행2582": "여행",
      "오디오가이드2583": "오디오가이드",
      "ai가이드2584": "AI가이드",
      "음성가이드2585": "음성가이드",
      "관광2586": "관광",
      "투어2587": "투어",
      "여행가이드2588": "여행가이드",
      "다국어2589": "다국어",
      "한국여행2590": "한국여행",
      "개인정보보호3584": "개인정보보호"
    }
  }
}