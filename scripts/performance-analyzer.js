#!/usr/bin/env node
// performance-analyzer.js
// Core Web Vitals Î∞è ÏÑ±Îä• Î∂ÑÏÑù ÎèÑÍµ¨

const fs = require('fs');
const path = require('path');

/**
 * Core Web Vitals Î∂ÑÏÑù ÎèÑÍµ¨
 */
class PerformanceAnalyzer {
  constructor() {
    this.baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://tripradio.shop';
    this.outputDir = path.join(__dirname, 'performance-reports');
    this.timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    
    // Î∂ÑÏÑùÌï† ÌéòÏù¥ÏßÄ Î™©Î°ù
    this.pages = [
      { url: '/', name: 'homepage', description: 'ÌôàÌéòÏù¥ÏßÄ' },
      { url: '/guide/Í≤ΩÎ≥µÍ∂Å?lang=ko', name: 'guide-gyeongbok', description: 'Í≤ΩÎ≥µÍ∂Å Í∞ÄÏù¥Îìú' },
      { url: '/guide/ÏóêÌé†ÌÉë?lang=ko', name: 'guide-eiffel', description: 'ÏóêÌé†ÌÉë Í∞ÄÏù¥Îìú' },
      { url: '/guide/ÌÉÄÏßÄÎßàÌï†?lang=ko', name: 'guide-tajmahal', description: 'ÌÉÄÏßÄÎßàÌï† Í∞ÄÏù¥Îìú' },
      { url: '/mypage', name: 'mypage', description: 'ÎßàÏù¥ÌéòÏù¥ÏßÄ' }
    ];
    
    this.metrics = {};
  }

  /**
   * ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
   */
  ensureOutputDir() {
    if (!fs.existsSync(this.outputDir)) {
      fs.mkdirSync(this.outputDir, { recursive: true });
    }
  }

  /**
   * Î°úÏª¨ Î∂ÑÏÑù (ÏÑúÎ≤Ñ Ïã§Ìñâ Ïó¨Î∂Ä ÌôïÏù∏)
   */
  async runLocalAnalysis() {
    console.log('üöÄ NaviDocent Î°úÏª¨ ÏÑ±Îä• Î∂ÑÏÑù ÏãúÏûë');
    console.log(`üìÖ Î∂ÑÏÑù ÏãúÍ∞Ñ: ${new Date().toLocaleString()}`);
    console.log(`üåê Í∏∞Ï§Ä URL: ${this.baseUrl}`);
    console.log('');

    this.ensureOutputDir();

    // ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
    try {
      const response = await fetch(`${this.baseUrl}/api/health`);
      if (!response.ok) {
        throw new Error('Server not responding');
      }
      console.log('‚úÖ Î°úÏª¨ ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌôïÏù∏');
    } catch (error) {
      console.error('‚ùå Î°úÏª¨ ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå®:', error.message);
      console.log('üí° Î®ºÏ†Ä ÏÑúÎ≤ÑÎ•º ÏãúÏûëÌïòÏÑ∏Ïöî: npm run dev');
      return;
    }

    // Í∏∞Î≥∏ ÏÑ±Îä• Î©îÌä∏Î¶≠ ÏàòÏßë
    await this.collectBasicMetrics();
    
    // Í≤∞Í≥º Ï†ÄÏû•
    await this.saveResults();
    
    // Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
    this.generateReport();
    
    console.log('‚úÖ Î°úÏª¨ ÏÑ±Îä• Î∂ÑÏÑù ÏôÑÎ£å!');
    console.log(`üìÅ Í≤∞Í≥º ÌååÏùº: ${this.outputDir}/performance-report-${this.timestamp}.json`);
  }

  /**
   * Í∏∞Î≥∏ Î©îÌä∏Î¶≠ ÏàòÏßë
   */
  async collectBasicMetrics() {
    for (const page of this.pages) {
      console.log(`üìÑ Î∂ÑÏÑù Ï§ë: ${page.description} (${page.url})`);
      
      try {
        const startTime = Date.now();
        const targetUrl = `${this.baseUrl}${page.url}`;
        
        const response = await fetch(targetUrl);
        const loadTime = Date.now() - startTime;
        const contentSize = parseInt(response.headers.get('content-length') || '0');
        
        this.metrics[page.name] = {
          ...page,
          metrics: {
            loadTime,
            contentSize,
            status: response.status,
            contentType: response.headers.get('content-type'),
            cacheControl: response.headers.get('cache-control'),
            serverTiming: response.headers.get('server-timing')
          }
        };
        
        console.log(`  ‚úÖ Î°úÎî© ÏãúÍ∞Ñ: ${loadTime}ms, ÌÅ¨Í∏∞: ${(contentSize / 1024).toFixed(1)}KB`);
        
      } catch (error) {
        console.log(`  ‚ùå Î∂ÑÏÑù Ïã§Ìå®: ${error.message}`);
        this.metrics[page.name] = {
          ...page,
          error: error.message
        };
      }
      
      // ÏÑúÎ≤Ñ Î∂ÄÌïò Î∞©ÏßÄ
      await new Promise(resolve => setTimeout(resolve, 100));
    }
  }

  /**
   * Í≤∞Í≥º Ï†ÄÏû•
   */
  async saveResults() {
    const reportData = {
      timestamp: this.timestamp,
      analyzedAt: new Date().toISOString(),
      baseUrl: this.baseUrl,
      summary: this.generateSummary(),
      pages: this.metrics,
      recommendations: this.generateRecommendations()
    };

    const filePath = path.join(this.outputDir, `performance-report-${this.timestamp}.json`);
    fs.writeFileSync(filePath, JSON.stringify(reportData, null, 2));
  }

  /**
   * ÏöîÏïΩ ÏÉùÏÑ±
   */
  generateSummary() {
    const validPages = Object.values(this.metrics).filter(page => page.metrics);
    
    if (validPages.length === 0) {
      return { error: 'No valid metrics collected' };
    }

    const loadTimes = validPages.map(page => page.metrics.loadTime);
    const contentSizes = validPages.map(page => page.metrics.contentSize);

    return {
      totalPages: Object.keys(this.metrics).length,
      validPages: validPages.length,
      averageLoadTime: Math.round(loadTimes.reduce((a, b) => a + b, 0) / loadTimes.length),
      averageContentSize: Math.round(contentSizes.reduce((a, b) => a + b, 0) / contentSizes.length),
      fastestPage: validPages.reduce((fastest, page) => 
        page.metrics.loadTime < fastest.metrics.loadTime ? page : fastest
      ),
      slowestPage: validPages.reduce((slowest, page) => 
        page.metrics.loadTime > slowest.metrics.loadTime ? page : slowest
      ),
      performanceGrade: this.calculateGrade(loadTimes)
    };
  }

  /**
   * ÏÑ±Îä• Îì±Í∏â Í≥ÑÏÇ∞
   */
  calculateGrade(loadTimes) {
    const avgLoadTime = loadTimes.reduce((a, b) => a + b, 0) / loadTimes.length;
    
    if (avgLoadTime < 1000) return 'A';
    if (avgLoadTime < 2000) return 'B';
    if (avgLoadTime < 3000) return 'C';
    if (avgLoadTime < 5000) return 'D';
    return 'F';
  }

  /**
   * Í∂åÏû•ÏÇ¨Ìï≠ ÏÉùÏÑ±
   */
  generateRecommendations() {
    const recommendations = [];
    const summary = this.generateSummary();
    
    if (summary.error) {
      recommendations.push({
        type: 'critical',
        title: 'ÏÑúÎ≤Ñ Ïó∞Í≤∞ Î¨∏Ï†ú',
        description: 'Î°úÏª¨ ÏÑúÎ≤ÑÍ∞Ä Ïã§ÌñâÎêòÏßÄ ÏïäÏïòÍ±∞ÎÇò ÏùëÎãµÌïòÏßÄ ÏïäÏäµÎãàÎã§.',
        action: 'npm run dev Î™ÖÎ†πÏñ¥Î°ú ÏÑúÎ≤ÑÎ•º ÏãúÏûëÌïòÏÑ∏Ïöî.'
      });
      return recommendations;
    }

    if (summary.averageLoadTime > 3000) {
      recommendations.push({
        type: 'critical',
        title: 'ÌéòÏù¥ÏßÄ Î°úÎî© ÏÜçÎèÑ Í∞úÏÑ† ÌïÑÏöî',
        description: `ÌèâÍ∑† Î°úÎî© ÏãúÍ∞ÑÏù¥ ${summary.averageLoadTime}msÎ°ú Îß§Ïö∞ ÎäêÎ¶ΩÎãàÎã§.`,
        action: 'Ïù¥ÎØ∏ÏßÄ ÏµúÏ†ÅÌôî, ÏΩîÎìú Ïä§ÌîåÎ¶¨ÌåÖ, Ï∫êÏã± Ï†ÑÎûµÏùÑ Í≤ÄÌÜ†ÌïòÏÑ∏Ïöî.'
      });
    }

    if (summary.averageContentSize > 1024 * 1024) { // 1MB
      recommendations.push({
        type: 'important',
        title: 'ÏΩòÌÖêÏ∏† ÌÅ¨Í∏∞ ÏµúÏ†ÅÌôî',
        description: `ÌèâÍ∑† ÏΩòÌÖêÏ∏† ÌÅ¨Í∏∞Í∞Ä ${(summary.averageContentSize / 1024 / 1024).toFixed(1)}MBÏûÖÎãàÎã§.`,
        action: 'Ïù¥ÎØ∏ÏßÄ ÏïïÏ∂ï, CSS/JS ÏµúÏ†ÅÌôîÎ•º Ï†ÅÏö©ÌïòÏÑ∏Ïöî.'
      });
    }

    if (summary.averageLoadTime > 1000) {
      recommendations.push({
        type: 'suggested',
        title: 'Core Web Vitals ÏµúÏ†ÅÌôî',
        description: 'Îçî ÎÇòÏùÄ ÏÇ¨Ïö©Ïûê Í≤ΩÌóòÏùÑ ÏúÑÌïú ÏÑ±Îä• ÏµúÏ†ÅÌôîÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.',
        action: 'Next.js Image Ïª¥Ìè¨ÎÑåÌä∏, Ìè∞Ìä∏ ÏµúÏ†ÅÌôî, ÏΩîÎìú Ïä§ÌîåÎ¶¨ÌåÖÏùÑ Ï†ÅÏö©ÌïòÏÑ∏Ïöî.'
      });
    }

    return recommendations;
  }

  /**
   * ÏΩòÏÜî Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
   */
  generateReport() {
    const summary = this.generateSummary();
    
    console.log('\n' + '='.repeat(60));
    console.log('üìä NaviDocent ÏÑ±Îä• Î∂ÑÏÑù Í≤∞Í≥º');
    console.log('='.repeat(60));
    
    console.log(`üìÖ Î∂ÑÏÑù ÏùºÏãú: ${new Date().toLocaleString()}`);
    console.log(`üåê Í∏∞Ï§Ä URL: ${this.baseUrl}`);
    console.log(`üìÑ Î∂ÑÏÑùÎêú ÌéòÏù¥ÏßÄ: ${summary.totalPages}Í∞ú`);
    console.log(`üèÜ ÏÑ±Îä• Îì±Í∏â: ${summary.performanceGrade || 'N/A'}`);
    console.log('');
    
    if (!summary.error) {
      console.log('üìä ÏÑ±Îä• ÏßÄÌëú:');
      console.log(`  ÌèâÍ∑† Î°úÎî© ÏãúÍ∞Ñ: ${summary.averageLoadTime}ms`);
      console.log(`  ÌèâÍ∑† ÏΩòÌÖêÏ∏† ÌÅ¨Í∏∞: ${(summary.averageContentSize / 1024).toFixed(1)}KB`);
      console.log(`  Í∞ÄÏû• Îπ†Î•∏ ÌéòÏù¥ÏßÄ: ${summary.fastestPage.description} (${summary.fastestPage.metrics.loadTime}ms)`);
      console.log(`  Í∞ÄÏû• ÎäêÎ¶∞ ÌéòÏù¥ÏßÄ: ${summary.slowestPage.description} (${summary.slowestPage.metrics.loadTime}ms)`);
      console.log('');
    }
    
    // Í∂åÏû•ÏÇ¨Ìï≠
    const recommendations = this.generateRecommendations();
    if (recommendations.length > 0) {
      console.log('üí° Í∞úÏÑ† Í∂åÏû•ÏÇ¨Ìï≠:');
      recommendations.forEach((rec, i) => {
        const icon = rec.type === 'critical' ? 'üö®' : rec.type === 'important' ? '‚ö†Ô∏è' : 'üí°';
        console.log(`  ${icon} ${rec.title}`);
        console.log(`     ${rec.description}`);
        console.log(`     üëâ ${rec.action}`);
        console.log('');
      });
    }
    
    console.log('üìÅ ÏÉÅÏÑ∏ Í≤∞Í≥ºÎäî JSON ÌååÏùºÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî.');
    console.log('='.repeat(60));
  }
}

// Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
if (require.main === module) {
  const analyzer = new PerformanceAnalyzer();
  analyzer.runLocalAnalysis().catch(error => {
    console.error('‚ùå Î∂ÑÏÑù Ïã§Ìå®:', error);
    process.exit(1);
  });
}

module.exports = PerformanceAnalyzer;
