'use client';

import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { detectPreferredLanguage, setLanguageCookie, getLanguageCookie } from '@/lib/utils';

// 지원 언어 타입
export type SupportedLanguage = 'ko' | 'en' | 'ja' | 'zh' | 'es';

// 언어 설정 인터페이스 (ttsLang 필드 추가)
export interface LanguageConfig {
  code: SupportedLanguage;
  name: string;
  flag: string;
  nativeName: string;
  dir: 'ltr' | 'rtl';
  fontFamily?: string;
  ttsLang: string; // TTS용 언어 코드 추가
}

// 지원 언어 목록 (ttsLang 추가)
export const SUPPORTED_LANGUAGES: LanguageConfig[] = [
  { 
    code: 'ko', 
    name: '한국어', 
    flag: '🇰🇷', 
    nativeName: '한국어',
    dir: 'ltr',
    fontFamily: 'var(--font-noto-sans-kr)',
    ttsLang: 'ko-KR'
  },
  { 
    code: 'en', 
    name: 'English', 
    flag: '🇺🇸', 
    nativeName: 'English',
    dir: 'ltr',
    fontFamily: 'var(--font-inter)',
    ttsLang: 'en-US'
  },
  { 
    code: 'ja', 
    name: '日本語', 
    flag: '🇯🇵', 
    nativeName: '日本語',
    dir: 'ltr',
    fontFamily: 'var(--font-noto-sans-jp)',
    ttsLang: 'ja-JP'
  },
  { 
    code: 'zh', 
    name: '中文', 
    flag: '🇨🇳', 
    nativeName: '中文',
    dir: 'ltr',
    fontFamily: 'var(--font-noto-sans-sc)',
    ttsLang: 'cmn-CN'
  },
  { 
    code: 'es', 
    name: 'Español', 
    flag: '🇪🇸', 
    nativeName: 'Español',
    dir: 'ltr',
    fontFamily: 'var(--font-inter)',
    ttsLang: 'es-ES'
  },
];

// 완전한 번역 데이터 타입
interface Translations {
  header: {
    title: string;
    language: string;
    login: string;
    logout: string;
    history: string;
    profile: string;
    settings: string;
    currentSelectedLanguage: string;
  };
  navigation: {
    home: string;
    guides: string;
    favorites: string;
    about: string;
    contact: string;
  };
  home: {
    brandTitle: string;
    title: string;
    audioGuidePrefix: string;
    subtitle: string;
    subtitle2: string;
    searchPlaceholder: string;
    searchButton: string;
    popularDestinations: string;
    description: string;
    searchPlaceholders?: string[];
    defaultSuggestions?: Array<{ name: string; location: string }>;
    stepTitles: {
      inputLocation: string;
      inputLocationSub: string;
      aiGenerate: string;
      aiGenerateSub: string;
      audioPlay: string;
      audioPlaySub: string;
    };
    stepDescriptions: {
      inputLocation: string;
      aiGenerate: string;
      audioPlay: string;
    };
    regionTitles: {
      popularCountries: string;
      korea: string;
      europe: string;
      asia: string;
      americas: string;
    };
    regionDescription: string;
    countryAttraction: string;
    startGuide: string;
    clickAttraction: string;
    destinations: string;
    scrollHint: string;
    popularBadge: string;
    features: {
      personalized: string;
      realTime: string;
      multiLanguage: string;
      offline: string;
      storyteller: string;
      docent: string;
      personalGuide: string;
      audioCommentary: string;
      tourDocent: string;
      selfTour: string;
    };
    countries: {
      [countryId: string]: {
        name: string;
        attractions: string[];
        description: string;
      };
    };
    landmarks: {
      [landmarkKey: string]: string;
    };
    landmarkSuffix: string;
    accessibility: {
      skipToMain: string;
    };
    pageTitle: string;
  };
  guide: {
    loading: string;
    error: string;
    chapters: string;
    duration: string;
    difficulty: string;
    nextChapter: string;
    previousChapter: string;
    playAudio: string;
    pauseAudio: string;
    mapView: string;
    listView: string;
    essentialInfo: string;
    locationAccess: string;
    keyFeatures: string;
    historicalContext: string;
    mustSeeHighlights: string;
    safetyGuidelines: string;
    realTimeGuideTitle: string;
    overview: string;
    mustSeePoints: string;
    precautions: string;
    viewingOrder: string;
    viewingOrderMap: string;
    tourStartLocation: string;
    audioGuide: string;
    thisPlace: string;
    tourStart: string;
    guideTitle: string;
    loadingGuide: string;
    fetchingGuideData: string;
    currentChapter: string;
    nextMoveGuide: string;
    autoGeneratedIntro: string;
    intro: string;
    aiCustomAudioGuide: string;
    recommendedStartPoint: string;
    accurateIntroLocation: string;
    regionTouristMap: string;
    regionOverview: string;
    recommendedSpots: string;
    noTouristSpotsAvailable: string;
  };
  search: {
    placeholder: string;
    searching: string;
    noResults: string;
    tryAgain: string;
    suggestions: string;
    recentSearches: string;
    pressEnterToSearch: string;
  };
  errors: {
    networkError: string;
    serverError: string;
    notFound: string;
    unauthorized: string;
    forbidden: string;
    generalError: string;
  };
  common: {
    loading: string;
    error: string;
    success: string;
    warning: string;
    info: string;
    cancel: string;
    confirm: string;
    save: string;
    delete: string;
    edit: string;
    close: string;
    hide: string;
    exists: string;
    notExists: string;
    confirmDelete: string;
    daysAgo: string;
    weeksAgo: string;
    languagesGenerated: string;
    total: string;
    none: string;
    sortLatest: string;
    sortName: string;
    sortChapters: string;
    allLanguages: string;
    chapters: string;
    completed: string;
    processing: string;
    minutes: string;
  };
  history: {
    noResults: string;
    noHistory: string;
    view: string;
    delete: string;
    today: string;
    yesterday: string;
    invalidDate: string;
    preview: string;
    loadFailed: string;
    deleteFailed: string;
    searchInHistory: string;
    searchPlaces: string;
    totalGuides: string;
    daysAgo: string;
    weeksAgo: string;
  };
  date: {
    today: string;
    yesterday: string;
    tomorrow: string;
    thisWeek: string;
    lastWeek: string;
    thisMonth: string;
    lastMonth: string;
  };
  profile: {
    name: string;
    email: string;
    preferences: string;
    language: string;
    notifications: string;
    privacy: string;
    account: string;
    logout: string;
    mypage: string;
  };
  mypage: {
    title: string;
    overview: string;
    overviewShort: string;
    guides: string;
    guidesShort: string;
    settings: string;
    settingsShort: string;
    recentGuides: string;
    favoriteGuides: string;
    favoritesShort: string;
    fileGuides: string;
    filesShort: string;
    totalGuides: string;
    completedTours: string;
    savedLocations: string;
    primaryLanguage: string;
    frequentPlaces: string;
    personalizedDiagnosis: string;
    diagnosisComplete: string;
    diagnosisResult: string;
    reliability: string;
    diagnosed: string;
    contentDepth: string;
    guideStyle: string;
    interaction: string;
    emotionalTone: string;
    aiSimulationInfo: string;
    accuracy: string;
    personalizedGuideProvided: string;
    timeRequired: string;
    countriesVerification: string;
    retakeDiagnosis: string;
    startDiagnosis: string;
    personalizedGuideActive: string;
    noFavoriteGuides: string;
    addFavoriteGuides: string;
    createGuideFromFile: string;
    uploadFileDescription: string;
    supportedFormats: string;
    noUploadedFiles: string;
    uploadFirstFile: string;
    personalityTraits: {
      openness: string;
      conscientiousness: string;
      extraversion: string;
      agreeableness: string;
      neuroticism: string;
    };
    contentDepthLevels: {
      veryDetailed: string;
      detailed: string;
      moderate: string;
      simple: string;
    };
    guideStyles: {
      storytelling: string;
      academic: string;
      conversational: string;
      practical: string;
    };
    interactionLevels: {
      veryActive: string;
      active: string;
      moderate: string;
      passive: string;
    };
    emotionalTones: {
      enthusiastic: string;
      friendly: string;
      professional: string;
      calm: string;
    };
  };
  auth: {
    login: string;
    register: string;
    email: string;
    password: string;
    confirmPassword: string;
    forgotPassword: string;
    rememberMe: string;
    loginWithGoogle: string;
    loginWithFacebook: string;
    createAccount: string;
    alreadyHaveAccount: string;
    noAccount: string;
    signin: string;
    signout: string;
    welcomeTitle: string;
    joinTitle: string;
    exploreWithAI: string;
    emailVerification: string;
    enterCode: string;
    signupComplete: string;
    startYourJourney: string;
    enterYourEmail: string;
    enterYourPassword: string;
    enterYourName: string;
    passwordMinLength: string;
    confirmYourPassword: string;
    name: string;
    verifyEmail: string;
    orContinueWith: string;
    registerWithGoogle: string;
    signup: string;
    termsAndConditions: string;
    privacyPolicy: string;
    secureConnection: string;
    unknownError: string;
  };
  buttons: {
    submit: string;
    continue: string;
    goBack: string;
    tryAgain: string;
    viewDetails: string;
  };
  languages: {
    ko: string;
    en: string;
    ja: string;
    zh: string;
    es: string;
  };
  audio: {
    chapter: string;
  };
  footer: {
    companyName: string;
    companyDescription: string;
    copyright: string;
    legalInfo: string;
    privacyPolicy: string;
    termsOfService: string;
    aboutUs: string;
    contact: string;
    support: string;
    telegramChannel: string;
    supportHours: string;
    adsenseNotice: string;
    adsensePolicy: string;
  };
  aiTravel: {
    title: string;
    subtitle: string;
    description: string;
  };
  audioGuide: {
    title: string;
    subtitle: string;
    description: string;
  };
  filmLocations: {
    title: string;
    subtitle: string;
    description: string;
  };
  docent: {
    title: string;
    subtitle: string;
    description: string;
  };
  legal: {
    terms: {
      title: string;
      description: string;
      content: string;
      lastUpdated: string;
    };
    privacy: {
      title: string;
      description: string;
      content: string;
      lastUpdated: string;
    };
  };
  tripPlanner: {
    keyword: string;
    badge: string;
    hero: {
      title: string;
      subtitle: string;
      description: string;
    };
    quickPlanner: {
      title: string;
    };
    steps: {
      selectStyle: string;
      destinationDuration: string;
      budgetPreferences: string;
    };
    form: {
      destination: {
        label: string;
        placeholder: string;
      };
      departure: string;
      duration: string;
      budget: string;
      interests: string;
      generateButton: string;
      analyzing: string;
      completionTime: string;
    };
  };
  tripTypes: {
    solo: {
      name: string;
      description: string;
      features: {
        safety: string;
        culture: string;
        budget: string;
      };
    };
    couple: {
      name: string;
      description: string;
      features: {
        romantic: string;
        activities: string;
        photos: string;
      };
    };
    family: {
      name: string;
      description: string;
      features: {
        kidFriendly: string;
        safety: string;
        educational: string;
      };
    };
    friends: {
      name: string;
      description: string;
      features: {
        activities: string;
        instagramSpots: string;
        nightlife: string;
      };
    };
    nomad: {
      name: string;
      description: string;
      features: {
        wifi: string;
        coworking: string;
        longTerm: string;
      };
    };
  };
}

// 기본 번역 데이터 (한국어)
const DEFAULT_TRANSLATIONS: Translations = {
  header: {
    title: 'AI 가이드',
    language: '언어',
    login: '로그인',
    logout: '로그아웃',
    history: '히스토리',
    profile: '프로필',
    settings: '설정',
    currentSelectedLanguage: '현재 선택된 언어'
  },
  navigation: {
    home: '홈',
    guides: '가이드',
    favorites: '즐겨찾기',
    about: '소개',
    contact: '연락처'
  },
  home: {
    brandTitle: 'AI 여행 가이드',
    title: 'AI와 함께하는 스마트 여행',
    audioGuidePrefix: '앞에서 만드는 오디오 가이드',
    subtitle: '개인 맞춤형 가이드로 새로운 여행을 경험하세요',
    subtitle2: '어디든 검색하고 즉시 전문 가이드를 만나보세요',
    searchPlaceholder: '어디 장소 앞에 계신가요?',
    searchButton: '검색',
    popularDestinations: '인기 여행지',
    description: 'AI 기술로 생성되는 개인화된 여행 가이드',
    searchPlaceholders: [
      '에펠탑',
      '타지마할',
      '마추픽추',
      '콜로세움',
      '자유의 여신상'
    ],
    defaultSuggestions: [
      { name: '경복궁', location: '서울 종로구' },
      { name: '부산 해운대', location: '부산 해운대구' },
      { name: '제주도 성산일출봉', location: '제주 서귀포시' }
    ],
    stepTitles: {
      inputLocation: '장소 입력',
      inputLocationSub: '(특정 장소)',
      aiGenerate: '검색 클릭',
      aiGenerateSub: '(가이드 생성)',
      audioPlay: '재생버튼 누르면',
      audioPlaySub: '(투어시작!)'
    },
    stepDescriptions: {
      inputLocation: '궁금한 곳의 이름을 입력하세요',
      aiGenerate: 'AI가 맞춤형 가이드를 생성합니다',
      audioPlay: '생성된 가이드를 음성으로 들어보세요'
    },
    regionTitles: {
      popularCountries: '인기 여행 국가',
      korea: '한국',
      europe: '유럽',
      asia: '아시아',
      americas: '아메리카'
    },
    regionDescription: '다양한 지역의 인기 여행지를 둘러보세요',
    countryAttraction: 'TOP ATTRACTIONS',
    startGuide: 'Start Guide',
    clickAttraction: '명소를 클릭하세요',
    destinations: 'destinations',
    scrollHint: '좌우로 스크롤하여 더 많은 국가를 확인하세요',
    popularBadge: 'POPULAR',
    features: {
      personalized: '맞춤형추천',
      realTime: '실시간가이드',
      multiLanguage: '다국어지원',
      offline: '오프라인사용',
      storyteller: '스토리텔러',
      docent: '도슨트',
      personalGuide: '개인가이드',
      audioCommentary: '오디오해설',
      tourDocent: '투어도슨트',
      selfTour: '셀프투어'
    },
    countries: {
      seoul: {
        name: '서울',
        attractions: ['경복궁', '남산타워', '명동'],
        description: '전통과 현대가 어우러진 대한민국의 수도'
      },
      busan: {
        name: '부산',
        attractions: ['해운대해수욕장', '감천문화마을', '자갈치시장'],
        description: '아름다운 바다와 항구의 도시'
      },
      jeju: {
        name: '제주',
        attractions: ['한라산', '성산일출봉', '중문관광단지'],
        description: '환상적인 자연경관의 섬'
      },
      gyeongju: {
        name: '경주',
        attractions: ['불국사', '석굴암', '첨성대'],
        description: '천년고도 신라의 역사가 살아있는 도시'
      },
      france: {
        name: '프랑스',
        attractions: ['에펠탑', '루브르 박물관', '베르사유 궁전'],
        description: '로맨틱한 파리와 화려한 문화유산'
      },
      italy: {
        name: '이탈리아',
        attractions: ['콜로세움', '피사의 사탑', '바티칸'],
        description: '고대 로마의 영광과 르네상스 예술'
      },
      spain: {
        name: '스페인',
        attractions: ['사그라다 파밀리아', '알함브라 궁전', '구엘 공원'],
        description: '가우디의 건축과 플라멩코의 열정'
      },
      uk: {
        name: '영국',
        attractions: ['빅벤', '타워 브리지', '버킹엄 궁전'],
        description: '전통과 현대가 조화로운 대영제국'
      },
      germany: {
        name: '독일',
        attractions: ['브란덴부르크 문', '노이슈반슈타인성', '쾰른 대성당'],
        description: '동화 속 성과 깊은 역사의 나라'
      },
      japan: {
        name: '일본',
        attractions: ['후지산', '기요미즈데라', '센소지'],
        description: '전통과 첨단이 공존하는 신비로운 나라'
      },
      china: {
        name: '중국',
        attractions: ['만리장성', '자금성', '천안문 광장'],
        description: '5천년 역사를 간직한 거대한 문명'
      },
      india: {
        name: '인도',
        attractions: ['타지마할', '붉은 요새', '갠지스 강'],
        description: '신비로운 영성과 화려한 궁전들'
      },
      thailand: {
        name: '태국',
        attractions: ['왓 아룬', '방콕 대왕궁', '왓 포'],
        description: '황금빛 사원과 미소의 나라'
      },
      singapore: {
        name: '싱가포르',
        attractions: ['마리나 베이 샌즈', '가든스 바이 더 베이', '머라이언'],
        description: '미래도시와 다양한 문화의 만남'
      },
      usa: {
        name: '미국',
        attractions: ['자유의 여신상', '그랜드 캐니언', '타임스퀘어'],
        description: '자유와 꿈의 땅, 무한한 가능성'
      },
      canada: {
        name: '캐나다',
        attractions: ['나이아가라 폭포', 'CN 타워', '밴프 국립공원'],
        description: '광활한 자연과 깨끗한 도시'
      },
      brazil: {
        name: '브라질',
        attractions: ['리우 예수상', '이과수 폭포', '마라카낭 스타디움'],
        description: '삼바와 축구, 열정적인 남미'
      },
      peru: {
        name: '페루',
        attractions: ['마추픽추', '쿠스코', '나스카 라인'],
        description: '잉카 문명의 신비로운 유적들'
      },
      mexico: {
        name: '멕시코',
        attractions: ['치첸이트사', '테오티우아칸', '칸쿤'],
        description: '마야 문명과 카리브해의 낙원'
      }
    },
    landmarks: {
      '에펠탑': '에펠탑',
      '콜로세움': '콜로세움', 
      '타지마할': '타지마할',
      '자유의 여신상': '자유의 여신상',
      '경복궁': '경복궁',
      '마추픽추': '마추픽추',
      '사그라다 파밀리아': '사그라다 파밀리아'
    },
    landmarkSuffix: '',
    accessibility: {
      skipToMain: '메인 콘텐츠로 건너뛰기'
    },
    pageTitle: 'TripRadio.AI - AI 오디오가이드 여행 서비스'
  },
  guide: {
    loading: '가이드 로딩 중...',
    error: '가이드를 불러올 수 없습니다',
    chapters: '챕터',
    duration: '소요시간',
    difficulty: '난이도',
    nextChapter: '다음 챕터',
    previousChapter: '이전 챕터',
    playAudio: '오디오 재생',
    pauseAudio: '오디오 일시정지',
    mapView: '지도 보기',
    listView: '목록 보기',
    essentialInfo: '필수 정보',
    locationAccess: '위치 및 접근',
    keyFeatures: '주요 특징', 
    historicalContext: '역사적 배경',
    mustSeeHighlights: '필수 관람 포인트',
    safetyGuidelines: '안전 수칙',
    realTimeGuideTitle: '실시간 가이드',
    overview: '개요',
    mustSeePoints: '필수포인트',
    precautions: '주의사항',
    viewingOrder: '관람순서',
    viewingOrderMap: '관람지도',
    tourStartLocation: '투어 시작 위치',
    audioGuide: '오디오 가이드',
    thisPlace: '이곳',
    tourStart: '투어 시작',
    guideTitle: '가이드',
    loadingGuide: '가이드 로딩 중',
    fetchingGuideData: '가이드 데이터를 가져오는 중',
    currentChapter: '현재 챕터',
    nextMoveGuide: '다음 이동 안내',
    autoGeneratedIntro: '자동 생성된 인트로',
    intro: '인트로',
    aiCustomAudioGuide: 'AI 맞춤형 오디오 가이드',
    recommendedStartPoint: '관람지도',
    accurateIntroLocation: '정확한 인트로 위치',
    regionTouristMap: '지역 관광지 지도',
    regionOverview: '지역 개요',
    recommendedSpots: '추천 장소',
    noTouristSpotsAvailable: '관광지 정보를 불러오는 중입니다'
  },
  search: {
    placeholder: '검색어를 입력하세요',
    searching: '검색 중...',
    noResults: '검색 결과가 없습니다',
    tryAgain: '다시 시도',
    suggestions: '추천 검색어',
    recentSearches: '최근 검색',
    pressEnterToSearch: 'Enter키를 눌러 검색하세요'
  },
  errors: {
    networkError: '네트워크 오류가 발생했습니다',
    serverError: '서버 오류가 발생했습니다',
    notFound: '페이지를 찾을 수 없습니다',
    unauthorized: '인증이 필요합니다',
    forbidden: '접근 권한이 없습니다',
    generalError: '오류가 발생했습니다'
  },
  common: {
    loading: '로딩 중...',
    error: '오류',
    success: '성공',
    warning: '경고',
    info: '정보',
    cancel: '취소',
    confirm: '확인',
    save: '저장',
    delete: '삭제',
    edit: '편집',
    close: '닫기',
    hide: '숨기기',
    exists: '있음',
    notExists: '없음',
    confirmDelete: '정말 삭제하시겠습니까?',
    daysAgo: '일 전',
    weeksAgo: '주 전',
    languagesGenerated: '개 언어로 생성',
    total: '총',
    none: '없음',
    sortLatest: '최신순',
    sortName: '이름순',
    sortChapters: '챕터순',
    allLanguages: '모든 언어',
    chapters: '개 챕터',
    completed: '완료',
    processing: '처리중',
    minutes: '분'
  },
  history: {
    noResults: '검색 결과가 없습니다',
    noHistory: '검색 기록이 없습니다',
    view: '가이드 보기',
    delete: '삭제',
    today: '오늘',
    yesterday: '어제',
    invalidDate: '잘못된 날짜',
    preview: '가이드 미리보기',
    loadFailed: '히스토리 로드 실패',
    deleteFailed: '히스토리 삭제 실패',
    searchInHistory: '검색 기록에서 찾기',
    searchPlaces: '장소를 검색해보세요',
    totalGuides: '총 {count}개의 가이드',
    daysAgo: '{days}일 전',
    weeksAgo: '{weeks}주 전'
  },
  date: {
    today: '오늘',
    yesterday: '어제',
    tomorrow: '내일',
    thisWeek: '이번 주',
    lastWeek: '지난 주',
    thisMonth: '이번 달',
    lastMonth: '지난 달'
  },
  profile: {
    name: '이름',
    email: '이메일',
    preferences: '설정',
    language: '언어',
    notifications: '알림',
    privacy: '개인정보',
    account: '계정',
    logout: '로그아웃',
    mypage: '마이페이지'
  },
  mypage: {
    title: '마이페이지',
    overview: '개요',
    overviewShort: '개요',
    guides: '내 가이드',
    guidesShort: '가이드',
    settings: '설정',
    settingsShort: '설정',
    recentGuides: '최근 가이드',
    favoriteGuides: '즐겨찾기 가이드',
    favoritesShort: '즐겨찾기',
    fileGuides: '파일 가이드',
    filesShort: '파일',
    totalGuides: '전체 가이드',
    completedTours: '완료된 투어',
    savedLocations: '저장된 장소',
    primaryLanguage: '주 사용 언어',
    frequentPlaces: '자주 방문하는 장소들',
    personalizedDiagnosis: '개인화 가이드 맞춤 진단',
    diagnosisComplete: '진단 완료! 당신의 주도적 성격은',
    diagnosisResult: '입니다',
    reliability: '신뢰도',
    diagnosed: '진단',
    contentDepth: '콘텐츠 깊이',
    guideStyle: '가이드 스타일',
    interaction: '상호작용',
    emotionalTone: '감정적 어조',
    aiSimulationInfo: '100만명 AI 시뮬레이션으로 검증된 5문항 진단으로',
    accuracy: '정확도',
    personalizedGuideProvided: '의 개인화 가이드를 제공합니다',
    timeRequired: '소요시간',
    countriesVerification: '개국 문화적 공정성 검증',
    retakeDiagnosis: '다시 진단하기',
    startDiagnosis: '진단 시작하기',
    personalizedGuideActive: '이제 모든 가이드가 당신의 성격에 맞게 자동으로 개인화됩니다!',
    noFavoriteGuides: '즐겨찾기한 가이드가 없습니다',
    addFavoriteGuides: '마음에 드는 가이드를 즐겨찾기로 추가해보세요!',
    createGuideFromFile: '파일에서 가이드 생성',
    uploadFileDescription: 'PDF, Word, 텍스트 파일을 업로드하여 가이드를 생성할 수 있습니다',
    supportedFormats: '지원 형식: PDF, DOCX, TXT (최대 10MB)',
    noUploadedFiles: '업로드된 파일이 없습니다',
    uploadFirstFile: '첫 번째 파일을 업로드해보세요!',
    personalityTraits: {
      openness: '개방성',
      conscientiousness: '성실성',
      extraversion: '외향성',
      agreeableness: '친화성',
      neuroticism: '신경성'
    },
    contentDepthLevels: {
      veryDetailed: '매우 상세',
      detailed: '상세',
      moderate: '보통',
      simple: '간단'
    },
    guideStyles: {
      storytelling: '스토리텔링',
      academic: '학술적',
      conversational: '대화형',
      practical: '실용적'
    },
    interactionLevels: {
      veryActive: '매우 활발',
      active: '활발',
      moderate: '보통',
      passive: '수동적'
    },
    emotionalTones: {
      enthusiastic: '열정적',
      friendly: '친근한',
      professional: '전문적',
      calm: '차분한'
    }
  },
  auth: {
    login: '로그인',
    register: '회원가입',
    email: '이메일',
    password: '비밀번호',
    confirmPassword: '비밀번호 확인',
    forgotPassword: '비밀번호 찾기',
    rememberMe: '로그인 상태 유지',
    loginWithGoogle: 'Google로 로그인',
    loginWithFacebook: 'Facebook으로 로그인',
    createAccount: '계정 만들기',
    alreadyHaveAccount: '이미 계정이 있으신가요?',
    noAccount: '계정이 없으신가요?',
    signin: '로그인',
    signout: '로그아웃',
    welcomeTitle: '트립라디오에 오신 것을 환영합니다',
    joinTitle: 'AI 가이드와 함께 시작하세요',
    exploreWithAI: 'AI와 함께 세계를 탐험하세요',
    emailVerification: '이메일 인증',
    enterCode: '인증 코드를 입력하세요',
    signupComplete: '회원가입 완료',
    startYourJourney: '이제 AI 가이드와 함께 여행을 시작하세요',
    enterYourEmail: '이메일을 입력하세요',
    enterYourPassword: '비밀번호를 입력하세요',
    enterYourName: '이름을 입력하세요',
    passwordMinLength: '8자 이상의 비밀번호를 입력하세요',
    confirmYourPassword: '비밀번호를 다시 입력하세요',
    name: '이름',
    verifyEmail: '이메일 인증',
    orContinueWith: '또는 다음으로 계속하기',
    registerWithGoogle: 'Google로 회원가입',
    signup: '회원가입',
    termsAndConditions: '이용약관',
    privacyPolicy: '개인정보 처리방침',
    secureConnection: '256-bit SSL 보안 연결로 보호됩니다',
    unknownError: '알 수 없는 오류가 발생했습니다'
  },
  buttons: {
    submit: '제출',
    continue: '계속',
    goBack: '돌아가기',
    tryAgain: '다시 시도',
    viewDetails: '자세히 보기'
  },
  languages: {
    ko: '한국어',
    en: 'English',
    ja: '日本語',
    zh: '中文',
    es: 'Español'
  },
  audio: {
    chapter: '챕터'
  },
  footer: {
    companyName: 'TripRadio',
    companyDescription: 'AI 기반 개인 맞춤형 여행 도슨트 서비스',
    copyright: '© 2024 TripRadio. All rights reserved.',
    legalInfo: '법적 정보',
    privacyPolicy: '개인정보 처리방침',
    termsOfService: '이용약관',
    aboutUs: '서비스 소개',
    contact: '문의하기',
    support: '고객지원',
    telegramChannel: '텔레그램 채널',
    supportHours: '지원시간: 평일 9시-18시',
    adsenseNotice: '광고 수익 공지',
    adsensePolicy: 'AdSense 정책'
  },
  aiTravel: {
    title: 'AI 여행',
    subtitle: 'AI가 계획하는 맞춤 여행',
    description: 'AI 기술로 당신만의 특별한 여행을 계획하세요'
  },
  audioGuide: {
    title: '오디오 가이드',
    subtitle: '음성으로 듣는 여행 가이드',
    description: '전문 해설로 더욱 생생한 여행을 경험하세요'
  },
  filmLocations: {
    title: '영화 촬영지',
    subtitle: '영화 속 그 장소들',
    description: '좋아하는 영화의 촬영지를 찾아 떠나보세요'
  },
  docent: {
    title: '도슨트',
    subtitle: '전문가의 문화 해설',
    description: '전문 도슨트와 함께하는 깊이 있는 문화 체험'
  },
  legal: {
    terms: {
      title: '이용약관',
      description: 'TripRadio 서비스 이용약관',
      content: '서비스 이용에 관한 약관 내용',
      lastUpdated: '최종 업데이트'
    },
    privacy: {
      title: '개인정보 처리방침',
      description: 'TripRadio 개인정보 처리방침',
      content: '개인정보 처리에 관한 방침 내용',
      lastUpdated: '최종 업데이트'
    }
  },
  tripPlanner: {
    keyword: 'AI 여행 계획',
    badge: 'Smart Trip Planner',
    hero: {
      title: 'AI가 만드는 여행 계획',
      subtitle: '완벽한 여행 계획',
      description: '당신의 취향에 맞춘 완벽한 여행 계획'
    },
    quickPlanner: {
      title: '빠른 여행 계획'
    },
    steps: {
      selectStyle: '여행 스타일 선택',
      destinationDuration: '목적지와 기간',
      budgetPreferences: '예산과 선호사항'
    },
    form: {
      destination: {
        label: '목적지',
        placeholder: '어디로 가실 건가요?'
      },
      departure: '출발일',
      duration: '기간',
      budget: '예산',
      interests: '관심사',
      generateButton: '계획 생성',
      analyzing: '분석 중...',
      completionTime: '완성 시간'
    }
  },
  tripTypes: {
    solo: {
      name: '자유여행',
      description: '혼자만의 특별한 시간',
      features: {
        safety: '안전 정보 제공',
        culture: '현지 문화 체험',
        budget: '합리적 예산 관리'
      }
    },
    couple: {
      name: '연인여행',
      description: '로맨틱한 추억 만들기',
      features: {
        romantic: '로맨틱 스팟',
        activities: '커플 액티비티',
        photos: '인생샷 포토존'
      }
    },
    family: {
      name: '가족여행',
      description: '온 가족이 함께',
      features: {
        kidFriendly: '아이 친화적',
        safety: '가족 안전 보장',
        educational: '교육적 체험'
      }
    },
    friends: {
      name: '친구여행',
      description: '친구들과의 즐거운 시간',
      features: {
        activities: '그룹 액티비티',
        instagramSpots: '인스타 스팟',
        nightlife: '나이트라이프'
      }
    },
    nomad: {
      name: '워케이션',
      description: '일과 휴가의 완벽한 조화',
      features: {
        wifi: '안정적 와이파이',
        coworking: '코워킹 스페이스',
        longTerm: '장기 체류 지원'
      }
    }
  }
};

// Context 타입
interface LanguageContextType {
  currentLanguage: SupportedLanguage;
  currentConfig: LanguageConfig;
  setLanguage: (language: SupportedLanguage) => void;
  t: (key: string, params?: Record<string, string>) => string | string[];
  translations: Translations;
  isLoading: boolean;
  isRTL: boolean;
  detectBrowserLanguage: () => SupportedLanguage;
}

// Context 생성
const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

// 브라우저 언어 감지 함수
const detectBrowserLanguage = (): SupportedLanguage => {
  if (typeof window === 'undefined') return 'ko';
  
  const browserLang = navigator.language.toLowerCase();
  const langCode = browserLang.split('-')[0];
  
  const supportedCodes = SUPPORTED_LANGUAGES.map(lang => lang?.code).filter(Boolean);
  return supportedCodes.includes(langCode as SupportedLanguage) 
    ? langCode as SupportedLanguage 
    : 'ko';
};

// 번역 데이터 로드 함수
async function loadTranslations(language: SupportedLanguage): Promise<Translations> {
  try {
    // 🔥 캐시 무효화를 위한 버전 관리
    const TRANSLATION_VERSION = '1.0.3'; // 버전 업데이트로 캐시 무효화 (tripTypes 구조 수정)
    const cacheKey = `translations-${language}-v${TRANSLATION_VERSION}`;
    
    // 🔥 기존 캐시 정리 (버전이 다른 경우)
    if (typeof window !== 'undefined') {
      // 이전 버전 캐시들 정리
      const keysToRemove: string[] = [];
      for (let i = 0; i < sessionStorage.length; i++) {
        const key = sessionStorage.key(i);
        if (key && key.startsWith(`translations-${language}-`) && key !== cacheKey) {
          keysToRemove.push(key);
        }
      }
      keysToRemove.forEach(key => sessionStorage.removeItem(key));
      
      // 새 버전 캐시 확인
      const cached = sessionStorage.getItem(cacheKey);
      if (cached) {
        try {
          const parsedCache = JSON.parse(cached);
          console.log(`✅ 캐시에서 ${language} 번역 로드 (v${TRANSLATION_VERSION})`);
          return parsedCache;
        } catch (parseError) {
          console.warn('캐시 파싱 오류, 새로 로드:', parseError);
          sessionStorage.removeItem(cacheKey);
        }
      }
    }

    // 🔥 번역 파일 강제 새로고침 (no-cache)
    const response = await fetch(`/locales/translations.json?v=${TRANSLATION_VERSION}`, {
      cache: 'no-cache',
      headers: {
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache'
      }
    });
    
    if (!response.ok) {
      console.warn('번역 파일 로드 실패, 기본값 사용');
      return DEFAULT_TRANSLATIONS;
    }
    
    const allTranslations = await response.json();
    const translations = allTranslations[language] || allTranslations['ko'];
    
    // 안전성 보장 (모든 새로운 필드들 포함)
    const safeTranslations: Translations = {
      ...DEFAULT_TRANSLATIONS,
      ...translations,
      header: {
        ...DEFAULT_TRANSLATIONS.header,
        ...(translations?.header || {})
      },
      navigation: {
        ...DEFAULT_TRANSLATIONS.navigation,
        ...(translations?.navigation || {})
      },
      home: {
        ...DEFAULT_TRANSLATIONS.home,
        ...(translations?.home || {}),
        stepTitles: {
          ...DEFAULT_TRANSLATIONS.home.stepTitles,
          ...(translations?.home?.stepTitles || {})
        },
        stepDescriptions: {
          ...DEFAULT_TRANSLATIONS.home.stepDescriptions,
          ...(translations?.home?.stepDescriptions || {})
        },
        regionTitles: {
          ...DEFAULT_TRANSLATIONS.home.regionTitles,
          ...(translations?.home?.regionTitles || {})
        },
        features: {
          ...DEFAULT_TRANSLATIONS.home.features,
          ...(translations?.home?.features || {})
        },
        countries: {
          ...DEFAULT_TRANSLATIONS.home.countries,
          ...(translations?.home?.countries || {})
        }
      },
      guide: {
        ...DEFAULT_TRANSLATIONS.guide,
        ...(translations?.guide || {})
      },
      search: {
        ...DEFAULT_TRANSLATIONS.search,
        ...(translations?.search || {})
      },
      errors: {
        ...DEFAULT_TRANSLATIONS.errors,
        ...(translations?.errors || {})
      },
      common: {
        ...DEFAULT_TRANSLATIONS.common,
        ...(translations?.common || {})
      },
      date: {
        ...DEFAULT_TRANSLATIONS.date,
        ...(translations?.date || {})
      },
      profile: {
        ...DEFAULT_TRANSLATIONS.profile,
        ...(translations?.profile || {})
      },
      mypage: {
        ...DEFAULT_TRANSLATIONS.mypage,
        ...(translations?.mypage || {})
      },
      auth: {
        ...DEFAULT_TRANSLATIONS.auth,
        ...(translations?.auth || {})
      },
      buttons: {
        ...DEFAULT_TRANSLATIONS.buttons,
        ...(translations?.buttons || {})
      },
      languages: {
        ...DEFAULT_TRANSLATIONS.languages,
        ...(translations?.languages || {})
      },
      audio: {
        ...DEFAULT_TRANSLATIONS.audio,
        ...(translations?.audio || {})
      },
      history: {
        ...DEFAULT_TRANSLATIONS.history,
        ...(translations?.history || {})
      },
      footer: {
        ...DEFAULT_TRANSLATIONS.footer,
        ...(translations?.footer || {})
      },
      aiTravel: {
        ...DEFAULT_TRANSLATIONS.aiTravel,
        ...(translations?.aiTravel || {})
      },
      audioGuide: {
        ...DEFAULT_TRANSLATIONS.audioGuide,
        ...(translations?.audioGuide || {})
      },
      filmLocations: {
        ...DEFAULT_TRANSLATIONS.filmLocations,
        ...(translations?.filmLocations || {})
      },
      docent: {
        ...DEFAULT_TRANSLATIONS.docent,
        ...(translations?.docent || {})
      },
      legal: {
        ...DEFAULT_TRANSLATIONS.legal,
        ...(translations?.legal || {}),
        terms: {
          ...DEFAULT_TRANSLATIONS.legal.terms,
          ...(translations?.legal?.terms || {})
        },
        privacy: {
          ...DEFAULT_TRANSLATIONS.legal.privacy,
          ...(translations?.legal?.privacy || {})
        }
      },
      // 🔥 tripPlanner 필드 추가
      tripPlanner: {
        ...DEFAULT_TRANSLATIONS.tripPlanner,
        ...(translations?.tripPlanner || {})
      },
      // 🔥 tripTypes 필드 추가
      tripTypes: {
        ...DEFAULT_TRANSLATIONS.tripTypes,
        ...(translations?.tripTypes || {})
      }
    };
    
    // 🔥 새 버전으로 세션 스토리지에 캐시 저장
    if (typeof window !== 'undefined') {
      try {
        sessionStorage.setItem(cacheKey, JSON.stringify(safeTranslations));
        console.log(`💾 ${language} 번역 캐시 저장 (v${TRANSLATION_VERSION})`);
      } catch (storageError) {
        console.warn('세션 스토리지 저장 실패:', storageError);
      }
    }
    
    console.log(`✅ ${language} 번역 파일 로드 완료 (v${TRANSLATION_VERSION})`);
    return safeTranslations;
    
  } catch (error) {
    console.error(`${language} 번역 로드 오류:`, error);
    return DEFAULT_TRANSLATIONS;
  }
}

// Provider 컴포넌트
export function LanguageProvider({ children }: { children: React.ReactNode }) {
  const [currentLanguage, setCurrentLanguage] = useState<SupportedLanguage>('ko');
  const [translations, setTranslations] = useState<Translations>(DEFAULT_TRANSLATIONS);
  const [isLoading, setIsLoading] = useState(false);

  // 현재 언어 설정 가져오기 (안전한 접근)
  const currentConfig = SUPPORTED_LANGUAGES.find(lang => lang?.code === currentLanguage) || SUPPORTED_LANGUAGES[0] || {
    code: 'ko',
    name: '한국어',
    flag: '🇰🇷',
    nativeName: '한국어',
    dir: 'ltr',
    fontFamily: 'var(--font-noto-sans-kr)',
    ttsLang: 'ko-KR'
  };
  const isRTL = currentConfig?.dir === 'rtl';

  // 🔥 개선된 언어 변경 함수 (쿠키 + localStorage 동기화)
  const setLanguage = useCallback(async (language: SupportedLanguage) => {
    if (language === currentLanguage) return;
    
    setIsLoading(true);
    try {
      const newTranslations = await loadTranslations(language);
      setTranslations(newTranslations);
      setCurrentLanguage(language);
      
      // 🔥 쿠키와 localStorage 동시 업데이트 (서버-클라이언트 동기화)
      if (typeof window !== 'undefined') {
        localStorage.setItem('preferred-language', language);
        setLanguageCookie(language); // 쿠키도 설정
      }
      
      console.log(`✅ 언어 변경됨: ${language} (쿠키 + localStorage 동기화)`);
    } catch (error) {
      console.error('언어 변경 오류:', error);
    } finally {
      setIsLoading(false);
    }
  }, [currentLanguage]);

  // 🔥 개선된 초기 언어 설정 (통합 우선순위 시스템)
  useEffect(() => {
    const initializeLanguage = async () => {
      if (typeof window === 'undefined') return;
      
      // 🔥 통합 언어 감지 시스템 사용
      const urlParams = new URLSearchParams(window.location.search);
      const urlLang = urlParams.get('lang');
      const cookieLanguage = getLanguageCookie();
      const storageLanguage = localStorage.getItem('preferred-language');
      const browserLanguage = navigator.language;
      
      const initialLanguage = detectPreferredLanguage({
        cookieValue: cookieLanguage || undefined,
        storageValue: storageLanguage || undefined,
        urlLang: urlLang || undefined,
        browserLang: browserLanguage
      }) as SupportedLanguage;
      
      // 🔧 서버와 일치하는 언어로 설정
      setCurrentLanguage(initialLanguage);
      const initialTranslations = await loadTranslations(initialLanguage);
      setTranslations(initialTranslations);
      
      // 🔥 쿠키와 localStorage 동기화 (초기화 시에도)
      localStorage.setItem('preferred-language', initialLanguage);
      setLanguageCookie(initialLanguage);
      
      console.log(`✅ 언어 초기화 완료: ${initialLanguage} (서버-클라이언트 동기화)`);
    };

    initializeLanguage();
  }, []); // 🔥 의존성 배열: 초기화는 한 번만 실행

  // 번역 함수
  const t = (key: string, params?: Record<string, string>): string | string[] => {
    const keys = key.split('.');
    let value: any = translations;
    
    // 🔥 디버그 로그 추가
    const debugLog = process.env.NODE_ENV === 'development';
    
    for (const k of keys) {
      if (value && typeof value === 'object' && k in value) {
        value = value[k];
      } else {
        if (debugLog) {
          console.warn(`❌ Translation key not found: ${key} (stopped at: ${k})`, {
            currentLanguage,
            availableKeys: value && typeof value === 'object' ? Object.keys(value) : 'not object',
            translations: Object.keys(translations),
            path: keys
          });
        }
        
        // 🔥 fallback 처리 개선
        // 1. 현재 언어의 번역에서 다시 한번 전체 경로로 시도
        if (translations) {
          const fullTranslations = translations as any;
          const fallbackKeys = key.split('.');
          let fallbackValue: any = fullTranslations;
          
          for (const fk of fallbackKeys) {
            if (fallbackValue && typeof fallbackValue === 'object' && fk in fallbackValue) {
              fallbackValue = fallbackValue[fk];
            } else {
              fallbackValue = null;
              break;
            }
          }
          
          if (fallbackValue && typeof fallbackValue === 'string') {
            if (debugLog) {
              console.log(`✅ Fallback found for ${key}: ${fallbackValue}`);
            }
            return fallbackValue;
          }
        }
        
        // 2. 마지막 키 부분만 반환 (사용자 친화적)
        const lastKey = keys[keys.length - 1];
        const friendlyFallback = lastKey.replace(/([A-Z])/g, ' $1').toLowerCase();
        
        if (debugLog) {
          console.log(`🔄 Using friendly fallback for ${key}: ${friendlyFallback}`);
        }
        
        return friendlyFallback;
      }
    }
    
    // 매개변수가 있고 value가 문자열이면 치환
    if (params && typeof value === 'string') {
      let result = value;
      for (const [paramKey, paramValue] of Object.entries(params)) {
        result = result.replace(new RegExp(`\\{${paramKey}\\}`, 'g'), paramValue);
      }
      return result;
    }
    
    return value; // 원래 값 그대로 반환 (string 또는 array)
  };

  const contextValue: LanguageContextType = {
    currentLanguage,
    currentConfig,
    setLanguage,
    t,
    translations,
    isLoading,
    isRTL,
    detectBrowserLanguage
  };

  return (
    <LanguageContext.Provider value={contextValue}>
      {children}
    </LanguageContext.Provider>
  );
}

// Hook
export const useLanguage = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};