'use client';

import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { detectPreferredLanguage, setLanguageCookie, getLanguageCookie } from '@/lib/utils';
import { mapLocationToKorean, translateLocationFromKorean } from '@/lib/location-mapping';
import type { LanguageDetectionResult, LanguageDetectionSource } from '@/types/language-detection';
import { getDetectionSourceMessage } from '@/types/language-detection';

// 지원 언어 타입
export type SupportedLanguage = 'ko' | 'en' | 'ja' | 'zh' | 'es';

// 언어 설정 인터페이스 (ttsLang 필드 추가)
export interface LanguageConfig {
  code: SupportedLanguage;
  name: string;
  flag: string;
  nativeName: string;
  dir: 'ltr' | 'rtl';
  fontFamily?: string;
  ttsLang: string; // TTS용 언어 코드 추가
}

// 지원 언어 목록 (ttsLang 추가)
export const SUPPORTED_LANGUAGES: LanguageConfig[] = [
  { 
    code: 'ko', 
    name: '한국어', 
    flag: '🇰🇷', 
    nativeName: '한국어',
    dir: 'ltr',
    fontFamily: 'var(--font-inter)',
    ttsLang: 'ko-KR'
  },
  { 
    code: 'en', 
    name: 'English', 
    flag: '🇺🇸', 
    nativeName: 'English',
    dir: 'ltr',
    fontFamily: 'var(--font-inter)',
    ttsLang: 'en-US'
  },
  { 
    code: 'ja', 
    name: '日本語', 
    flag: '🇯🇵', 
    nativeName: '日本語',
    dir: 'ltr',
    fontFamily: 'var(--font-inter)',
    ttsLang: 'ja-JP'
  },
  { 
    code: 'zh', 
    name: '中文', 
    flag: '🇨🇳', 
    nativeName: '中文',
    dir: 'ltr',
    fontFamily: 'var(--font-inter)',
    ttsLang: 'cmn-CN'
  },
  { 
    code: 'es', 
    name: 'Español', 
    flag: '🇪🇸', 
    nativeName: 'Español',
    dir: 'ltr',
    fontFamily: 'var(--font-inter)',
    ttsLang: 'es-ES'
  },
];

// 완전한 번역 데이터 타입
interface Translations {
  header: {
    title: string;
    language: string;
    login: string;
    logout: string;
    history: string;
    profile: string;
    settings: string;
    currentSelectedLanguage: string;
    guideMode: string;
    podcastMode: string;
  };
  navigation: {
    home: string;
    guides: string;
    favorites: string;
    about: string;
    contact: string;
  };
  home: {
    brandTitle: string;
    title: string;
    audioGuidePrefix: string;
    subtitle: string;
    subtitle2: string;
    searchPlaceholder: string;
    searchButton: string;
    popularDestinations: string;
    viewMoreAttractions: string;
    description: string;
    searchPlaceholders?: string[];
    defaultSuggestions?: Array<{ name: string; location: string }>;
    stepTitles: {
      inputLocation: string;
      inputLocationSub: string;
      aiGenerate: string;
      aiGenerateSub: string;
      audioPlay: string;
      audioPlaySub: string;
    };
    stepDescriptions: {
      inputLocation: string;
      aiGenerate: string;
      audioPlay: string;
    };
    regionTitles: {
      popularCountries: string;
      korea: string;
      europe: string;
      asia: string;
      americas: string;
    };
    regionDescription: string;
    countryAttraction: string;
    startGuide: string;
    clickAttraction: string;
    destinations: string;
    scrollHint: string;
    popularBadge: string;
    features: {
      personalized: string;
      realTime: string;
      multiLanguage: string;
      offline: string;
      storyteller: string;
      docent: string;
      personalGuide: string;
      audioCommentary: string;
      tourDocent: string;
      selfTour: string;
    };
    countries: {
      [countryId: string]: {
        name: string;
        attractions: string[];
        description: string;
      };
    };
    landmarks: {
      [landmarkKey: string]: string;
    };
    landmarkSuffix: string;
    accessibility: {
      skipToMain: string;
    };
    pageTitle: string;
  };
  guide: {
    loading: string;
    error: string;
    chapters: string;
    duration: string;
    difficulty: string;
    nextChapter: string;
    previousChapter: string;
    playAudio: string;
    pauseAudio: string;
    mapView: string;
    listView: string;
    essentialInfo: string;
    locationAccess: string;
    keyFeatures: string;
    historicalContext: string;
    mustSeeHighlights: string;
    safetyGuidelines: string;
    realTimeGuideTitle: string;
    overview: string;
    mustSeePoints: string;
    precautions: string;
    viewingOrder: string;
    viewingOrderMap: string;
    tourStartLocation: string;
    audioGuide: string;
    thisPlace: string;
    tourStart: string;
    guideTitle: string;
    loadingGuide: string;
    fetchingGuideData: string;
    currentChapter: string;
    nextMoveGuide: string;
    autoGeneratedIntro: string;
    intro: string;
    aiCustomAudioGuide: string;
    recommendedStartPoint: string;
    accurateIntroLocation: string;
    regionTouristMap: string;
    regionOverview: string;
    recommendedSpots: string;
    noTouristSpotsAvailable: string;
  };
  search: {
    placeholder: string;
    searching: string;
    noResults: string;
    tryAgain: string;
    suggestions: string;
    recentSearches: string;
    pressEnterToSearch: string;
  };
  errors: {
    networkError: string;
    serverError: string;
    notFound: string;
    unauthorized: string;
    forbidden: string;
    generalError: string;
  };
  common: {
    loading: string;
    error: string;
    success: string;
    warning: string;
    info: string;
    cancel: string;
    confirm: string;
    save: string;
    delete: string;
    edit: string;
    close: string;
    hide: string;
    exists: string;
    notExists: string;
    pleaseWait: string;
    confirmDelete: string;
    daysAgo: string;
    weeksAgo: string;
    languagesGenerated: string;
    total: string;
    none: string;
    sortLatest: string;
    sortName: string;
    sortChapters: string;
    allLanguages: string;
    chapters: string;
    completed: string;
    processing: string;
    minutes: string;
  };
  history: {
    noResults: string;
    noHistory: string;
    view: string;
    delete: string;
    today: string;
    yesterday: string;
    invalidDate: string;
    preview: string;
    loadFailed: string;
    deleteFailed: string;
    searchInHistory: string;
    searchPlaces: string;
    totalGuides: string;
    daysAgo: string;
    weeksAgo: string;
  };
  date: {
    today: string;
    yesterday: string;
    tomorrow: string;
    thisWeek: string;
    lastWeek: string;
    thisMonth: string;
    lastMonth: string;
  };
  profile: {
    name: string;
    email: string;
    preferences: string;
    language: string;
    notifications: string;
    privacy: string;
    account: string;
    logout: string;
    mypage: string;
  };
  mypage: {
    title: string;
    overview: string;
    overviewShort: string;
    guides: string;
    guidesShort: string;
    settings: string;
    settingsShort: string;
    recentGuides: string;
    favoriteGuides: string;
    favoritesShort: string;
    fileGuides: string;
    filesShort: string;
    totalGuides: string;
    completedTours: string;
    savedLocations: string;
    primaryLanguage: string;
    frequentPlaces: string;
    personalizedDiagnosis: string;
    diagnosisComplete: string;
    diagnosisResult: string;
    reliability: string;
    diagnosed: string;
    contentDepth: string;
    guideStyle: string;
    interaction: string;
    emotionalTone: string;
    aiSimulationInfo: string;
    accuracy: string;
    personalizedGuideProvided: string;
    timeRequired: string;
    countriesVerification: string;
    retakeDiagnosis: string;
    startDiagnosis: string;
    personalizedGuideActive: string;
    noFavoriteGuides: string;
    addFavoriteGuides: string;
    createGuideFromFile: string;
    uploadFileDescription: string;
    supportedFormats: string;
    noUploadedFiles: string;
    uploadFirstFile: string;
    personalityTraits: {
      openness: string;
      conscientiousness: string;
      extraversion: string;
      agreeableness: string;
      neuroticism: string;
    };
    contentDepthLevels: {
      veryDetailed: string;
      detailed: string;
      moderate: string;
      simple: string;
    };
    guideStyles: {
      storytelling: string;
      academic: string;
      conversational: string;
      practical: string;
    };
    interactionLevels: {
      veryActive: string;
      active: string;
      moderate: string;
      passive: string;
    };
    emotionalTones: {
      enthusiastic: string;
      friendly: string;
      professional: string;
      calm: string;
    };
  };
  auth: {
    login: string;
    register: string;
    email: string;
    password: string;
    confirmPassword: string;
    forgotPassword: string;
    rememberMe: string;
    loginWithGoogle: string;
    loginWithFacebook: string;
    createAccount: string;
    alreadyHaveAccount: string;
    noAccount: string;
    signin: string;
    signout: string;
    welcomeTitle: string;
    joinTitle: string;
    exploreWithAI: string;
    emailVerification: string;
    enterCode: string;
    signupComplete: string;
    startYourJourney: string;
    enterYourEmail: string;
    enterYourPassword: string;
    enterYourName: string;
    passwordMinLength: string;
    confirmYourPassword: string;
    name: string;
    verifyEmail: string;
    orContinueWith: string;
    registerWithGoogle: string;
    signup: string;
    termsAndConditions: string;
    privacyPolicy: string;
    secureConnection: string;
    unknownError: string;
  };
  buttons: {
    submit: string;
    continue: string;
    goBack: string;
    tryAgain: string;
    viewDetails: string;
  };
  languages: {
    ko: string;
    en: string;
    ja: string;
    zh: string;
    es: string;
  };
  audio: {
    chapter: string;
  };
  footer: {
    companyName: string;
    companyDescription: string;
    copyright: string;
    legalInfo: string;
    privacyPolicy: string;
    termsOfService: string;
    aboutUs: string;
    contact: string;
    support: string;
    telegramChannel: string;
    supportHours: string;
    adsenseNotice: string;
    adsensePolicy: string;
    services: {
      title: string;
      audioGuide: string;
      docent: string;
      tourRadio: string;
      travelRadio: string;
      helpCenter: string;
      feedback: string;
      adsRevenue: string;
    };
    tools: {
      title: string;
      tripPlanner: string;
      nomadCalculator: string;
      visaChecker: string;
      filmLocations: string;
    };
  };
  aiTravel: {
    title: string;
    subtitle: string;
    description: string;
  };
  audioGuide: {
    title: string;
    subtitle: string;
    description: string;
  };
  filmLocations: {
    title: string;
    subtitle: string;
    description: string;
  };
  docent: {
    title: string;
    subtitle: string;
    description: string;
  };
  legal: {
    terms: {
      title: string;
      description: string;
      content: string;
      lastUpdated: string;
    };
    privacy: {
      title: string;
      description: string;
      content: string;
      lastUpdated: string;
    };
  };
  tripPlanner: {
    keyword: string;
    badge: string;
    hero: {
      title: string;
      subtitle: string;
      description: string;
    };
    tabs: {
      planner: string;
      destinations: string;
      templates: string;
      tools: string;
    };
    quickPlanner: {
      title: string;
    };
    steps: {
      selectStyle: string;
      destinationDuration: string;
      budgetPreferences: string;
    };
    form: {
      destination: {
        label: string;
        placeholder: string;
      };
      departure: string;
      duration: string;
      durationOptions: {
        dayTrip: string;
        oneNight: string;
        twoNights: string;
        threeNights: string;
        fourNights: string;
        oneWeek: string;
        twoWeeks: string;
        oneMonth: string;
        custom: string;
      };
      budget: string;
      budgetOptions: {
        under20: string;
        range20to50: string;
        range50to100: string;
        range100to200: string;
        over200: string;
        unlimited: string;
      };
      interests: string;
      interestOptions: {
        food: string;
        shopping: string;
        culture: string;
        nature: string;
        activities: string;
        photography: string;
        nightView: string;
        spa: string;
      };
      generateButton: string;
      analyzing: string;
      completionTime: string;
    };
    audioGuideIntegration: {
      title: {
        before: string;
        highlight: string;
      };
      description: string;
      features: {
        autoStart: {
          title: string;
          description: string;
        };
        personalized: {
          title: string;
          description: string;
        };
        realtimeUpdate: {
          title: string;
          description: string;
        };
      };
      tryButton: string;
    };
    alerts: {
      noSavedSettings: string;
      settingsLoaded: string;
      settingsSaved: string;
      enterDestination: string;
      noPlanToSave: string;
      planSaved: string;
      confirmRegenerate: string;
      planGenerationFailed: string;
      planGenerationError: string;
      noPlanToShare: string;
      planCopiedToClipboard: string;
      compareFeatureComingSoon: string;
      savedPlansEmpty: string;
      loadButton: string;
      deleteButton: string;
      settingsPrompt: string;
      linkCopied: string;
    };
    destinations: {
      viewGuide: string;
      nomad: string;
      nomadInfo: string;
      visa: string;
      visaInfo: string;
      cities: {
        [cityKey: string]: string;
      };
      countries: {
        [countryKey: string]: string;
      };
      attractions: {
        [attractionKey: string]: string;
      };
    };
    labels: {
      budget: string;
      tripType: string;
      mainAttractions: string;
      createdAt: string;
    };
    aiFeatures: {
      title: string;
      subtitle: string;
      customized: {
        title: string;
        description: string;
      };
      realtime: {
        title: string;
        description: string;
      };
      detailedInfo: {
        title: string;
        description: string;
      };
      budgetManagement: {
        title: string;
        description: string;
      };
      mobileOptimized: {
        title: string;
        description: string;
      };
      audioGuide: {
        title: string;
        description: string;
      };
    };
    popularDestinations: {
      title: string;
      subtitle: string;
    };
    personalization: {
      title: string;
      loadSettings: string;
      saveSettings: string;
      viewSavedPlans: string;
      plansCount: string;
    };
    savedPlans: {
      title: string;
    };
    generatedPlan: {
      title: string;
      savePlan: string;
      exportPDF: string;
      regenerate: string;
      share: string;
      compare: string;
    };
    defaults: {
      budget: string;
      duration: string;
      tripType: string;
    };
    metadata: {
      title: string;
      description: string;
    };
    features: {
      aiGeneration: string;
      realtime: string;
      budget: string;
      customized: string;
      localInfo: string;
      free: string;
    };
  };
  tripTypes: {
    solo: {
      name: string;
      description: string;
      features: {
        safety: string;
        culture: string;
        budget: string;
      };
    };
    couple: {
      name: string;
      description: string;
      features: {
        romantic: string;
        activities: string;
        photos: string;
      };
    };
    family: {
      name: string;
      description: string;
      features: {
        kidFriendly: string;
        safety: string;
        educational: string;
      };
    };
    friends: {
      name: string;
      description: string;
      features: {
        activities: string;
        instagramSpots: string;
        nightlife: string;
      };
    };
    nomad: {
      name: string;
      description: string;
      features: {
        wifi: string;
        coworking: string;
        longTerm: string;
      };
    };
  };
  tourRadio: {
    metadata: {
      title: string;
      description: string;
      keyword: string;
    };
    badge: string;
    hero: {
      title: string;
      subtitle: string;
      description: string;
    };
    cta: {
      primary: string;
      secondary: string;
    };
    problems: {
      title: string;
      subtitle: string;
      items: Array<{
        title: string;
        description: string;
      }>;
    };
    radioFeatures: {
      title: string;
      subtitle: string;
      features: Array<{
        title: string;
        description: string;
      }>;
    };
    contentTypes: {
      title: string;
      subtitle: string;
      items: Array<{
        title: string;
        description: string;
      }>;
    };
    howToUse: {
      title: string;
      subtitle: string;
      steps: Array<{
        title: string;
        description: string;
      }>;
    };
    testimonials: {
      title: string;
      subtitle: string;
      reviews: Array<{
        content: string;
        author: string;
      }>;
    };
    finalCta: {
      title: string;
      description: string;
      button: string;
    };
  };
  travelRadio: {
    metadata: {
      title: string;
      description: string;
      keyword: string;
    };
    badge: string;
    hero: {
      title: string;
      subtitle: string;
      description: string;
    };
    cta: {
      primary: string;
      secondary: string;
    };
    whyNeeded: {
      title: string;
      subtitle: string;
      problems: Array<{
        title: string;
        description: string;
      }>;
    };
    specialExperience: {
      title: string;
      subtitle: string;
      features: Array<{
        title: string;
        description: string;
      }>;
    };
    radioTypes: {
      title: string;
      subtitle: string;
      categories: Array<{
        title: string;
        description: string;
      }>;
    };
    howToListen: {
      title: string;
      subtitle: string;
      steps: Array<{
        title: string;
        description: string;
      }>;
    };
    testimonials: {
      title: string;
      subtitle: string;
      reviews: Array<{
        content: string;
        author: string;
      }>;
    };
    finalCta: {
      title: string;
      description: string;
      button: string;
    };
  };
}

// 기본 번역 데이터 (한국어)
const DEFAULT_TRANSLATIONS: Translations = {
  header: {
    title: 'AI 가이드',
    language: '언어',
    login: '로그인',
    logout: '로그아웃',
    history: '히스토리',
    profile: '프로필',
    settings: '설정',
    currentSelectedLanguage: '현재 선택된 언어',
    guideMode: '가이드',
    podcastMode: '팟캐스트'
  },
  navigation: {
    home: '홈',
    guides: '가이드',
    favorites: '즐겨찾기',
    about: '소개',
    contact: '연락처'
  },
  home: {
    brandTitle: 'AI 여행 가이드',
    title: 'AI와 함께하는 스마트 여행',
    audioGuidePrefix: '앞에서 만드는 오디오 가이드',
    subtitle: '개인 맞춤형 가이드로 새로운 여행을 경험하세요',
    subtitle2: '어디든 검색하고 즉시 전문 가이드를 만나보세요',
    searchPlaceholder: '어디 장소 앞에 계신가요?',
    searchButton: '검색',
    popularDestinations: '인기 여행지',
    viewMoreAttractions: '더 많은 명소 보기',
    description: 'AI 기술로 생성되는 개인화된 여행 가이드',
    searchPlaceholders: [
      '에펠탑',
      '타지마할',
      '마추픽추',
      '콜로세움',
      '자유의 여신상'
    ],
    defaultSuggestions: [
      { name: '경복궁', location: '서울 종로구' },
      { name: '부산 해운대', location: '부산 해운대구' },
      { name: '제주도 성산일출봉', location: '제주 서귀포시' }
    ],
    stepTitles: {
      inputLocation: '장소 입력',
      inputLocationSub: '(특정 장소)',
      aiGenerate: '검색 클릭',
      aiGenerateSub: '(가이드 생성)',
      audioPlay: '재생버튼 누르면',
      audioPlaySub: '(투어시작!)'
    },
    stepDescriptions: {
      inputLocation: '특정한 장소',
      aiGenerate: 'AI가 맞춤형가이드를 생성',
      audioPlay: '투어 시작!'
    },
    regionTitles: {
      popularCountries: '인기 여행 국가',
      korea: '한국',
      europe: '유럽',
      asia: '아시아',
      americas: '미주'
    },
    regionDescription: '다양한 지역의 인기 여행지를 둘러보세요',
    countryAttraction: 'TOP ATTRACTIONS',
    startGuide: 'Start Guide',
    clickAttraction: '명소를 클릭하세요',
    destinations: 'destinations',
    scrollHint: '좌우로 스크롤하여 더 많은 국가를 확인하세요',
    popularBadge: 'POPULAR',
    features: {
      personalized: '맞춤형추천',
      realTime: '실시간가이드',
      multiLanguage: '다국어지원',
      offline: '오프라인사용',
      storyteller: '스토리텔러',
      docent: '도슨트',
      personalGuide: '개인가이드',
      audioCommentary: '오디오해설',
      tourDocent: '투어도슨트',
      selfTour: '셀프투어'
    },
    countries: {
      seoul: {
        name: '서울',
        attractions: ['경복궁', '남산타워', '명동'],
        description: '전통과 현대가 어우러진 대한민국의 수도'
      },
      busan: {
        name: '부산',
        attractions: ['해운대해수욕장', '감천문화마을', '자갈치시장'],
        description: '아름다운 바다와 항구의 도시'
      },
      jeju: {
        name: '제주',
        attractions: ['한라산', '성산일출봉', '중문관광단지'],
        description: '환상적인 자연경관의 섬'
      },
      gyeongju: {
        name: '경주',
        attractions: ['불국사', '석굴암', '첨성대'],
        description: '천년고도 신라의 역사가 살아있는 도시'
      },
      france: {
        name: '프랑스',
        attractions: ['에펠탑', '루브르 박물관', '베르사유 궁전'],
        description: '로맨틱한 파리와 화려한 문화유산'
      },
      italy: {
        name: '이탈리아',
        attractions: ['콜로세움', '피사의 사탑', '바티칸'],
        description: '고대 로마의 영광과 르네상스 예술'
      },
      spain: {
        name: '스페인',
        attractions: ['사그라다 파밀리아', '알함브라 궁전', '구엘 공원'],
        description: '가우디의 건축과 플라멩코의 열정'
      },
      uk: {
        name: '영국',
        attractions: ['빅벤', '타워 브리지', '버킹엄 궁전'],
        description: '전통과 현대가 조화로운 대영제국'
      },
      germany: {
        name: '독일',
        attractions: ['브란덴부르크 문', '노이슈반슈타인성', '쾰른 대성당'],
        description: '동화 속 성과 깊은 역사의 나라'
      },
      japan: {
        name: '일본',
        attractions: ['후지산', '기요미즈데라', '센소지'],
        description: '전통과 첨단이 공존하는 신비로운 나라'
      },
      china: {
        name: '중국',
        attractions: ['만리장성', '자금성', '천안문 광장'],
        description: '5천년 역사를 간직한 거대한 문명'
      },
      india: {
        name: '인도',
        attractions: ['타지마할', '붉은 요새', '갠지스 강'],
        description: '신비로운 영성과 화려한 궁전들'
      },
      thailand: {
        name: '태국',
        attractions: ['왓 아룬', '방콕 대왕궁', '왓 포'],
        description: '황금빛 사원과 미소의 나라'
      },
      singapore: {
        name: '싱가포르',
        attractions: ['마리나 베이 샌즈', '가든스 바이 더 베이', '머라이언'],
        description: '미래도시와 다양한 문화의 만남'
      },
      usa: {
        name: '미국',
        attractions: ['자유의 여신상', '그랜드 캐니언', '타임스퀘어'],
        description: '자유와 꿈의 땅, 무한한 가능성'
      },
      canada: {
        name: '캐나다',
        attractions: ['나이아가라 폭포', 'CN 타워', '밴프 국립공원'],
        description: '광활한 자연과 깨끗한 도시'
      },
      brazil: {
        name: '브라질',
        attractions: ['리우 예수상', '이과수 폭포', '마라카낭 스타디움'],
        description: '삼바와 축구, 열정적인 남미'
      },
      peru: {
        name: '페루',
        attractions: ['마추픽추', '쿠스코', '나스카 라인'],
        description: '잉카 문명의 신비로운 유적들'
      },
      mexico: {
        name: '멕시코',
        attractions: ['치첸이트사', '테오티우아칸', '칸쿤'],
        description: '마야 문명과 카리브해의 낙원'
      }
    },
    landmarks: {
      '에펠탑': '에펠탑',
      '콜로세움': '콜로세움', 
      '타지마할': '타지마할',
      '자유의 여신상': '자유의 여신상',
      '경복궁': '경복궁',
      '마추픽추': '마추픽추',
      '사그라다 파밀리아': '사그라다 파밀리아'
    },
    landmarkSuffix: '',
    accessibility: {
      skipToMain: '메인 콘텐츠로 건너뛰기'
    },
    pageTitle: 'TripRadio.AI - AI 오디오가이드 여행 서비스'
  },
  guide: {
    loading: '가이드 로딩 중...',
    error: '가이드를 불러올 수 없습니다',
    chapters: '챕터',
    duration: '소요시간',
    difficulty: '난이도',
    nextChapter: '다음 챕터',
    previousChapter: '이전 챕터',
    playAudio: '오디오 재생',
    pauseAudio: '오디오 일시정지',
    mapView: '지도 보기',
    listView: '목록 보기',
    essentialInfo: '필수 정보',
    locationAccess: '위치 및 접근',
    keyFeatures: '주요 특징', 
    historicalContext: '역사적 배경',
    mustSeeHighlights: '필수 관람 포인트',
    safetyGuidelines: '안전 수칙',
    realTimeGuideTitle: '실시간 가이드',
    overview: '개요',
    mustSeePoints: '필수포인트',
    precautions: '주의사항',
    viewingOrder: '관람순서',
    viewingOrderMap: '관람지도',
    tourStartLocation: '투어 시작 위치',
    audioGuide: '오디오 가이드',
    thisPlace: '이곳',
    tourStart: '투어 시작',
    guideTitle: '가이드',
    loadingGuide: '가이드 로딩 중',
    fetchingGuideData: '가이드 데이터를 가져오는 중',
    currentChapter: '현재 챕터',
    nextMoveGuide: '다음 이동 안내',
    autoGeneratedIntro: '자동 생성된 인트로',
    intro: '인트로',
    aiCustomAudioGuide: 'AI 맞춤형 오디오 가이드',
    recommendedStartPoint: '관람지도',
    accurateIntroLocation: '정확한 인트로 위치',
    regionTouristMap: '지역 관광지 지도',
    regionOverview: '지역 개요',
    recommendedSpots: '추천 장소',
    noTouristSpotsAvailable: '관광지 정보를 불러오는 중입니다'
  },
  search: {
    placeholder: '검색어를 입력하세요',
    searching: '검색 중...',
    noResults: '검색 결과가 없습니다',
    tryAgain: '다시 시도',
    suggestions: '추천 검색어',
    recentSearches: '최근 검색',
    pressEnterToSearch: 'Enter키를 눌러 검색하세요'
  },
  errors: {
    networkError: '네트워크 오류가 발생했습니다',
    serverError: '서버 오류가 발생했습니다',
    notFound: '페이지를 찾을 수 없습니다',
    unauthorized: '인증이 필요합니다',
    forbidden: '접근 권한이 없습니다',
    generalError: '오류가 발생했습니다'
  },
  common: {
    loading: '로딩 중...',
    error: '오류',
    success: '성공',
    warning: '경고',
    info: '정보',
    cancel: '취소',
    confirm: '확인',
    save: '저장',
    delete: '삭제',
    edit: '편집',
    close: '닫기',
    hide: '숨기기',
    exists: '있음',
    notExists: '없음',
    pleaseWait: '잠시만 기다려주세요...',
    confirmDelete: '정말 삭제하시겠습니까?',
    daysAgo: '일 전',
    weeksAgo: '주 전',
    languagesGenerated: '개 언어로 생성',
    total: '총',
    none: '없음',
    sortLatest: '최신순',
    sortName: '이름순',
    sortChapters: '챕터순',
    allLanguages: '모든 언어',
    chapters: '개 챕터',
    completed: '완료',
    processing: '처리중',
    minutes: '분'
  },
  history: {
    noResults: '검색 결과가 없습니다',
    noHistory: '검색 기록이 없습니다',
    view: '가이드 보기',
    delete: '삭제',
    today: '오늘',
    yesterday: '어제',
    invalidDate: '잘못된 날짜',
    preview: '가이드 미리보기',
    loadFailed: '히스토리 로드 실패',
    deleteFailed: '히스토리 삭제 실패',
    searchInHistory: '검색 기록에서 찾기',
    searchPlaces: '장소를 검색해보세요',
    totalGuides: '총 {count}개의 가이드',
    daysAgo: '{days}일 전',
    weeksAgo: '{weeks}주 전'
  },
  date: {
    today: '오늘',
    yesterday: '어제',
    tomorrow: '내일',
    thisWeek: '이번 주',
    lastWeek: '지난 주',
    thisMonth: '이번 달',
    lastMonth: '지난 달'
  },
  profile: {
    name: '이름',
    email: '이메일',
    preferences: '설정',
    language: '언어',
    notifications: '알림',
    privacy: '개인정보',
    account: '계정',
    logout: '로그아웃',
    mypage: '마이페이지'
  },
  mypage: {
    title: '마이페이지',
    overview: '개요',
    overviewShort: '개요',
    guides: '내 가이드',
    guidesShort: '가이드',
    settings: '설정',
    settingsShort: '설정',
    recentGuides: '최근 가이드',
    favoriteGuides: '즐겨찾기 가이드',
    favoritesShort: '즐겨찾기',
    fileGuides: '파일 가이드',
    filesShort: '파일',
    totalGuides: '전체 가이드',
    completedTours: '완료된 투어',
    savedLocations: '저장된 장소',
    primaryLanguage: '주 사용 언어',
    frequentPlaces: '자주 방문하는 장소들',
    personalizedDiagnosis: '개인화 가이드 맞춤 진단',
    diagnosisComplete: '진단 완료! 당신의 주도적 성격은',
    diagnosisResult: '입니다',
    reliability: '신뢰도',
    diagnosed: '진단',
    contentDepth: '콘텐츠 깊이',
    guideStyle: '가이드 스타일',
    interaction: '상호작용',
    emotionalTone: '감정적 어조',
    aiSimulationInfo: '100만명 AI 시뮬레이션으로 검증된 5문항 진단으로',
    accuracy: '정확도',
    personalizedGuideProvided: '의 개인화 가이드를 제공합니다',
    timeRequired: '소요시간',
    countriesVerification: '개국 문화적 공정성 검증',
    retakeDiagnosis: '다시 진단하기',
    startDiagnosis: '진단 시작하기',
    personalizedGuideActive: '이제 모든 가이드가 당신의 성격에 맞게 자동으로 개인화됩니다!',
    noFavoriteGuides: '즐겨찾기한 가이드가 없습니다',
    addFavoriteGuides: '마음에 드는 가이드를 즐겨찾기로 추가해보세요!',
    createGuideFromFile: '파일에서 가이드 생성',
    uploadFileDescription: 'PDF, Word, 텍스트 파일을 업로드하여 가이드를 생성할 수 있습니다',
    supportedFormats: '지원 형식: PDF, DOCX, TXT (최대 10MB)',
    noUploadedFiles: '업로드된 파일이 없습니다',
    uploadFirstFile: '첫 번째 파일을 업로드해보세요!',
    personalityTraits: {
      openness: '개방성',
      conscientiousness: '성실성',
      extraversion: '외향성',
      agreeableness: '친화성',
      neuroticism: '신경성'
    },
    contentDepthLevels: {
      veryDetailed: '매우 상세',
      detailed: '상세',
      moderate: '보통',
      simple: '간단'
    },
    guideStyles: {
      storytelling: '스토리텔링',
      academic: '학술적',
      conversational: '대화형',
      practical: '실용적'
    },
    interactionLevels: {
      veryActive: '매우 활발',
      active: '활발',
      moderate: '보통',
      passive: '수동적'
    },
    emotionalTones: {
      enthusiastic: '열정적',
      friendly: '친근한',
      professional: '전문적',
      calm: '차분한'
    }
  },
  auth: {
    login: '로그인',
    register: '회원가입',
    email: '이메일',
    password: '비밀번호',
    confirmPassword: '비밀번호 확인',
    forgotPassword: '비밀번호 찾기',
    rememberMe: '로그인 상태 유지',
    loginWithGoogle: 'Google로 로그인',
    loginWithFacebook: 'Facebook으로 로그인',
    createAccount: '계정 만들기',
    alreadyHaveAccount: '이미 계정이 있으신가요?',
    noAccount: '계정이 없으신가요?',
    signin: '로그인',
    signout: '로그아웃',
    welcomeTitle: '트립라디오에 오신 것을 환영합니다',
    joinTitle: 'AI 가이드와 함께 시작하세요',
    exploreWithAI: 'AI와 함께 세계를 탐험하세요',
    emailVerification: '이메일 인증',
    enterCode: '인증 코드를 입력하세요',
    signupComplete: '회원가입 완료',
    startYourJourney: '이제 AI 가이드와 함께 여행을 시작하세요',
    enterYourEmail: '이메일을 입력하세요',
    enterYourPassword: '비밀번호를 입력하세요',
    enterYourName: '이름을 입력하세요',
    passwordMinLength: '8자 이상의 비밀번호를 입력하세요',
    confirmYourPassword: '비밀번호를 다시 입력하세요',
    name: '이름',
    verifyEmail: '이메일 인증',
    orContinueWith: '또는 다음으로 계속하기',
    registerWithGoogle: 'Google로 회원가입',
    signup: '회원가입',
    termsAndConditions: '이용약관',
    privacyPolicy: '개인정보 처리방침',
    secureConnection: '256-bit SSL 보안 연결로 보호됩니다',
    unknownError: '알 수 없는 오류가 발생했습니다'
  },
  buttons: {
    submit: '제출',
    continue: '계속',
    goBack: '돌아가기',
    tryAgain: '다시 시도',
    viewDetails: '자세히 보기'
  },
  languages: {
    ko: '한국어',
    en: 'English',
    ja: '日本語',
    zh: '中文',
    es: 'Español'
  },
  audio: {
    chapter: '챕터'
  },
  footer: {
    companyName: 'TripRadio',
    companyDescription: 'AI 기반 개인 맞춤형 여행 도슨트 서비스',
    copyright: '© 2024 TripRadio. All rights reserved.',
    legalInfo: '법적 정보',
    privacyPolicy: '개인정보 처리방침',
    termsOfService: '이용약관',
    aboutUs: '서비스 소개',
    contact: '문의하기',
    support: '고객지원',
    telegramChannel: '텔레그램 채널',
    supportHours: '지원시간: 평일 9시-18시',
    adsenseNotice: '광고 수익 공지',
    adsensePolicy: 'AdSense 정책',
    services: {
      title: '주요 서비스',
      audioGuide: '오디오가이드',
      docent: 'AI 도슨트',
      tourRadio: '투어라디오',
      travelRadio: '여행라디오',
      helpCenter: '도움말 센터',
      feedback: '피드백 보내기',
      adsRevenue: '광고 수익 공지'
    },
    tools: {
      title: '여행 도구',
      tripPlanner: 'AI 여행 계획',
      nomadCalculator: '노마드 계산기',
      visaChecker: '비자 체커',
      filmLocations: '영화 촬영지'
    }
  },
  aiTravel: {
    title: 'AI 여행',
    subtitle: 'AI가 계획하는 맞춤 여행',
    description: 'AI 기술로 당신만의 특별한 여행을 계획하세요'
  },
  audioGuide: {
    title: '오디오 가이드',
    subtitle: '음성으로 듣는 여행 가이드',
    description: '전문 해설로 더욱 생생한 여행을 경험하세요'
  },
  filmLocations: {
    title: '영화 촬영지',
    subtitle: '영화 속 그 장소들',
    description: '좋아하는 영화의 촬영지를 찾아 떠나보세요'
  },
  docent: {
    title: '도슨트',
    subtitle: '전문가의 문화 해설',
    description: '전문 도슨트와 함께하는 깊이 있는 문화 체험'
  },
  legal: {
    terms: {
      title: '이용약관',
      description: 'TripRadio 서비스 이용약관',
      content: '서비스 이용에 관한 약관 내용',
      lastUpdated: '최종 업데이트'
    },
    privacy: {
      title: '개인정보 처리방침',
      description: 'TripRadio 개인정보 처리방침',
      content: '개인정보 처리에 관한 방침 내용',
      lastUpdated: '최종 업데이트'
    }
  },
  tripPlanner: {
    keyword: 'AI 여행 계획',
    badge: 'Smart Trip Planner',
    hero: {
      title: 'AI가 만드는',
      subtitle: '완벽한 여행 계획',
      description: '당신의 취향에 맞춘 완벽한 여행 계획'
    },
    tabs: {
      planner: '계획하기',
      destinations: '여행지',
      templates: '추천 일정',
      tools: '여행 도구'
    },
    quickPlanner: {
      title: '3분만에 여행 계획 완성'
    },
    steps: {
      selectStyle: '여행 스타일 선택',
      destinationDuration: '목적지와 기간',
      budgetPreferences: '예산과 선호사항'
    },
    form: {
      destination: {
        label: '목적지',
        placeholder: '어디로 가실 건가요?'
      },
      departure: '출발일',
      duration: '기간',
      durationOptions: {
        dayTrip: '당일치기',
        oneNight: '1박 2일',
        twoNights: '2박 3일',
        threeNights: '3박 4일',
        fourNights: '4박 5일',
        oneWeek: '1주일',
        twoWeeks: '2주일',
        oneMonth: '1개월',
        custom: '직접 입력'
      },
      budget: '예산',
      budgetOptions: {
        under20: '20만원 이하',
        range20to50: '20-50만원',
        range50to100: '50-100만원',
        range100to200: '100-200만원',
        over200: '200만원 이상',
        unlimited: '예산 상관없음'
      },
      interests: '관심사',
      interestOptions: {
        food: '맛집 탐방',
        shopping: '쇼핑',
        culture: '역사/문화',
        nature: '자연/힐링',
        activities: '액티비티',
        photography: '사진촬영',
        nightView: '야경',
        spa: '온천/스파'
      },
      generateButton: '계획 생성',
      analyzing: '분석 중...',
      completionTime: '완성 시간'
    },
    audioGuideIntegration: {
      title: {
        before: '여행 계획과 함께하는',
        highlight: 'AI 오디오 가이드'
      },
      description: '생성된 여행 계획에 따라 각 장소에서 자동으로 맞춤형 오디오 가이드가 제공됩니다',
      features: {
        autoStart: {
          title: '자동 재생',
          description: '목적지에 도착하면 자동으로 해당 장소의 가이드가 시작됩니다'
        },
        personalized: {
          title: '개인 맞춤형',
          description: '당신의 관심사와 여행 스타일에 맞춰 개인화된 설명을 제공합니다'
        },
        realtimeUpdate: {
          title: '실시간 업데이트',
          description: '여행 중 계획 변경 시 즉시 새로운 가이드 정보로 업데이트됩니다'
        }
      },
      tryButton: '통합 서비스 체험하기'
    },
    alerts: {
      noSavedSettings: '저장된 설정이 없습니다',
      settingsLoaded: '저장된 설정을 불러왔습니다',
      settingsSaved: '설정이 저장되었습니다',
      enterDestination: '여행지를 입력해주세요',
      noPlanToSave: '저장할 계획이 없습니다',
      planSaved: '계획이 저장되었습니다',
      confirmRegenerate: '계획을 다시 생성하시겠습니까?',
      planGenerationFailed: '계획 생성에 실패했습니다',
      planGenerationError: '계획 생성 중 오류가 발생했습니다',
      noPlanToShare: '공유할 계획이 없습니다',
      planCopiedToClipboard: '계획이 클립보드에 복사되었습니다',
      compareFeatureComingSoon: '계획 비교 기능은 곧 제공됩니다',
      savedPlansEmpty: '저장된 계획이 없습니다',
      loadButton: '불러오기',
      deleteButton: '삭제',
      settingsPrompt: '설정을 저장하시겠습니까?',
      linkCopied: '링크가 복사되었습니다'
    },
    // 누락된 필드들 추가
    destinations: {
      viewGuide: '가이드 보기',
      nomad: '노마드',
      nomadInfo: '노마드 정보',
      visa: '비자',
      visaInfo: '비자 정보',
      cities: {
        tokyo: '도쿄',
        seoul: '서울',
        osaka: '오사카',
        kyoto: '교토',
        paris: '파리',
        london: '런던',
        amsterdam: '암스테르담',
        bangkok: '방콕',
        chiangmai: '치앙마이',
        phuket: '푸켓',
        newyork: '뉴욕',
        bali: '발리',
        singapore: '싱가포르',
        hawaii: '하와이',
        sydney: '시드니',
        rome: '로마',
        barcelona: '바르셀로나',
        dubai: '두바이',
        istanbul: '이스탄불',
        hongkong: '홍콩'
      },
      countries: {
        japan: '일본',
        korea: '한국',
        france: '프랑스',
        uk: '영국',
        netherlands: '네덜란드',
        thailand: '태국',
        usa: '미국',
        indonesia: '인도네시아',
        singapore: '싱가포르',
        australia: '호주',
        italy: '이탈리아',
        spain: '스페인',
        uae: 'UAE',
        turkey: '터키',
        china: '중국'
      },
      attractions: {
        shibuya: '시부야',
        asakusa: '아사쿠사',
        ginza: '긴자',
        harajuku: '하라주쿠',
        sensoji: '센소지 절',
        tokyoSkytree: '도쿄 스카이트리',
        meijiShrine: '메이지 신궁',
        tsukijiMarket: '츠키지 시장',
        myeongdong: '명동',
        gangnam: '강남',
        hongdae: '홍대',
        insadong: '인사동',
        eiffelTower: '에펠탑',
        louvre: '루브르 박물관',
        champselysees: '샹젤리제',
        versailles: '베르사유',
        bigben: '빅벤',
        towerBridge: '타워 브리지',
        britishMuseum: '대영박물관',
        buckinghamPalace: '버킹엄 궁전',
        vangoghMuseum: '반 고흐 박물관',
        anneFrankHouse: '안네 프랑크의 집',
        timeSquare: '타임스퀘어',
        centralPark: '센트럴 파크',
        statueOfLiberty: '자유의 여신상',
        brooklynBridge: '브루클린 다리'
      }
    },
    labels: {
      budget: '예산:',
      tripType: '유형:',
      mainAttractions: '주요 명소',
      createdAt: '생성일:'
    },
    aiFeatures: {
      title: 'AI 기반',
      subtitle: '스마트 기능',
      customized: {
        title: '맞춤형 추천',
        description: '여행 스타일과 선호도를 분석하여 최적의 여행 계획을 제안합니다'
      },
      realtime: {
        title: '실시간 정보',
        description: '실시간 교통, 날씨, 혼잡도 정보 업데이트를 반영합니다'
      },
      detailedInfo: {
        title: '상세 정보 제공',
        description: '명소, 맛집, 숙박에 대한 상세한 정보와 팁을 제공합니다'
      },
      budgetManagement: {
        title: '예산 관리',
        description: '설정한 예산 내에서 최고의 여행을 위한 스마트한 예산 배분을 제안합니다'
      },
      mobileOptimized: {
        title: '모바일 최적화',
        description: '언제 어디서나 스마트폰으로 편리하게 여행 계획을 확인하고 수정할 수 있습니다'
      },
      audioGuide: {
        title: '오디오 가이드 연동',
        description: '생성된 여행 계획과 연결된 AI 오디오 가이드로 더욱 풍성한 여행을 경험하세요'
      }
    },
    popularDestinations: {
      title: '빠른 시작',
      subtitle: '인기 여행지'
    },
    personalization: {
      title: '개인화 설정',
      loadSettings: '설정 불러오기',
      saveSettings: '설정 저장',
      viewSavedPlans: '저장된 계획 보기',
      plansCount: '개 계획'
    },
    savedPlans: {
      title: '저장된 여행 계획'
    },
    generatedPlan: {
      title: '생성된 여행 계획',
      savePlan: '계획 저장',
      exportPDF: 'PDF 내보내기',
      regenerate: '다시 생성',
      share: '공유',
      compare: '유사 계획 비교'
    },
    defaults: {
      budget: '20-50만원',
      duration: '2-3일',
      tripType: '자유여행'
    },
    metadata: {
      title: 'AI 여행 계획',
      description: 'AI로 완벽한 여행을 계획하세요'
    },
    features: {
      aiGeneration: 'AI 생성',
      realtime: '실시간',
      budget: '예산 관리',
      customized: '맞춤형',
      localInfo: '현지 정보',
      free: '무료'
    }
  },
  tripTypes: {
    solo: {
      name: '자유여행',
      description: '혼자만의 특별한 시간',
      features: {
        safety: '안전 정보 제공',
        culture: '현지 문화 체험',
        budget: '합리적 예산 관리'
      }
    },
    couple: {
      name: '연인여행',
      description: '로맨틱한 추억 만들기',
      features: {
        romantic: '로맨틱 스팟',
        activities: '커플 액티비티',
        photos: '인생샷 포토존'
      }
    },
    family: {
      name: '가족여행',
      description: '온 가족이 함께',
      features: {
        kidFriendly: '아이 친화적',
        safety: '가족 안전 보장',
        educational: '교육적 체험'
      }
    },
    friends: {
      name: '친구여행',
      description: '친구들과의 즐거운 시간',
      features: {
        activities: '그룹 액티비티',
        instagramSpots: '인스타 스팟',
        nightlife: '나이트라이프'
      }
    },
    nomad: {
      name: '워케이션',
      description: '일과 휴가의 완벽한 조화',
      features: {
        wifi: '안정적 와이파이',
        coworking: '코워킹 스페이스',
        longTerm: '장기 체류 지원'
      }
    }
  },
  tourRadio: {
    metadata: {
      title: '투어라디오 - AI가 들려주는 특별한 여행 이야기',
      description: '지루한 관광은 그만! AI가 생성하는 재미있고 몰입감 있는 라디오 스타일의 여행 가이드를 경험하세요.',
      keyword: '투어라디오'
    },
    badge: '🎧 NEW 투어라디오',
    hero: {
      title: '여행이 이렇게 재미있었나?',
      subtitle: 'AI가 들려주는 특별한 투어라디오',
      description: '지루한 가이드는 안녕! 마치 친구가 들려주는 이야기처럼 재미있고 흥미진진한 여행 라디오를 만나보세요. 전 세계 어디서든 무료로 즐기는 새로운 여행 경험입니다.'
    },
    cta: {
      primary: '무료로 시작하기',
      secondary: '기능 알아보기'
    },
    problems: {
      title: '기존 여행 가이드의 문제점',
      subtitle: '왜 여행이 재미없을까요?',
      items: [
        {
          title: '지루한 관광',
          description: '획일적이고 재미없는 기존 가이드'
        },
        {
          title: '딱딱한 설명',
          description: '교과서 같은 지식 전달 방식'
        },
        {
          title: '높은 비용',
          description: '가이드 투어의 부담스러운 가격'
        },
        {
          title: '시간 제약',
          description: '정해진 시간에만 이용 가능'
        },
        {
          title: '단체 행동',
          description: '개인 취향을 고려하지 않는 단체 투어'
        },
        {
          title: '언어 장벽',
          description: '제한적인 언어 지원'
        }
      ]
    },
    radioFeatures: {
      title: '투어라디오만의 특별함',
      subtitle: '전혀 새로운 여행 경험을 선사합니다',
      features: [
        {
          title: '라디오 스타일',
          description: '재미있고 몰입감 있는 라디오 방송 형태'
        },
        {
          title: '스토리텔링',
          description: '흥미진진한 이야기로 전하는 여행 정보'
        },
        {
          title: '위치 기반',
          description: '현재 위치에 맞는 맞춤 콘텐츠'
        },
        {
          title: '배경음악',
          description: '분위기를 살리는 음악과 효과음'
        },
        {
          title: '인터랙티브',
          description: '사용자와 소통하는 양방향 콘텐츠'
        },
        {
          title: '전세계 지원',
          description: '180개국 어디서나 이용 가능'
        }
      ]
    },
    contentTypes: {
      title: '다양한 콘텐츠 타입',
      subtitle: '취향에 맞는 여행 라디오를 선택하세요',
      items: [
        {
          title: '역사 이야기',
          description: '흥미진진한 역사적 배경과 이야기'
        },
        {
          title: '문화 탐방',
          description: '현지 문화와 전통을 깊이 있게'
        },
        {
          title: '맛집 투어',
          description: '현지인이 추천하는 진짜 맛집'
        },
        {
          title: '자연 여행',
          description: '아름다운 자연과 풍경 이야기'
        },
        {
          title: '예술 문화',
          description: '미술관과 문화 예술 체험'
        },
        {
          title: '현지 생활',
          description: '현지인의 일상과 생활 이야기'
        }
      ]
    },
    howToUse: {
      title: '투어라디오 사용법',
      subtitle: '간단한 3단계로 시작하세요',
      steps: [
        {
          title: '장소 선택',
          description: '방문하고 싶은 도시나 명소를 선택합니다'
        },
        {
          title: '취향 설정',
          description: '관심 있는 콘텐츠 타입을 선택합니다'
        },
        {
          title: '라디오 생성',
          description: 'AI가 맞춤형 투어라디오를 생성합니다'
        },
        {
          title: '여행 시작',
          description: '편안하게 들으며 특별한 여행을 시작하세요'
        }
      ]
    },
    testimonials: {
      title: '사용자 후기',
      subtitle: '투어라디오로 달라진 여행 경험',
      reviews: [
        {
          content: '정말 새로운 경험이었어요. 마치 현지 친구가 안내해주는 것 같았습니다.',
          author: '김지현, 파리 여행'
        },
        {
          content: '무료로 이런 퀄리티의 가이드를 들을 수 있다는 게 놀라워요.',
          author: '박민수, 로마 여행'
        },
        {
          content: '라디오 형식이라 정말 편하게 들으며 여행할 수 있었어요.',
          author: '이수진, 도쿄 여행'
        }
      ]
    },
    finalCta: {
      title: '지금 바로 투어라디오를 체험해보세요',
      description: '무료로 시작하는 새로운 여행 경험, 투어라디오와 함께 특별한 여행을 만들어보세요.',
      button: '무료 체험 시작하기'
    }
  },
  travelRadio: {
    metadata: {
      title: '여행라디오 - AI가 만드는 개인맞춤 여행방송',
      description: '스마트폰 화면 대신 귀로 듣는 새로운 여행! AI가 생성하는 개인맞춤 여행 라디오로 더 깊고 의미있는 여행을 경험하세요.',
      keyword: '여행라디오'
    },
    badge: '📻 AI 여행라디오',
    hero: {
      title: '귀로 듣는 여행의 혁명',
      subtitle: 'AI가 만드는 나만의 여행방송',
      description: '스마트폰 화면만 보는 여행은 그만! 마치 친구 같은 AI DJ가 들려주는 개인맞춤 여행 라디오로 더 깊이 있고 의미 있는 여행을 만나보세요.'
    },
    cta: {
      primary: '여행라디오 체험하기',
      secondary: '더 자세히 알아보기'
    },
    whyNeeded: {
      title: '왜 여행라디오가 필요할까요?',
      subtitle: '현대 여행의 문제점을 해결합니다',
      problems: [
        {
          title: '지루한 여행',
          description: '단조롭고 재미없는 여행 경험'
        },
        {
          title: '스마트폰 의존',
          description: '화면만 보며 놓치는 소중한 순간들'
        },
        {
          title: '높은 비용',
          description: '비싼 현지 가이드와 투어 비용'
        }
      ]
    },
    specialExperience: {
      title: '여행라디오만의 특별한 경험',
      subtitle: '전혀 새로운 방식으로 여행하세요',
      features: [
        {
          title: '라디오 DJ 스타일',
          description: '친근한 DJ가 들려주는 여행 이야기'
        },
        {
          title: '맞춤형 콘텐츠',
          description: '개인 취향에 맞는 여행 정보'
        },
        {
          title: '전세계 지원',
          description: '180개국 어디서나 이용 가능'
        },
        {
          title: '진짜 라디오',
          description: '실제 라디오 방송 같은 몰입감'
        },
        {
          title: '완전 무료',
          description: '모든 기능을 무료로 제공'
        },
        {
          title: '편안한 청취',
          description: '편안하게 들으며 즐기는 여행'
        }
      ]
    },
    radioTypes: {
      title: '다양한 여행라디오 장르',
      subtitle: '취향에 맞는 라디오를 선택하세요',
      categories: [
        {
          title: '역사 탐방',
          description: '유적지와 문화유산의 깊은 이야기'
        },
        {
          title: '자연 체험',
          description: '아름다운 자연과 풍경 이야기'
        },
        {
          title: '음식 문화',
          description: '현지 음식과 요리 문화 탐방'
        },
        {
          title: '예술 문화',
          description: '미술관과 문화 예술 체험'
        },
        {
          title: '도시 탐방',
          description: '현대적인 도시의 매력 발견'
        },
        {
          title: '야경 투어',
          description: '밤에 펼쳐지는 특별한 풍경'
        }
      ]
    },
    howToListen: {
      title: '여행라디오 듣는 방법',
      subtitle: '쉽고 간단한 4단계',
      steps: [
        {
          title: '목적지 선택',
          description: '여행할 도시나 장소를 선택합니다'
        },
        {
          title: '테마 선택',
          description: '관심 있는 여행 테마를 선택합니다'
        },
        {
          title: '라디오 생성',
          description: 'AI가 맞춤형 라디오를 제작합니다'
        },
        {
          title: '여행 청취',
          description: '편안하게 들으며 여행을 즐깁니다'
        }
      ]
    },
    testimonials: {
      title: '여행라디오 경험담',
      subtitle: '실제 사용자들의 생생한 후기',
      reviews: [
        {
          content: '정말 특별한 여행 경험이었어요. 마치 현지 친구가 안내해주는 것 같았습니다.',
          author: '김지현, 파리 여행'
        },
        {
          content: '무료로 이런 퀄리티의 가이드를 들을 수 있다는 게 놀라워요.',
          author: '박민수, 로마 여행'
        },
        {
          content: '라디오 형식이라 정말 편하게 들으며 여행할 수 있었어요.',
          author: '이수진, 도쿄 여행'
        }
      ]
    },
    finalCta: {
      title: '지금 바로 여행라디오를 시작하세요',
      description: '스마트폰을 잠시 내려놓고, 귀로 듣는 새로운 여행의 세계를 경험해보세요.',
      button: '무료로 시작하기'
    }
  }
};

// Context 타입
interface LanguageContextType {
  currentLanguage: SupportedLanguage;
  currentConfig: LanguageConfig;
  setLanguage: (language: SupportedLanguage) => void;
  t: (key: string, params?: Record<string, string>) => string | string[];
  translations: Translations;
  isLoading: boolean;
  isRTL: boolean;
  detectBrowserLanguage: () => SupportedLanguage;
  detectionInfo: LanguageDetectionResult | null;
  showDetectionNotice: boolean;
  hideDetectionNotice: () => void;
}

// Context 생성
const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

// 브라우저 언어 감지 함수
const detectBrowserLanguage = (): SupportedLanguage => {
  if (typeof window === 'undefined') return 'ko';
  
  const browserLang = navigator.language.toLowerCase();
  const langCode = browserLang.split('-')[0];
  
  const supportedCodes = SUPPORTED_LANGUAGES.map(lang => lang?.code).filter(Boolean);
  return supportedCodes.includes(langCode as SupportedLanguage) 
    ? langCode as SupportedLanguage 
    : 'ko';
};

// 번역 데이터 로드 함수
async function loadTranslations(language: SupportedLanguage): Promise<Translations> {
  try {
    // 🔥 캐시 무효화를 위한 버전 관리 (강화된 캐시 우회)
    const TRANSLATION_VERSION = '1.3.0'; // footer 구조 수정
    const cacheKey = `translations-${language}-v${TRANSLATION_VERSION}`;
    
    // 🔥 강제 로딩 모드 확인 (언어 변경 시)
    const forceReload = (globalThis as any)?.__forceTranslationReload || false;
    
    // 🔥 기존 캐시 정리 (버전이 다른 경우 또는 강제 로딩)
    if (typeof window !== 'undefined') {
      // 이전 버전 캐시들 정리
      const keysToRemove: string[] = [];
      for (let i = 0; i < sessionStorage.length; i++) {
        const key = sessionStorage.key(i);
        if (key && key.startsWith(`translations-${language}-`) && (key !== cacheKey || forceReload)) {
          keysToRemove.push(key);
        }
      }
      keysToRemove.forEach(key => sessionStorage.removeItem(key));
      
      // 새 버전 캐시 확인 (강제 로딩이 아닌 경우만)
      if (!forceReload) {
        const cached = sessionStorage.getItem(cacheKey);
        if (cached) {
          try {
            const parsedCache = JSON.parse(cached);
            console.log(`✅ 캐시에서 ${language} 번역 로드 (v${TRANSLATION_VERSION})`);
            return parsedCache;
          } catch (parseError) {
            console.warn('캐시 파싱 오류, 새로 로드:', parseError);
            sessionStorage.removeItem(cacheKey);
          }
        }
      } else {
        console.log(`🔄 강제 로딩 모드: ${language} 번역 새로 로드`);
      }
    }

    // 🔥 번역 파일 로딩 (캐시 전략 개선)
    const response = await fetch(`/locales/translations.json?v=${TRANSLATION_VERSION}`, {
      cache: 'default', // 브라우저 캐시 활용하되 버전으로 무효화
      headers: {
        'Accept': 'application/json'
      }
    });
    
    if (!response.ok) {
      console.warn('번역 파일 로드 실패, 기본값 사용');
      return DEFAULT_TRANSLATIONS;
    }
    
    const allTranslations = await response.json();
    const translations = allTranslations[language] || allTranslations['ko'];
    
    // 🔥 디버그: 실제 로딩된 번역 구조 확인
    console.log(`🔍 [${language}] tripPlanner exists:`, !!translations?.tripPlanner);
    console.log(`🔍 [${language}] tripTypes exists:`, !!translations?.tripTypes);
    console.log(`🔍 [${language}] home exists:`, !!translations?.home);
    console.log(`🔍 [${language}] home.viewMoreAttractions:`, translations?.home?.viewMoreAttractions);
    if (language === 'ko') {
      console.log(`🔍 [${language}] home keys:`, translations?.home ? Object.keys(translations.home) : 'no home');
      console.log(`🔍 [${language}] tripPlanner.quickPlanner.title:`, translations?.tripPlanner?.quickPlanner?.title);
      console.log(`🔍 [${language}] tripTypes.solo.name:`, translations?.tripTypes?.solo?.name);
    }
    
    // 안전성 보장 (모든 새로운 필드들 포함)
    const safeTranslations: Translations = {
      ...DEFAULT_TRANSLATIONS,
      ...translations,
      header: {
        ...DEFAULT_TRANSLATIONS.header,
        ...(translations?.header || {})
      },
      navigation: {
        ...DEFAULT_TRANSLATIONS.navigation,
        ...(translations?.navigation || {})
      },
      home: {
        ...DEFAULT_TRANSLATIONS.home,
        ...(translations?.home || {}),
        stepTitles: {
          ...DEFAULT_TRANSLATIONS.home.stepTitles,
          ...(translations?.home?.stepTitles || {})
        },
        stepDescriptions: {
          ...DEFAULT_TRANSLATIONS.home.stepDescriptions,
          ...(translations?.home?.stepDescriptions || {})
        },
        regionTitles: {
          ...DEFAULT_TRANSLATIONS.home.regionTitles,
          ...(translations?.home?.regionTitles || {})
        },
        features: {
          ...DEFAULT_TRANSLATIONS.home.features,
          ...(translations?.home?.features || {})
        },
        countries: {
          ...DEFAULT_TRANSLATIONS.home.countries,
          ...(translations?.home?.countries || {})
        }
      },
      guide: {
        ...DEFAULT_TRANSLATIONS.guide,
        ...(translations?.guide || {})
      },
      search: {
        ...DEFAULT_TRANSLATIONS.search,
        ...(translations?.search || {})
      },
      errors: {
        ...DEFAULT_TRANSLATIONS.errors,
        ...(translations?.errors || {})
      },
      common: {
        ...DEFAULT_TRANSLATIONS.common,
        ...(translations?.common || {})
      },
      date: {
        ...DEFAULT_TRANSLATIONS.date,
        ...(translations?.date || {})
      },
      profile: {
        ...DEFAULT_TRANSLATIONS.profile,
        ...(translations?.profile || {})
      },
      mypage: {
        ...DEFAULT_TRANSLATIONS.mypage,
        ...(translations?.mypage || {})
      },
      auth: {
        ...DEFAULT_TRANSLATIONS.auth,
        ...(translations?.auth || {})
      },
      buttons: {
        ...DEFAULT_TRANSLATIONS.buttons,
        ...(translations?.buttons || {})
      },
      languages: {
        ...DEFAULT_TRANSLATIONS.languages,
        ...(translations?.languages || {})
      },
      audio: {
        ...DEFAULT_TRANSLATIONS.audio,
        ...(translations?.audio || {})
      },
      history: {
        ...DEFAULT_TRANSLATIONS.history,
        ...(translations?.history || {})
      },
      aiTravel: {
        ...DEFAULT_TRANSLATIONS.aiTravel,
        ...(translations?.aiTravel || {})
      },
      audioGuide: {
        ...DEFAULT_TRANSLATIONS.audioGuide,
        ...(translations?.audioGuide || {})
      },
      filmLocations: {
        ...DEFAULT_TRANSLATIONS.filmLocations,
        ...(translations?.filmLocations || {})
      },
      docent: {
        ...DEFAULT_TRANSLATIONS.docent,
        ...(translations?.docent || {})
      },
      legal: {
        ...DEFAULT_TRANSLATIONS.legal,
        ...(translations?.legal || {}),
        terms: {
          ...DEFAULT_TRANSLATIONS.legal.terms,
          ...(translations?.legal?.terms || {})
        },
        privacy: {
          ...DEFAULT_TRANSLATIONS.legal.privacy,
          ...(translations?.legal?.privacy || {})
        }
      },
      // 🔥 tripPlanner 필드 추가 (깊은 병합)
      tripPlanner: {
        ...DEFAULT_TRANSLATIONS.tripPlanner,
        ...(translations?.tripPlanner || {}),
        // 중첩 객체들 명시적 병합
        hero: {
          ...DEFAULT_TRANSLATIONS.tripPlanner.hero,
          ...(translations?.tripPlanner?.hero || {})
        },
        tabs: {
          ...DEFAULT_TRANSLATIONS.tripPlanner.tabs,
          ...(translations?.tripPlanner?.tabs || {})
        },
        quickPlanner: {
          ...DEFAULT_TRANSLATIONS.tripPlanner.quickPlanner,
          ...(translations?.tripPlanner?.quickPlanner || {})
        },
        steps: {
          ...DEFAULT_TRANSLATIONS.tripPlanner.steps,
          ...(translations?.tripPlanner?.steps || {})
        },
        form: {
          ...DEFAULT_TRANSLATIONS.tripPlanner.form,
          ...(translations?.tripPlanner?.form || {}),
          durationOptions: {
            ...DEFAULT_TRANSLATIONS.tripPlanner.form.durationOptions,
            ...(translations?.tripPlanner?.form?.durationOptions || {})
          },
          budgetOptions: {
            ...DEFAULT_TRANSLATIONS.tripPlanner.form.budgetOptions,
            ...(translations?.tripPlanner?.form?.budgetOptions || {})
          },
          interestOptions: {
            ...DEFAULT_TRANSLATIONS.tripPlanner.form.interestOptions,
            ...(translations?.tripPlanner?.form?.interestOptions || {})
          }
        },
        audioGuideIntegration: {
          ...DEFAULT_TRANSLATIONS.tripPlanner.audioGuideIntegration,
          ...(translations?.tripPlanner?.audioGuideIntegration || {}),
          title: {
            ...DEFAULT_TRANSLATIONS.tripPlanner.audioGuideIntegration.title,
            ...(translations?.tripPlanner?.audioGuideIntegration?.title || {})
          },
          features: {
            ...DEFAULT_TRANSLATIONS.tripPlanner.audioGuideIntegration.features,
            ...(translations?.tripPlanner?.audioGuideIntegration?.features || {}),
            autoStart: {
              ...DEFAULT_TRANSLATIONS.tripPlanner.audioGuideIntegration.features.autoStart,
              ...(translations?.tripPlanner?.audioGuideIntegration?.features?.autoStart || {})
            },
            personalized: {
              ...DEFAULT_TRANSLATIONS.tripPlanner.audioGuideIntegration.features.personalized,
              ...(translations?.tripPlanner?.audioGuideIntegration?.features?.personalized || {})
            },
            realtimeUpdate: {
              ...DEFAULT_TRANSLATIONS.tripPlanner.audioGuideIntegration.features.realtimeUpdate,
              ...(translations?.tripPlanner?.audioGuideIntegration?.features?.realtimeUpdate || {})
            }
          }
        },
        // 누락된 섹션들 추가
        destinations: {
          ...DEFAULT_TRANSLATIONS.tripPlanner.destinations,
          ...(translations?.tripPlanner?.destinations || {}),
          // 중첩된 객체들도 명시적으로 병합
          cities: {
            ...(DEFAULT_TRANSLATIONS.tripPlanner.destinations?.cities || {}),
            ...(translations?.tripPlanner?.destinations?.cities || {})
          },
          countries: {
            ...(DEFAULT_TRANSLATIONS.tripPlanner.destinations?.countries || {}),
            ...(translations?.tripPlanner?.destinations?.countries || {})
          },
          attractions: {
            ...(DEFAULT_TRANSLATIONS.tripPlanner.destinations?.attractions || {}),
            ...(translations?.tripPlanner?.destinations?.attractions || {})
          }
        },
        labels: {
          ...DEFAULT_TRANSLATIONS.tripPlanner.labels,
          ...(translations?.tripPlanner?.labels || {})
        },
        aiFeatures: {
          ...DEFAULT_TRANSLATIONS.tripPlanner.aiFeatures,
          ...(translations?.tripPlanner?.aiFeatures || {}),
          customized: {
            ...DEFAULT_TRANSLATIONS.tripPlanner.aiFeatures.customized,
            ...(translations?.tripPlanner?.aiFeatures?.customized || {})
          },
          realtime: {
            ...DEFAULT_TRANSLATIONS.tripPlanner.aiFeatures.realtime,
            ...(translations?.tripPlanner?.aiFeatures?.realtime || {})
          },
          detailedInfo: {
            ...DEFAULT_TRANSLATIONS.tripPlanner.aiFeatures.detailedInfo,
            ...(translations?.tripPlanner?.aiFeatures?.detailedInfo || {})
          },
          budgetManagement: {
            ...DEFAULT_TRANSLATIONS.tripPlanner.aiFeatures.budgetManagement,
            ...(translations?.tripPlanner?.aiFeatures?.budgetManagement || {})
          },
          mobileOptimized: {
            ...DEFAULT_TRANSLATIONS.tripPlanner.aiFeatures.mobileOptimized,
            ...(translations?.tripPlanner?.aiFeatures?.mobileOptimized || {})
          },
          audioGuide: {
            ...DEFAULT_TRANSLATIONS.tripPlanner.aiFeatures.audioGuide,
            ...(translations?.tripPlanner?.aiFeatures?.audioGuide || {})
          }
        },
        popularDestinations: {
          ...DEFAULT_TRANSLATIONS.tripPlanner.popularDestinations,
          ...(translations?.tripPlanner?.popularDestinations || {})
        },
        personalization: {
          ...DEFAULT_TRANSLATIONS.tripPlanner.personalization,
          ...(translations?.tripPlanner?.personalization || {})
        },
        savedPlans: {
          ...DEFAULT_TRANSLATIONS.tripPlanner.savedPlans,
          ...(translations?.tripPlanner?.savedPlans || {})
        },
        generatedPlan: {
          ...DEFAULT_TRANSLATIONS.tripPlanner.generatedPlan,
          ...(translations?.tripPlanner?.generatedPlan || {})
        },
        alerts: {
          ...DEFAULT_TRANSLATIONS.tripPlanner.alerts,
          ...(translations?.tripPlanner?.alerts || {})
        },
        defaults: {
          ...DEFAULT_TRANSLATIONS.tripPlanner.defaults,
          ...(translations?.tripPlanner?.defaults || {})
        },
        metadata: {
          ...DEFAULT_TRANSLATIONS.tripPlanner.metadata,
          ...(translations?.tripPlanner?.metadata || {})
        },
        features: {
          ...DEFAULT_TRANSLATIONS.tripPlanner.features,
          ...(translations?.tripPlanner?.features || {})
        },
        keyword: translations?.tripPlanner?.keyword || DEFAULT_TRANSLATIONS.tripPlanner.keyword,
        badge: translations?.tripPlanner?.badge || DEFAULT_TRANSLATIONS.tripPlanner.badge
      },
      // 🔥 tripTypes 필드 추가
      tripTypes: {
        ...DEFAULT_TRANSLATIONS.tripTypes,
        ...(translations?.tripTypes || {}),
        solo: {
          ...DEFAULT_TRANSLATIONS.tripTypes.solo,
          ...(translations?.tripTypes?.solo || {}),
          features: {
            ...DEFAULT_TRANSLATIONS.tripTypes.solo.features,
            ...(translations?.tripTypes?.solo?.features || {})
          }
        },
        couple: {
          ...DEFAULT_TRANSLATIONS.tripTypes.couple,
          ...(translations?.tripTypes?.couple || {}),
          features: {
            ...DEFAULT_TRANSLATIONS.tripTypes.couple.features,
            ...(translations?.tripTypes?.couple?.features || {})
          }
        },
        family: {
          ...DEFAULT_TRANSLATIONS.tripTypes.family,
          ...(translations?.tripTypes?.family || {}),
          features: {
            ...DEFAULT_TRANSLATIONS.tripTypes.family.features,
            ...(translations?.tripTypes?.family?.features || {})
          }
        },
        friends: {
          ...DEFAULT_TRANSLATIONS.tripTypes.friends,
          ...(translations?.tripTypes?.friends || {}),
          features: {
            ...DEFAULT_TRANSLATIONS.tripTypes.friends.features,
            ...(translations?.tripTypes?.friends?.features || {})
          }
        },
        nomad: {
          ...DEFAULT_TRANSLATIONS.tripTypes.nomad,
          ...(translations?.tripTypes?.nomad || {}),
          features: {
            ...DEFAULT_TRANSLATIONS.tripTypes.nomad.features,
            ...(translations?.tripTypes?.nomad?.features || {})
          }
        }
      },
      // 🔥 tourRadio 필드 추가
      tourRadio: {
        ...DEFAULT_TRANSLATIONS.tourRadio,
        ...(translations?.tourRadio || {}),
        metadata: {
          ...DEFAULT_TRANSLATIONS.tourRadio.metadata,
          ...(translations?.tourRadio?.metadata || {})
        },
        hero: {
          ...DEFAULT_TRANSLATIONS.tourRadio.hero,
          ...(translations?.tourRadio?.hero || {})
        },
        cta: {
          ...DEFAULT_TRANSLATIONS.tourRadio.cta,
          ...(translations?.tourRadio?.cta || {})
        },
        problems: {
          ...DEFAULT_TRANSLATIONS.tourRadio.problems,
          ...(translations?.tourRadio?.problems || {}),
          items: translations?.tourRadio?.problems?.items || DEFAULT_TRANSLATIONS.tourRadio.problems.items
        },
        radioFeatures: {
          ...DEFAULT_TRANSLATIONS.tourRadio.radioFeatures,
          ...(translations?.tourRadio?.radioFeatures || {}),
          features: translations?.tourRadio?.radioFeatures?.features || DEFAULT_TRANSLATIONS.tourRadio.radioFeatures.features
        },
        contentTypes: {
          ...DEFAULT_TRANSLATIONS.tourRadio.contentTypes,
          ...(translations?.tourRadio?.contentTypes || {}),
          items: translations?.tourRadio?.contentTypes?.items || DEFAULT_TRANSLATIONS.tourRadio.contentTypes.items
        },
        howToUse: {
          ...DEFAULT_TRANSLATIONS.tourRadio.howToUse,
          ...(translations?.tourRadio?.howToUse || {}),
          steps: translations?.tourRadio?.howToUse?.steps || DEFAULT_TRANSLATIONS.tourRadio.howToUse.steps
        },
        testimonials: {
          ...DEFAULT_TRANSLATIONS.tourRadio.testimonials,
          ...(translations?.tourRadio?.testimonials || {}),
          reviews: translations?.tourRadio?.testimonials?.reviews || DEFAULT_TRANSLATIONS.tourRadio.testimonials.reviews
        },
        finalCta: {
          ...DEFAULT_TRANSLATIONS.tourRadio.finalCta,
          ...(translations?.tourRadio?.finalCta || {})
        }
      },
      // 🔥 travelRadio 필드 추가
      travelRadio: {
        ...DEFAULT_TRANSLATIONS.travelRadio,
        ...(translations?.travelRadio || {}),
        metadata: {
          ...DEFAULT_TRANSLATIONS.travelRadio.metadata,
          ...(translations?.travelRadio?.metadata || {})
        },
        hero: {
          ...DEFAULT_TRANSLATIONS.travelRadio.hero,
          ...(translations?.travelRadio?.hero || {})
        },
        cta: {
          ...DEFAULT_TRANSLATIONS.travelRadio.cta,
          ...(translations?.travelRadio?.cta || {})
        },
        whyNeeded: {
          ...DEFAULT_TRANSLATIONS.travelRadio.whyNeeded,
          ...(translations?.travelRadio?.whyNeeded || {}),
          problems: translations?.travelRadio?.whyNeeded?.problems || DEFAULT_TRANSLATIONS.travelRadio.whyNeeded.problems
        },
        specialExperience: {
          ...DEFAULT_TRANSLATIONS.travelRadio.specialExperience,
          ...(translations?.travelRadio?.specialExperience || {}),
          features: translations?.travelRadio?.specialExperience?.features || DEFAULT_TRANSLATIONS.travelRadio.specialExperience.features
        },
        radioTypes: {
          ...DEFAULT_TRANSLATIONS.travelRadio.radioTypes,
          ...(translations?.travelRadio?.radioTypes || {}),
          categories: translations?.travelRadio?.radioTypes?.categories || DEFAULT_TRANSLATIONS.travelRadio.radioTypes.categories
        },
        howToListen: {
          ...DEFAULT_TRANSLATIONS.travelRadio.howToListen,
          ...(translations?.travelRadio?.howToListen || {}),
          steps: translations?.travelRadio?.howToListen?.steps || DEFAULT_TRANSLATIONS.travelRadio.howToListen.steps
        },
        testimonials: {
          ...DEFAULT_TRANSLATIONS.travelRadio.testimonials,
          ...(translations?.travelRadio?.testimonials || {}),
          reviews: translations?.travelRadio?.testimonials?.reviews || DEFAULT_TRANSLATIONS.travelRadio.testimonials.reviews
        },
        finalCta: {
          ...DEFAULT_TRANSLATIONS.travelRadio.finalCta,
          ...(translations?.travelRadio?.finalCta || {})
        }
      },
      // 🔥 footer 필드 추가 (누락된 중요 섹션)
      footer: {
        ...DEFAULT_TRANSLATIONS.footer,
        ...(translations?.footer || {}),
        services: {
          ...DEFAULT_TRANSLATIONS.footer.services,
          ...(translations?.footer?.services || {})
        },
        tools: {
          ...DEFAULT_TRANSLATIONS.footer.tools,
          ...(translations?.footer?.tools || {})
        }
      }
    };
    
    // 🔥 새 버전으로 세션 스토리지에 캐시 저장
    if (typeof window !== 'undefined') {
      try {
        sessionStorage.setItem(cacheKey, JSON.stringify(safeTranslations));
        console.log(`💾 ${language} 번역 캐시 저장 (v${TRANSLATION_VERSION})`);
      } catch (storageError) {
        console.warn('세션 스토리지 저장 실패:', storageError);
      }
    }
    
    console.log(`✅ ${language} 번역 파일 로드 완료 (v${TRANSLATION_VERSION})`);
    return safeTranslations;
    
  } catch (error) {
    console.error(`${language} 번역 로드 오류:`, error);
    return DEFAULT_TRANSLATIONS;
  }
}

// Provider 컴포넌트
export function LanguageProvider({ children }: { children: React.ReactNode }) {
  const [currentLanguage, setCurrentLanguage] = useState<SupportedLanguage>('ko');
  const [translations, setTranslations] = useState<Translations>(DEFAULT_TRANSLATIONS);
  const [isLoading, setIsLoading] = useState(false);
  const [detectionInfo, setDetectionInfo] = useState<LanguageDetectionResult | null>(null);
  const [showDetectionNotice, setShowDetectionNotice] = useState(false);

  // 현재 언어 설정 가져오기 (안전한 접근)
  const currentConfig = SUPPORTED_LANGUAGES.find(lang => lang?.code === currentLanguage) || SUPPORTED_LANGUAGES[0] || {
    code: 'ko',
    name: '한국어',
    flag: '🇰🇷',
    nativeName: '한국어',
    dir: 'ltr',
    fontFamily: 'var(--font-noto-sans-kr)',
    ttsLang: 'ko-KR'
  };
  const isRTL = currentConfig?.dir === 'rtl';

  // 🔥 개선된 언어 변경 함수 (번역 로딩 완료 후 UI 업데이트)
  const setLanguage = useCallback(async (language: SupportedLanguage) => {
    if (language === currentLanguage) return;
    
    setIsLoading(true);
    const previousLanguage = currentLanguage;
    
    try {
      console.log(`🔄 언어 변경 시작: ${currentLanguage} → ${language}`);
      
      // 🔥 1단계: 캐시 무효화 및 강제 로딩 플래그 설정
      if (typeof window !== 'undefined') {
        // 강제 로딩 플래그 설정
        (globalThis as any).__forceTranslationReload = true;
        
        // 기존 캐시 모두 정리
        const keysToRemove: string[] = [];
        for (let i = 0; i < sessionStorage.length; i++) {
          const key = sessionStorage.key(i);
          if (key && key.startsWith('translations-')) {
            keysToRemove.push(key);
          }
        }
        keysToRemove.forEach(key => sessionStorage.removeItem(key));
        console.log(`🗑️ 캐시 정리 완료: ${keysToRemove.length}개 항목 삭제`);
      }
      
      // 🔥 2단계: 새 번역 파일 강제 로딩 (캐시 우회)
      const newTranslations = await loadTranslations(language);
      
      // 강제 로딩 플래그 해제
      if (typeof window !== 'undefined') {
        (globalThis as any).__forceTranslationReload = false;
      }
      
      // 🔥 3단계: URL 처리 (번역 로딩 완료 후)
      if (typeof window !== 'undefined') {
        const currentPath = window.location.pathname;
        const newGuideUrlMatch = currentPath.match(/^\/guide\/([a-z]{2})\/(.+)$/);
        const oldGuideUrlMatch = currentPath.match(/^\/guide\/(.+)$/);
        
        if (newGuideUrlMatch) {
          // 이미 새로운 구조: /guide/[language]/[location]
          const [, currentLang, location] = newGuideUrlMatch;
          if (currentLang !== language) {
            let targetLocation = location;
            
            // 🌐 location 이름 번역 처리
            if (currentLang === 'ko') {
              // 한국어 → 다른 언어: 번역 시도
              const translatedLocation = translateLocationFromKorean(decodeURIComponent(location), language);
              if (translatedLocation) {
                targetLocation = encodeURIComponent(translatedLocation);
              }
            } else if (language === 'ko') {
              // 다른 언어 → 한국어: 역매핑 시도  
              const koreanLocation = mapLocationToKorean(decodeURIComponent(location));
              if (koreanLocation) {
                targetLocation = encodeURIComponent(koreanLocation);
              }
            } else {
              // 다른 언어 → 다른 언어: 한국어를 거쳐서 번역
              const koreanLocation = mapLocationToKorean(decodeURIComponent(location));
              if (koreanLocation) {
                const translatedLocation = translateLocationFromKorean(koreanLocation, language);
                if (translatedLocation) {
                  targetLocation = encodeURIComponent(translatedLocation);
                }
              }
            }
            
            const newUrl = `/guide/${language}/${targetLocation}${window.location.search}`;
            console.log(`🔄 언어 변경 URL 업데이트: ${currentPath} → ${newUrl}`);
            window.history.pushState(null, '', newUrl);
          }
        } else if (oldGuideUrlMatch && !currentPath.includes('/api/')) {
          // 기존 구조 또는 다른 페이지: 미들웨어에서 처리하도록 새로고침
          window.location.reload();
          return;
        }
      }
      
      // 🔥 4단계: 번역과 언어 상태를 동시에 업데이트 (원자적 업데이트)
      setTranslations(newTranslations);
      setCurrentLanguage(language);
      
      // 🔥 5단계: 쿠키와 localStorage 동기화
      if (typeof window !== 'undefined') {
        localStorage.setItem('preferred-language', language);
        setLanguageCookie(language);
        
        // 🔧 수동 언어 변경 플래그 설정 (자동 감지 알림 방지)
        sessionStorage.setItem('manual-language-change', 'true');
        
        // 🔄 감지 알림 숨김 처리
        setShowDetectionNotice(false);
        setDetectionInfo(null);
        
        // 🔥 전역 리렌더링 이벤트 발생 (모든 컴포넌트 강제 업데이트)
        window.dispatchEvent(new CustomEvent('languageChanged', { 
          detail: { 
            previousLanguage, 
            newLanguage: language,
            translations: newTranslations
          } 
        }));
      }
      
      console.log(`✅ 언어 변경 완료: ${language} (번역 로딩 완료 후 원자적 업데이트)`);
    } catch (error) {
      console.error('언어 변경 오류:', error);
      // 에러 발생시 이전 언어로 롤백
      setCurrentLanguage(previousLanguage);
      
      // 이전 번역도 다시 로딩 시도
      try {
        const fallbackTranslations = await loadTranslations(previousLanguage);
        setTranslations(fallbackTranslations);
      } catch (rollbackError) {
        console.error('롤백 중 오류:', rollbackError);
        // 기본 번역으로 폴백
        setTranslations(DEFAULT_TRANSLATIONS);
      }
    } finally {
      setIsLoading(false);
    }
  }, [currentLanguage]);

  // 🔥 개선된 초기 언어 설정 (통합 우선순위 시스템)
  useEffect(() => {
    const initializeLanguage = async () => {
      if (typeof window === 'undefined') return;
      
      // 🔥 통합 언어 감지 시스템 사용
      const urlParams = new URLSearchParams(window.location.search);
      const urlLang = urlParams.get('lang');
      const cookieLanguage = getLanguageCookie();
      const storageLanguage = localStorage.getItem('preferred-language');
      const browserLanguage = navigator.language;
      
      const initialLanguage = detectPreferredLanguage({
        cookieValue: cookieLanguage || undefined,
        storageValue: storageLanguage || undefined,
        urlLang: urlLang || undefined,
        browserLang: browserLanguage
      }) as SupportedLanguage;
      
      // 🔧 서버와 일치하는 언어로 설정
      setCurrentLanguage(initialLanguage);
      
      // 🔥 초기 번역 파일 로딩과 동기화를 병렬 처리
      const [initialTranslations] = await Promise.all([
        loadTranslations(initialLanguage),
        // 쿠키와 localStorage 동기화 (초기화 시에도)
        (async () => {
          localStorage.setItem('preferred-language', initialLanguage);
          setLanguageCookie(initialLanguage);
        })()
      ]);
      
      setTranslations(initialTranslations);
      
      console.log(`✅ 언어 초기화 완료: ${initialLanguage} (서버-클라이언트 동기화)`);
    };

    initializeLanguage();
  }, []); // 🔥 의존성 배열: 초기화는 한 번만 실행

  // 🌍 Middleware에서 설정한 언어 감지 정보 처리
  useEffect(() => {
    if (typeof window === 'undefined') return;

    const handleLanguageDetection = () => {
      // Middleware에서 설정한 언어 감지 정보 쿠키 확인
      const detectionInfoCookie = document.cookie
        .split('; ')
        .find(row => row.startsWith('language-detection-info='));
      
      if (detectionInfoCookie) {
        try {
          const detectionInfoValue = decodeURIComponent(detectionInfoCookie.split('=')[1]);
          const detectionResult: LanguageDetectionResult = JSON.parse(detectionInfoValue);
          
          console.log('🌍 Middleware 언어 감지 정보 수신:', detectionResult);
          
          // 감지 정보 설정
          setDetectionInfo(detectionResult);
          setShowDetectionNotice(true);
          
          // 언어 설정 업데이트 (Middleware에서 이미 설정했지만 React 상태 동기화)
          if (detectionResult.language !== currentLanguage) {
            setCurrentLanguage(detectionResult.language as SupportedLanguage);
          }
          
          console.log('🔔 언어 자동 감지 알림 표시:', detectionResult);
          
          // 감지 정보 쿠키 삭제 (일회성 정보)
          document.cookie = 'language-detection-info=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
          
          // 5초 후 자동으로 알림 숨김
          setTimeout(() => {
            setShowDetectionNotice(false);
          }, 5000);
          
        } catch (error) {
          console.error('❌ 언어 감지 정보 파싱 오류:', error);
        }
      }
    };

    // 페이지 로드 시 감지 정보 확인
    handleLanguageDetection();
    
    // URL 변경 시 감지 정보 확인
    window.addEventListener('popstate', handleLanguageDetection);
    
    return () => {
      window.removeEventListener('popstate', handleLanguageDetection);
    };
  }, [currentLanguage]);

  // 감지 알림 숨김 함수
  const hideDetectionNotice = useCallback(() => {
    setShowDetectionNotice(false);
  }, []);

  // 번역 함수
  const t = (key: string, params?: Record<string, string>): string | string[] => {
    const keys = key.split('.');
    let value: any = translations;
    
    // 🔥 디버그 로그 추가
    const debugLog = process.env.NODE_ENV === 'development';
    
    // 🔥 특별 디버깅: home.viewMoreAttractions
    if (key === 'home.viewMoreAttractions' && debugLog) {
      console.log('🔍 Special debug for home.viewMoreAttractions:', {
        translations: !!translations,
        home: !!translations?.home,
        hasViewMoreAttractions: translations?.home && 'viewMoreAttractions' in translations.home,
        value: translations?.home?.viewMoreAttractions,
        homeKeys: translations?.home ? Object.keys(translations.home) : 'no home'
      });
    }
    
    for (const k of keys) {
      if (value && typeof value === 'object' && k in value) {
        value = value[k];
      } else {
        if (debugLog) {
          console.warn(`❌ Translation key not found: ${key} (stopped at: ${k})`, {
            currentLanguage,
            availableKeys: value && typeof value === 'object' ? Object.keys(value) : 'not object',
            translations: Object.keys(translations),
            path: keys
          });
        }
        
        // 🔥 fallback 처리 개선
        // 1. 현재 언어의 번역에서 다시 한번 전체 경로로 시도
        if (translations) {
          const fullTranslations = translations as any;
          const fallbackKeys = key.split('.');
          let fallbackValue: any = fullTranslations;
          
          for (const fk of fallbackKeys) {
            if (fallbackValue && typeof fallbackValue === 'object' && fk in fallbackValue) {
              fallbackValue = fallbackValue[fk];
            } else {
              fallbackValue = null;
              break;
            }
          }
          
          if (fallbackValue && typeof fallbackValue === 'string') {
            if (debugLog) {
              console.log(`✅ Fallback found for ${key}: ${fallbackValue}`);
            }
            return fallbackValue;
          }
        }
        
        // 2. 마지막 키 부분만 반환 (사용자 친화적)
        const lastKey = keys[keys.length - 1];
        const friendlyFallback = lastKey.replace(/([A-Z])/g, ' $1').toLowerCase();
        
        if (debugLog) {
          console.log(`🔄 Using friendly fallback for ${key}: ${friendlyFallback}`);
        }
        
        return friendlyFallback;
      }
    }
    
    // 매개변수가 있고 value가 문자열이면 치환
    if (params && typeof value === 'string') {
      let result = value;
      for (const [paramKey, paramValue] of Object.entries(params)) {
        result = result.replace(new RegExp(`\\{${paramKey}\\}`, 'g'), paramValue);
      }
      return result;
    }
    
    return value; // 원래 값 그대로 반환 (string 또는 array)
  };

  const contextValue: LanguageContextType = {
    currentLanguage,
    currentConfig,
    setLanguage,
    t,
    translations,
    isLoading,
    isRTL,
    detectBrowserLanguage,
    detectionInfo,
    showDetectionNotice,
    hideDetectionNotice
  };

  return (
    <LanguageContext.Provider value={contextValue}>
      {children}
    </LanguageContext.Provider>
  );
}

// Hook
export const useLanguage = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};