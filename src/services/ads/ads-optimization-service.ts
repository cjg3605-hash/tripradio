/**
 * Ads Optimization Service
 * AdSense ads.txt 파일 생성 및 광고 최적화 서비스
 */

export interface AdsTxtEntry {
  domain: string;
  publisherAccountId: string;
  relationshipType: 'DIRECT' | 'RESELLER';
  certificationAuthorityId?: string;
}

export interface AdSenseConfig {
  publisherId: string;
  adClientId: string;
  siteId?: string;
  autoAdsEnabled: boolean;
  adFormats: AdFormat[];
  targetingOptions: TargetingOptions;
}

export interface AdFormat {
  name: string;
  size: string;
  type: 'display' | 'text' | 'responsive' | 'in-article' | 'in-feed' | 'matched-content';
  enabled: boolean;
  placement: 'header' | 'sidebar' | 'content' | 'footer' | 'in-content';
}

export interface TargetingOptions {
  geographical: string[];
  demographic: {
    ageGroups: string[];
    interests: string[];
  };
  contextual: {
    keywords: string[];
    categories: string[];
  };
  behavioral: {
    enablePersonalization: boolean;
    enableRemarketingLists: boolean;
  };
}

export interface AdPerformanceMetrics {
  impressions: number;
  clicks: number;
  clickThroughRate: number;
  costPerClick: number;
  revenue: number;
  fillRate: number;
  viewability: number;
  invalidTraffic: number;
}

export interface AdOptimizationRecommendations {
  adPlacementSuggestions: string[];
  contentOptimizations: string[];
  performanceImprovements: string[];
  policyCompliance: string[];
  revenueOptimizations: string[];
}

/**
 * AdSense 승인 및 광고 수익 최적화 서비스
 */
export class AdsOptimizationService {
  private static instance: AdsOptimizationService;
  private adSenseConfig: AdSenseConfig;
  private performanceData = new Map<string, AdPerformanceMetrics>();

  static getInstance(): AdsOptimizationService {
    if (!this.instance) {
      this.instance = new AdsOptimizationService();
    }
    return this.instance;
  }

  constructor() {
    this.adSenseConfig = this.getDefaultAdSenseConfig();
  }

  /**
   * ads.txt 파일 생성
   */
  generateAdsTxt(): string {
    // 실제 Google AdSense Publisher ID 사용
    const publisherId = process.env.ADSENSE_PUBLISHER_ID || 'pub-8225961966676319';
    
    const entries: AdsTxtEntry[] = [
      {
        domain: 'google.com',
        publisherAccountId: publisherId,
        relationshipType: 'DIRECT',
        certificationAuthorityId: 'f08c47fec0942fa0'
      },
      {
        domain: 'googlesyndication.com',
        publisherAccountId: publisherId,
        relationshipType: 'DIRECT',
        certificationAuthorityId: 'f08c47fec0942fa0'
      },
      // 신뢰할 수 있는 추가 광고 네트워크들
      {
        domain: 'amazon-adsystem.com',
        publisherAccountId: '3827',
        relationshipType: 'RESELLER'
      },
      {
        domain: 'indexexchange.com',
        publisherAccountId: '183965',
        relationshipType: 'RESELLER',
        certificationAuthorityId: '50b1c356f2c5c8fc'
      },
      {
        domain: 'pubmatic.com',
        publisherAccountId: '156520',
        relationshipType: 'RESELLER',
        certificationAuthorityId: '5d62403b186f2ace'
      },
      {
        domain: 'rubiconproject.com',
        publisherAccountId: '20014',
        relationshipType: 'RESELLER',
        certificationAuthorityId: '0bfd66d529a55807'
      }
    ];

    const adsTxtContent = entries
      .map(entry => 
        `${entry.domain}, ${entry.publisherAccountId}, ${entry.relationshipType}${
          entry.certificationAuthorityId ? `, ${entry.certificationAuthorityId}` : ''
        }`
      )
      .join('\n');

    return `# ads.txt file for ${process.env.NEXT_PUBLIC_BASE_URL || 'navi-guide-ai-eight.vercel.app'}
# Generated by NaviGuide AI Ads Optimization Service
# Last updated: ${new Date().toISOString()}

${adsTxtContent}

# Third-party advertising networks
# Updated automatically to ensure policy compliance`;
  }

  /**
   * AdSense 설정 최적화
   */
  optimizeAdSenseConfiguration(): AdSenseConfig {
    const optimizedConfig: AdSenseConfig = {
      ...this.adSenseConfig,
      autoAdsEnabled: true,
      adFormats: [
        {
          name: 'Responsive Display Ad',
          size: 'responsive',
          type: 'responsive',
          enabled: true,
          placement: 'header'
        },
        {
          name: 'Large Rectangle',
          size: '336x280',
          type: 'display',
          enabled: true,
          placement: 'sidebar'
        },
        {
          name: 'In-Article Ad',
          size: 'responsive',
          type: 'in-article',
          enabled: true,
          placement: 'in-content'
        },
        {
          name: 'In-Feed Ad',
          size: 'responsive',
          type: 'in-feed',
          enabled: true,
          placement: 'content'
        },
        {
          name: 'Matched Content',
          size: 'responsive',
          type: 'matched-content',
          enabled: true,
          placement: 'footer'
        }
      ],
      targetingOptions: {
        geographical: ['KR', 'US', 'JP', 'CN', 'UK', 'DE', 'FR'],
        demographic: {
          ageGroups: ['18-24', '25-34', '35-44', '45-54', '55-64'],
          interests: ['travel', 'tourism', 'technology', 'mobile-apps', 'lifestyle']
        },
        contextual: {
          keywords: ['여행', 'travel', 'guide', '가이드', 'AI', '관광', 'tourism', 'vacation'],
          categories: ['travel', 'technology', 'mobile', 'lifestyle', 'international']
        },
        behavioral: {
          enablePersonalization: true,
          enableRemarketingLists: true
        }
      }
    };

    this.adSenseConfig = optimizedConfig;
    return optimizedConfig;
  }

  /**
   * 광고 배치 최적화 분석
   */
  analyzeAdPlacement(): AdOptimizationRecommendations {
    const recommendations: AdOptimizationRecommendations = {
      adPlacementSuggestions: [
        '헤더 영역에 반응형 디스플레이 광고 배치 권장',
        '콘텐츠 중간에 인-아티클 광고 삽입으로 사용자 경험 개선',
        '사이드바에 스카이스크래퍼 또는 중간 직사각형 광고 배치',
        '푸터 영역에 매치드 콘텐츠 유닛 추가로 페이지뷰 증가',
        '모바일에서는 스티키 하단 배너 광고 고려'
      ],
      contentOptimizations: [
        '광고와 콘텐츠 사이의 적절한 여백 확보 (최소 10px)',
        '광고 레이블 명확히 표시하여 정책 준수',
        '콘텐츠 길이 최소 500단어 이상 유지',
        '이미지와 텍스트의 균형 맞춤으로 광고 효과 극대화',
        '관련 키워드 밀도 2-3% 유지하여 타겟팅 개선'
      ],
      performanceImprovements: [
        'Lazy Loading 구현으로 페이지 로딩 속도 개선',
        'AMP 페이지 구현으로 모바일 성능 향상',
        'Critical CSS 인라인화로 초기 렌더링 속도 향상',
        '이미지 최적화 및 WebP 형식 사용',
        'CDN 활용으로 전역 성능 개선'
      ],
      policyCompliance: [
        '클릭 유도 문구 제거 및 자연스러운 광고 배치',
        '성인 또는 부적절한 콘텐츠 필터링 강화',
        '저작권 침해 콘텐츠 검토 및 제거',
        '사용자 생성 콘텐츠 모니터링 시스템 구축',
        '광고 차단 감지 및 대응 시스템 구현'
      ],
      revenueOptimizations: [
        'A/B 테스트를 통한 광고 크기 및 위치 최적화',
        '헤더 비딩 구현으로 광고 수익 극대화',
        '플로어 프라이스 설정으로 저가 광고 차단',
        '계절성 콘텐츠 제작으로 CPM 향상',
        '롱테일 키워드 타겟팅으로 틈새 시장 공략'
      ]
    };

    return recommendations;
  }

  /**
   * AdSense 정책 준수 체크
   */
  checkAdSensePolicyCompliance(): {
    compliant: boolean;
    issues: string[];
    recommendations: string[];
  } {
    const issues: string[] = [];
    const recommendations: string[] = [];

    // 광고 밀도 체크
    const adDensity = this.calculateAdDensity();
    if (adDensity > 0.3) {
      issues.push('광고 밀도가 30%를 초과합니다');
      recommendations.push('페이지당 광고 수를 줄이거나 콘텐츠를 늘려주세요');
    }

    // 콘텐츠 품질 체크
    if (!this.hasOriginalContent()) {
      issues.push('독창적인 콘텐츠가 부족합니다');
      recommendations.push('고품질의 독창적인 콘텐츠를 추가해주세요');
    }

    // 네비게이션 체크
    if (!this.hasProperNavigation()) {
      issues.push('명확한 네비게이션이 부족합니다');
      recommendations.push('사이트맵과 메뉴 구조를 개선해주세요');
    }

    // 필수 페이지 체크
    const requiredPages = ['privacy', 'terms', 'about', 'contact'];
    const missingPages = requiredPages.filter(page => !this.hasPage(page));
    if (missingPages.length > 0) {
      issues.push(`필수 페이지가 누락됨: ${missingPages.join(', ')}`);
      recommendations.push('모든 필수 페이지를 생성해주세요');
    }

    return {
      compliant: issues.length === 0,
      issues,
      recommendations
    };
  }

  /**
   * 광고 성능 모니터링
   */
  trackAdPerformance(adUnitId: string, metrics: AdPerformanceMetrics): void {
    this.performanceData.set(adUnitId, {
      ...metrics,
      // 성능 지표 검증
      clickThroughRate: metrics.clicks / metrics.impressions,
      fillRate: Math.min(1, metrics.fillRate),
      viewability: Math.min(1, metrics.viewability)
    });
  }

  /**
   * 수익 최적화 제안
   */
  generateRevenueOptimizationSuggestions(): string[] {
    const performanceArray = Array.from(this.performanceData.values());
    const avgCTR = performanceArray.reduce((sum, p) => sum + p.clickThroughRate, 0) / performanceArray.length || 0;
    const avgFillRate = performanceArray.reduce((sum, p) => sum + p.fillRate, 0) / performanceArray.length || 0;

    const suggestions: string[] = [];

    if (avgCTR < 0.01) {
      suggestions.push('클릭률이 낮습니다. 광고 위치와 크기를 최적화해보세요.');
    }

    if (avgFillRate < 0.8) {
      suggestions.push('광고 채움률이 낮습니다. 추가 광고 네트워크 연동을 고려해보세요.');
    }

    suggestions.push(
      '모바일 우선 반응형 광고 유닛 사용 권장',
      '사용자 경험을 해치지 않는 선에서 광고 수 증가',
      '고품질 콘텐츠 제작으로 프리미엄 광고 유치',
      '지역별 타겟팅으로 광고 관련성 향상',
      '계절별 콘텐츠로 CPM 향상 기회 활용'
    );

    return suggestions;
  }

  /**
   * 기본 AdSense 설정
   */
  private getDefaultAdSenseConfig(): AdSenseConfig {
    return {
      publisherId: process.env.ADSENSE_PUBLISHER_ID || 'pub-8225961966676319',
      adClientId: process.env.ADSENSE_CLIENT_ID || 'ca-pub-8225961966676319',
      autoAdsEnabled: true, // 자동 광고 활성화
      adFormats: [
        {
          name: 'Responsive Display Ad',
          size: 'responsive',
          type: 'responsive',
          enabled: true,
          placement: 'header'
        },
        {
          name: 'In-Article Ad',
          size: 'responsive',
          type: 'in-article',
          enabled: true,
          placement: 'in-content'
        }
      ],
      targetingOptions: {
        geographical: ['KR', 'US', 'JP', 'CN'],
        demographic: {
          ageGroups: ['18-24', '25-34', '35-44', '45-54'],
          interests: ['travel', 'tourism', 'technology', 'mobile-apps']
        },
        contextual: {
          keywords: ['여행', 'travel', '가이드', 'guide', 'AI', '관광'],
          categories: ['travel', 'technology', 'mobile']
        },
        behavioral: {
          enablePersonalization: true,
          enableRemarketingLists: true
        }
      }
    };
  }

  /**
   * 유틸리티 메서드들
   */
  private calculateAdDensity(): number {
    // 실제 구현에서는 DOM 분석을 통해 광고 영역과 콘텐츠 영역 비율 계산
    return 0.2; // 예시값
  }

  private hasOriginalContent(): boolean {
    // 실제 구현에서는 콘텐츠 독창성 검사
    return true; // 예시값
  }

  private hasProperNavigation(): boolean {
    // 실제 구현에서는 네비게이션 구조 검사
    return true; // 예시값
  }

  private hasPage(pageType: string): boolean {
    // 실제 구현에서는 페이지 존재 여부 확인
    return true; // 예시값
  }

  /**
   * ads.txt 파일 다운로드용 엔드포인트 데이터
   */
  getAdsTxtForDownload(): {
    content: string;
    filename: string;
    contentType: string;
  } {
    return {
      content: this.generateAdsTxt(),
      filename: 'ads.txt',
      contentType: 'text/plain'
    };
  }

  /**
   * AdSense 자동 광고 스크립트 생성
   */
  generateAdSenseScript(): string {
    if (!this.adSenseConfig.publisherId) {
      throw new Error('Publisher ID not configured');
    }

    return `
<!-- Google AdSense -->
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=${this.adSenseConfig.adClientId}"
     crossorigin="anonymous"></script>

${this.adSenseConfig.autoAdsEnabled ? `
<!-- Auto Ads -->
<script>
     (adsbygoogle = window.adsbygoogle || []).push({
          google_ad_client: "${this.adSenseConfig.adClientId}",
          enable_page_level_ads: true
     });
</script>
` : ''}

<!-- Ad Units -->
${this.generateAdUnits()}
    `.trim();
  }

  /**
   * 광고 유닛 HTML 생성
   */
  private generateAdUnits(): string {
    return this.adSenseConfig.adFormats
      .filter(format => format.enabled)
      .map((format, index) => `
<!-- ${format.name} -->
<ins class="adsbygoogle"
     style="display:block"
     data-ad-client="${this.adSenseConfig.adClientId}"
     data-ad-slot="xxxxxxxxx${index}"
     data-ad-format="${format.type}"
     data-full-width-responsive="true"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
      `).join('\n');
  }

  /**
   * 설정 업데이트
   */
  updateAdSenseConfig(config: Partial<AdSenseConfig>): void {
    this.adSenseConfig = {
      ...this.adSenseConfig,
      ...config
    };
  }

  /**
   * 현재 설정 조회
   */
  getAdSenseConfig(): AdSenseConfig {
    return { ...this.adSenseConfig };
  }

  /**
   * 성능 데이터 조회
   */
  getPerformanceData(): Map<string, AdPerformanceMetrics> {
    return new Map(this.performanceData);
  }

  /**
   * 전체 수익 리포트 생성
   */
  generateRevenueReport(): {
    totalRevenue: number;
    totalImpressions: number;
    totalClicks: number;
    averageCTR: number;
    averageCPC: number;
    topPerformingUnits: Array<{unitId: string; revenue: number}>;
  } {
    const performanceArray = Array.from(this.performanceData.entries());
    
    const totalRevenue = performanceArray.reduce((sum, [, metrics]) => sum + metrics.revenue, 0);
    const totalImpressions = performanceArray.reduce((sum, [, metrics]) => sum + metrics.impressions, 0);
    const totalClicks = performanceArray.reduce((sum, [, metrics]) => sum + metrics.clicks, 0);
    
    const averageCTR = totalImpressions > 0 ? totalClicks / totalImpressions : 0;
    const averageCPC = totalClicks > 0 ? totalRevenue / totalClicks : 0;
    
    const topPerformingUnits = performanceArray
      .map(([unitId, metrics]) => ({ unitId, revenue: metrics.revenue }))
      .sort((a, b) => b.revenue - a.revenue)
      .slice(0, 5);

    return {
      totalRevenue,
      totalImpressions,
      totalClicks,
      averageCTR,
      averageCPC,
      topPerformingUnits
    };
  }
}

// Singleton 인스턴스 export
export const adsOptimizationService = AdsOptimizationService.getInstance();