                                      <h4 className="text-base font-medium mb-1 text-black">{t('guide.nextMoveGuide')}</h4>
                                    url += '&parent=' + encodeURIComponent('방콕');
                                  {index === 0 && <p className="text-slate-600 font-medium">🎯 {t('guide.autoGeneratedIntro')}</p>}
                                  <p>Core: {chapter.coreNarrative ? t('common.exists') : t('common.notExists')}</p>
                                  <p>Narrative: {chapter.narrative ? t('common.exists') : t('common.notExists')}</p>
                                  <p>Next Direction: {chapter.nextDirection ? t('common.exists') : t('common.notExists')}</p>
                                  <p>Scene: {chapter.sceneDescription ? t('common.exists') : t('common.notExists')}</p>
                                  <p>Stories: {chapter.humanStories ? t('common.exists') : t('common.notExists')}</p>
                                {index === 0 ? t('guide.intro') : String(index).padStart(2, '0')}
                                {suggestion.isMainLocation ? '📍 위치' : t('search.official')}
                              {t('guide.directionGuidance') || '방향 안내'}
                            {Array.isArray(t('buttons.goHome')) ? t('buttons.goHome')[0] : t('buttons.goHome')}
                            {String(t('tripPlanner.alerts.deleteButton'))}
                            {String(t('tripPlanner.alerts.loadButton'))}
                            {t('search.clickToComplete')}
                            <h2 className="text-2xl font-semibold text-black tracking-tight">{t('guide.mustSeePoints')}</h2>
                            <h2 className="text-2xl font-semibold text-black tracking-tight">{t('guide.overview')}</h2>
                            <h2 className="text-2xl font-semibold text-black tracking-tight">{t('guide.precautions')}</h2>
                            <h2 className="text-2xl font-semibold text-black tracking-tight">{t('guide.viewingOrder')}</h2>
                            <p className="text-sm text-black/60 font-medium mt-0.5">{t('guide.essentialInfo')}</p>
                            alert('좌표가 클립보드에 복사되었습니다!');
                          {t('guide.startLocation') || '시작지점'}
                          {t('listenToGuide')}
                          {t('mypage.offlineAvailable') || '오프라인 사용 가능'}
                          <p className="text-sm text-gray-600">{String(t('tripPlanner.labels.budget'))} {plan.budget} | {String(t('tripPlanner.labels.tripType'))} {plan.tripType}</p>
                          <p className="text-xs text-gray-500">{String(t('tripPlanner.labels.createdAt'))} {new Date(plan.createdAt).toLocaleDateString()}</p>
                          return safetyContent.split('\n').filter(w => w.trim()).map((warning, index) => {
                          title={String(t('history.delete'))}
                          title={String(t('history.view'))}
                        {[String(t('tripPlanner.form.interestOptions.food')), String(t('tripPlanner.form.interestOptions.shopping')), String(t('tripPlanner.form.interestOptions.culture')), String(t('tripPlanner.form.interestOptions.nature')), String(t('tripPlanner.form.interestOptions.activities')), String(t('tripPlanner.form.interestOptions.photography')), String(t('tripPlanner.form.interestOptions.nightView')), String(t('tripPlanner.form.interestOptions.spa'))].map((interest) => (
                        {String(t('tripPlanner.destinations.nomad'))}
                        {String(t('tripPlanner.destinations.visa'))}
                        <h2 className="text-xl font-medium text-gray-900 mb-2">{Array.isArray(t('common.error')) ? t('common.error')[0] : t('common.error')}</h2>
                        <h2 className="text-xl font-medium text-gray-900 mb-2">{Array.isArray(t('guide.notFound')) ? t('guide.notFound')[0] : t('guide.notFound')}</h2>
                        <option value="100-200만원">{String(t('tripPlanner.form.budgetOptions.range100to200'))}</option>
                        <option value="1개월">{String(t('tripPlanner.form.durationOptions.oneMonth'))}</option>
                        <option value="1박 2일">{String(t('tripPlanner.form.durationOptions.oneNight'))}</option>
                        <option value="1주일">{String(t('tripPlanner.form.durationOptions.oneWeek'))}</option>
                        <option value="200만원 이상">{String(t('tripPlanner.form.budgetOptions.over200'))}</option>
                        <option value="20-50만원">{String(t('tripPlanner.form.budgetOptions.range20to50'))}</option>
                        <option value="20만원 이하">{String(t('tripPlanner.form.budgetOptions.under20'))}</option>
                        <option value="2-3일">{String(t('tripPlanner.form.durationOptions.twoNights'))}</option>
                        <option value="2주일">{String(t('tripPlanner.form.durationOptions.twoWeeks'))}</option>
                        <option value="3-4일">{String(t('tripPlanner.form.durationOptions.threeNights'))}</option>
                        <option value="4-5일">{String(t('tripPlanner.form.durationOptions.fourNights'))}</option>
                        <option value="50-100만원">{String(t('tripPlanner.form.budgetOptions.range50to100'))}</option>
                        <option value="기타">{String(t('tripPlanner.form.durationOptions.custom'))}</option>
                        <option value="당일치기">{String(t('tripPlanner.form.durationOptions.dayTrip'))}</option>
                        <option value="무제한">{String(t('tripPlanner.form.budgetOptions.unlimited'))}</option>
                        <p className="text-gray-600 text-sm mb-4">{Array.isArray(t('guide.cannotLoad')) ? t('guide.cannotLoad')[0] : t('guide.cannotLoad')}</p>
                        <span>💾 {t('mypage.downloaded') || '다운로드됨'}</span>
                        <span>📚 {guide.chapters}{t('mypage.chapters') || '개 챕터'}</span>
                        • {t('mypage.offlineFeature1') || '인터넷 연결 없이도 가이드 이용 가능'}<br />
                        • {t('mypage.offlineFeature2') || '오디오 파일까지 함께 저장'}<br />
                        • {t('mypage.offlineFeature3') || '모바일 저장 공간에 안전하게 보관'}
                        alert('좌표가 클립보드에 복사되었습니다!');
                        placeholder={String(t('tripPlanner.form.destination.placeholder'))}
                        title={String(t('mypage.deleteOffline') || '오프라인 파일 삭제')}
                        title={String(t('mypage.offlinePlay') || '오프라인 재생')}
                        title={String(t('tripPlanner.destinations.nomadInfo'))}
                        title={String(t('tripPlanner.destinations.visaInfo'))}
                       String(t('guide.bookmarkGuide'))}
                      : feature.badge === t('features.available')
                      {isRegenerating ? '생성중...' : String(t('guide.regenerateGuide'))}
                      {String(t('tripPlanner.destinations.viewGuide'))}
                      {t('search.noResults')}
                      <div className="font-medium mb-1">{t('mypage.deleteAllData') || '모든 데이터 삭제'}</div>
                      <div className="font-medium text-black mb-1">{t('mypage.exportData') || '데이터 내보내기'}</div>
                      <div className="text-sm text-gray-500">{t('mypage.exportDescription') || '모든 가이드 데이터를 JSON 형태로 다운로드'}</div>
                      <div className="text-sm text-red-400">{t('mypage.deleteAllDescription') || '저장된 모든 가이드와 설정을 삭제합니다'}</div>
                      <h4 className="font-medium text-blue-900 mb-1">{t('mypage.offlineInfoTitle') || '오프라인 기능 안내'}</h4>
                      <label className="block text-sm font-medium text-gray-700 mb-2">{String(t('tripPlanner.form.budget'))}</label>
                      <label className="block text-sm font-medium text-gray-700 mb-2">{String(t('tripPlanner.form.departure'))}</label>
                      <label className="block text-sm font-medium text-gray-700 mb-2">{String(t('tripPlanner.form.destination.label'))}</label>
                      <label className="block text-sm font-medium text-gray-700 mb-2">{String(t('tripPlanner.form.duration'))}</label>
                      <label className="block text-sm font-medium text-gray-700 mb-2">{String(t('tripPlanner.form.interests'))}</label>
                      <span className="ml-auto text-sm text-gray-500" aria-label={String(t('header.currentSelectedLanguage'))}>
                      <span className="text-sm font-medium text-gray-700">{t('guide.audioGuide')}</span>
                      <span>{t('auth.signin')}</span>
                      <span>{t('auth.verifyEmail')}</span>
                      aria-label={`${(t('feedback.categories.accuracy') as string) || '사실 정확성'} ${rating}${(t('feedback.points') as string) || '점'}`}
                      aria-label={`${(t('feedback.categories.culturalRespect') as string) || '문화적 존중'} ${rating}${(t('feedback.points') as string) || '점'}`}
                      aria-label={`${(t('feedback.categories.expertise') as string) || '전문성'} ${rating}${(t('feedback.points') as string) || '점'}`}
                      aria-label={`${(t('feedback.categories.overallSatisfaction') as string) || '전체 만족도'} ${rating}${(t('feedback.points') as string) || '점'}`}
                      aria-label={`${(t('feedback.categories.storytelling') as string) || '스토리텔링'} ${rating}${(t('feedback.points') as string) || '점'}`}
                      const { performCompleteLogout, simpleCacheInvalidation } = await import('@/lib/auth-utils');
                      placeholder={t('auth.confirmYourPassword') as string}
                      placeholder={t('auth.enterYourEmail') as string}
                      placeholder={t('auth.enterYourName') as string}
                      placeholder={t('auth.enterYourPassword') as string}
                      placeholder={t('auth.passwordMinLength') as string}
                    &ldquo;{query}&rdquo;에 대한 {t('search.noResults')}
                    { id: 'americas', label: t('home.regionTitles.americas') }
                    { id: 'asia', label: t('home.regionTitles.asia') },
                    { id: 'europe', label: t('home.regionTitles.europe') },
                    { id: 'korea', label: t('home.regionTitles.korea') },
                    {continent === t('continents.africa') && '🌍'} 
                    {continent === t('continents.americas') && '🌎'} 
                    {continent === t('continents.asia') && '🌏'} 
                    {continent === t('continents.europe') && '🇪🇺'} 
                    {continent === t('continents.oceania') && '🇦🇺'} 
                    {guide?.metadata?.originalLocationName || guide?.overview?.title || String(t('guide.guideTitle'))}
                    {String(t('tripPlanner.generatedPlan.compare'))}
                    {String(t('tripPlanner.generatedPlan.exportPDF'))}
                    {String(t('tripPlanner.generatedPlan.regenerate'))}
                    {String(t('tripPlanner.generatedPlan.savePlan'))}
                    {String(t('tripPlanner.generatedPlan.share'))}
                    {t('auth.confirmPassword')}
                    {t('auth.email')}
                    {t('auth.name')}
                    {t('auth.password')}
                    {t('auth.privacyPolicy') as string}
                    {t('auth.signin')}
                    {t('auth.signout')}
                    {t('auth.signup')}
                    {t('auth.termsAndConditions') as string}
                    {t('features.startExperience')}
                    {t('footer.aboutUs')}
                    {t('footer.contact')}
                    {t('footer.privacyPolicy')}
                    {t('footer.services.audioGuide')}
                    {t('footer.services.docent')}
                    {t('footer.services.tourRadio')}
                    {t('footer.services.travelRadio')}
                    {t('footer.supportHours')}
                    {t('footer.telegramChannel')}
                    {t('footer.termsOfService')}
                    {t('footer.tools.filmLocations')}
                    {t('footer.tools.nomadCalculator')}
                    {t('footer.tools.tripPlanner')}
                    {t('footer.tools.visaChecker')}
                    {t('location.nearestPOI')}
                    {t('profile.mypage')}
                    {t('search.language')}: {getLanguageLabel(suggestion.language)} • 
                    {t('search.similarity')}: {Math.round(suggestion.similarity_score * 100)}%
                    {trackingState.batterySaver ? t('location.batterySaver') : t('location.normal')}
                    <option value="en">{t('languages.english') || 'English'}</option>
                    <option value="es">{t('languages.spanish') || 'Español'}</option>
                    <option value="ja">{t('languages.japanese') || '日本語'}</option>
                    <option value="ko">{t('languages.korean') || '한국어'}</option>
                    <option value="zh">{t('languages.chinese') || '中文'}</option>
                    <p className="text-xs text-gray-500 mb-1">{String(t('tripPlanner.labels.mainAttractions'))}</p>
                    <span role="img" aria-label={String(t('header.flagAltText', { language: lang.name }))}>
                    alt={String(t('header.profileAlt'))} 
                    aria-label={String(t('header.changeToLanguage', { language: lang.name }))}
                    if (!relatedTarget || !relatedTarget.closest('.suggestions-container')) {
                    message={`"${locationName}" ${t('guide.preparing')}`}
                    placeholder={String(t('mypage.namePlaceholder') || '이름을 입력하세요')}
                    subMessage={Array.isArray(t('guide.generating')) ? String(t('guide.generating')[0]) : String(t('guide.generating'))}
                    t('location.never')
                    throw new Error(data.error || t('guide.generationFailed'));
                    throw new Error(errorData.error || t('guide.generationFailed'));
                    title: chapter.title || t('guide.chapterTitle') + ` ${index + 1}`,
                    📍 {suggestion.region || t('search.unknownRegion')}, {getCountryFlag(suggestion.country_code)} {suggestion.country_code}
                  : t('auth.exploreWithAI')
                  : t('auth.joinTitle')
                  ? t('auth.emailVerification')
                  ? t('auth.startYourJourney')
                  {routeProgress.visitedPOIs} / {routeProgress.totalPOIs} {t('location.completed')}
                  {searchQuery ? t('history.noResults') : t('history.noHistory')}
                  {session?.user?.name || t('profile.user') || '사용자'}
                  {String(t('tripPlanner.aiFeatures.audioGuide.description'))}
                  {String(t('tripPlanner.aiFeatures.budgetManagement.description'))}
                  {String(t('tripPlanner.aiFeatures.customized.description'))}
                  {String(t('tripPlanner.aiFeatures.detailedInfo.description'))}
                  {String(t('tripPlanner.aiFeatures.mobileOptimized.description'))}
                  {String(t('tripPlanner.aiFeatures.realtime.description'))}
                  {String(t('tripPlanner.personalization.loadSettings'))}
                  {String(t('tripPlanner.personalization.saveSettings'))}
                  {String(t('tripPlanner.personalization.viewSavedPlans'))} ({savedPlans.length}{String(t('tripPlanner.personalization.plansCount'))})
                  {t('auth.alreadyHaveAccount')}{' '}
                  {t('auth.logout') || '로그아웃'}
                  {t('auth.noAccount')}{' '}
                  {t('auth.signout')}
                  {t('history.searchPlaces')}
                  {t('home.viewMoreAttractions')}
                  {t('location.accuracy')}
                  {t('location.averageSpeed')}
                  {t('location.currentLocation')}
                  {t('location.error')}
                  {t('location.highAccuracy')}
                  {t('location.lastUpdate')}
                  {t('location.totalDistance')}
                  {t('location.totalTime')}
                  {t('location.visitedPOIs')}
                  {t('mypage.createGuideButton') || '가이드 생성하기'}
                  {t('mypage.noOfflineDescription') || '실시간 가이드를 보며 다운로드 버튼을 클릭하여 오프라인에서도 이용할 수 있도록 저장해보세요!'}
                  {t('profile.mypage')}
                  <h3 className="text-fluid-xl font-semibold text-black mb-4 leading-snug">{String(t('tripPlanner.steps.budgetPreferences'))}</h3>
                  <h3 className="text-fluid-xl font-semibold text-black mb-4 leading-snug">{String(t('tripPlanner.steps.destinationDuration'))}</h3>
                  <label className="block text-sm font-medium text-black mb-2">{t('mypage.defaultLanguage') || '기본 언어'}</label>
                  <label className="block text-sm font-medium text-black mb-2">{t('mypage.emailLabel') || '이메일'}</label>
                  <label className="block text-sm font-medium text-black mb-2">{t('mypage.nameLabel') || '이름'}</label>
                  <p className="text-xs text-gray-400 mt-1">{t('mypage.emailNotEditableNote') || '이메일은 변경할 수 없습니다'}</p>
                  <span aria-hidden="true">🎓</span> {(t('feedback.categories.expertise') as string) || '전문성 깊이 (전문가 수준의 설명)'}
                  <span aria-hidden="true">🎯</span> {(t('feedback.categories.overallSatisfaction') as string) || '전체 만족도 (종합적 평가)'}
                  <span aria-hidden="true">📖</span> {(t('feedback.categories.storytelling') as string) || '스토리텔링 (흥미롭고 몰입감 있는 설명)'}
                  <span aria-hidden="true">🔍</span> {(t('feedback.categories.accuracy') as string) || '사실 정확성 (역사, 수치, 인명 등)'}
                  <span aria-hidden="true">🙏</span> {(t('feedback.categories.culturalRespect') as string) || '문화적 존중 (현지 문화에 대한 적절한 표현)'}
                  <span className="ml-3 text-sm text-gray-700">{t('mypage.guideCompleteNotifications') || '가이드 생성 완료 알림'}</span>
                  <span className="ml-3 text-sm text-gray-700">{t('mypage.marketingEmails') || '마케팅 이메일 수신'}</span>
                  <span className="ml-3 text-sm text-gray-700">{t('mypage.newFeatureNotifications') || '새로운 기능 알림'}</span>
                  <span className="px-4 bg-white text-gray-500">{t('auth.orContinueWith')}</span>
                  <span className="text-sm text-gray-600">{t('search.searching')}</span>
                  <span>{t('specialFeatures.culturalSignificance.example1')}</span>
                  <span>{t('specialFeatures.culturalSignificance.example2')}</span>
                  <span>{t('specialFeatures.culturalSignificance.example3')}</span>
                  <span>{t('specialFeatures.hiddenHistory.example1')}</span>
                  <span>{t('specialFeatures.hiddenHistory.example2')}</span>
                  <span>{t('specialFeatures.hiddenHistory.example3')}</span>
                  <strong>{t('location.nextPOI')}:</strong> {routeProgress.nextPOI}
                  alert('모든 좌표가 클립보드에 복사되었습니다!');
                  aria-label={String(t('audio.removeBookmark'))}
                  aria-label={String(t('home.searchPlaceholder'))}
                  label: t('mypage.favoriteGuides') || '즐겨찾기 가이드', 
                  label: t('mypage.history') || '나의 가이드', 
                  label: t('mypage.offline') || '오프라인 다운로드', 
                  label: t('mypage.settings') || '세팅', 
                  placeholder={String(t('home.searchPlaceholder'))}
                  placeholder={String(t('mypage.searchPlaceholder') || '가이드 검색...')}
                  shortLabel: t('mypage.favoritesShort') || '즐겨찾기',
                  shortLabel: t('mypage.historyShort') || '가이드',
                  shortLabel: t('mypage.offlineShort') || '오프라인',
                  shortLabel: t('mypage.settingsShort') || '세팅',
                : `${locationName} ${t('guide.regionOverview') || '지역 개요'}`
                ? `${validSpots.length}개 ${t('guide.recommendedSpots') || '추천 장소'}`
                ? t('auth.enterCode')
                ? t('auth.signupComplete')
                {(t('feedback.cancelButton') as string) || '취소'}
                {(t('feedback.commentsHelp') as string) || '가이드 개선을 위한 자유로운 의견을 작성해주세요'}
                {isGenerating ? String(t('tripPlanner.form.analyzing')) : String(t('tripPlanner.form.generateButton'))}
                {isSubmitting ? ((t('feedback.submitting') as string) || '제출 중...') : (<><span aria-hidden="true">🎯</span> {(t('feedback.submitButton') as string) || '피드백 제출하기'}</>)}
                {isTracking ? t('location.active') : t('location.inactive')}
                {t('aiBenefits.alwaysAvailable.description')}
                {t('aiBenefits.completelyFree.description')}
                {t('aiBenefits.customInterests.description')}
                {t('aiBenefits.expertKnowledge.description')}
                {t('aiBenefits.multiLanguage.description')}
                {t('aiBenefits.smartphone.description')}
                {t('audio.noBookmarks')}
                {t('audio.playbackSpeed')}
                {t('audio.volume')}: {Math.round(volume * 100)}%
                {t('auth.loginWithGoogle')}
                {t('auth.logout') || '로그아웃'}
                {t('auth.registerWithGoogle')}
                {t('auth.signin')}
                {t('challenges.items.0.description')}
                {t('challenges.items.1.description')}
                {t('challenges.items.2.description')}
                {t('challenges.items.3.description')}
                {t('challenges.items.4.description')}
                {t('challenges.items.5.description')}
                {t('cta.primary')}
                {t('cta.secondary')}
                {t('footer.companyDescription')}
                {t('guide.noTouristSpotsAvailable') || '관광지 정보를 불러오는 중입니다'}
                {t('guide.recommendedSpots')} ({recommendedSpots.length})
                {t('hero.description')}
                {t('hero.title')}
                {t('home.brandTitle')}
                {t('home.pageTitle') || 'TripRadio.AI - AI 오디오가이드 여행 서비스'}
                {t('home.regionDescription')}
                {t('home.regionTitles.popularCountries')}
                {t('home.subtitle')} {t('home.subtitle2')}
                {t('howItWorks.steps.0.description')}
                {t('howItWorks.steps.1.description')}
                {t('howItWorks.steps.2.description')}
                {t('howItWorks.steps.3.description')}
                {t('legal.adsenseNotice') || '광고 수익 공지'}
                {t('legal.privacy.lastUpdated')}: 2024-07-23
                {t('legal.privacyPolicy') || '개인정보 처리방침'}
                {t('legal.terms.lastUpdated')}: 2024-07-23
                {t('location.liveTracking')}
                {t('location.permissionRequired')}
                {t('location.routeProgress')}
                {t('mypage.downloadsCount', { count: offlineGuides.length.toString() }) || `${offlineGuides.length}개`} {t('common.downloads') || '다운로드'}
                {t('mypage.favoritesCount', { count: favoriteGuides.length.toString() }) || `${favoriteGuides.length}개`} {t('mypage.favoritesShort') || '즐겨찾기'}
                {t('mypage.totalCount', { count: filteredGuides.length.toString() }) || `총 ${filteredGuides.length}개`} {t('mypage.guides') || '가이드'}
                {t('problems.items.0.description')}
                {t('problems.items.1.description')}
                {t('problems.items.2.description')}
                {t('profile.guides')}
                {t('solution.features.0.description')}
                {t('solution.features.1.description')}
                {t('solution.features.2.description')}
                {t('solution.features.3.description')}
                {t('solution.features.4.description')}
                {t('solution.features.5.description')}
                {t('solutions.features.0.description')}
                {t('solutions.features.1.description')}
                {t('solutions.features.2.description')}
                {t('solutions.features.3.description')}
                {t('solutions.features.4.description')}
                {t('solutions.features.5.description')}
                {t('specialFeatures.culturalSignificance.description')}
                {t('specialFeatures.hiddenHistory.description')}
                {t('tips.items.0.description')}
                {t('tips.items.1.description')}
                {t('tips.items.2.description')}
                {t('tips.items.3.description')}
                {t('tips.items.4.description')}
                {t('tips.items.5.description')}
                {t('whyTop100.artistic.description')}
                {t('whyTop100.historical.description')}
                {t('whyTop100.natural.description')}
                <div role="listbox" aria-label={String(t('search.suggestions'))}>
                <h2 className="text-lg font-medium">{t('guide.recommendedStartPoint') || '추천 시작지점'}</h2>
                <h2 className="text-xl font-semibold text-black">{t('guide.keyFeatures')}</h2>
                <h2 className="text-xl font-semibold text-black">{t('guide.regionIntroduction')}</h2>
                <h2 className="text-xl font-semibold text-black">{t('mypage.favoritesTitle') || '즐겨찾기 가이드'}</h2>
                <h2 className="text-xl font-semibold text-black">{t('mypage.historyTitle') || '나의 가이드'}</h2>
                <h2 className="text-xl font-semibold text-black">{t('mypage.offlineTitle') || '오프라인 다운로드'}</h2>
                <h3 className="font-medium mb-2">{String(t('tripPlanner.audioGuideIntegration.features.autoStart.title'))}</h3>
                <h3 className="font-medium mb-2">{String(t('tripPlanner.audioGuideIntegration.features.personalized.title'))}</h3>
                <h3 className="font-medium mb-2">{String(t('tripPlanner.audioGuideIntegration.features.realtimeUpdate.title'))}</h3>
                <h3 className="font-medium text-black mb-2">{String(t('tripPlanner.aiFeatures.audioGuide.title'))}</h3>
                <h3 className="font-medium text-black mb-2">{String(t('tripPlanner.aiFeatures.budgetManagement.title'))}</h3>
                <h3 className="font-medium text-black mb-2">{String(t('tripPlanner.aiFeatures.customized.title'))}</h3>
                <h3 className="font-medium text-black mb-2">{String(t('tripPlanner.aiFeatures.detailedInfo.title'))}</h3>
                <h3 className="font-medium text-black mb-2">{String(t('tripPlanner.aiFeatures.mobileOptimized.title'))}</h3>
                <h3 className="font-medium text-black mb-2">{String(t('tripPlanner.aiFeatures.realtime.title'))}</h3>
                <h3 className="font-semibold text-white">{t('home.stepTitles.aiGenerate') || 'AI 생성'}</h3>
                <h3 className="font-semibold text-white">{t('home.stepTitles.audioPlay') || '오디오 재생'}</h3>
                <h3 className="font-semibold text-white">{t('home.stepTitles.inputLocation') || '장소 입력'}</h3>
                <h3 className="text-lg font-medium text-black mb-2">{t('mypage.noFavoritesTitle') || '즐겨찾기한 가이드가 없습니다'}</h3>
                <h3 className="text-lg font-medium text-black mb-2">{t('mypage.noHistoryTitle') || '가이드 히스토리가 없습니다'}</h3>
                <h3 className="text-lg font-medium text-black mb-2">{t('mypage.noOfflineTitle') || '오프라인 다운로드된 가이드가 없습니다'}</h3>
                <h3 className="text-lg font-medium text-black">{String(t('tripPlanner.generatedPlan.title'))}</h3>
                <h3 className="text-lg font-medium text-black">{String(t('tripPlanner.savedPlans.title'))}</h3>
                <h3 className="text-lg font-medium text-black">{t('profile.account') || '계정 관리'}</h3>
                <h3 className="text-lg font-medium text-gray-900">{t('destinations.items.0.name')}</h3>
                <h3 className="text-lg font-medium text-gray-900">{t('destinations.items.1.name')}</h3>
                <h3 className="text-lg font-medium text-gray-900">{t('destinations.items.3.name')}</h3>
                <h3 className="text-lg font-semibold text-black mb-2">{t('destinations.items.2.name')}</h3>
                <h3 className="text-xl font-medium text-gray-900">{t('specialFeatures.culturalSignificance.title')}</h3>
                <h3 className="text-xl font-medium text-gray-900">{t('specialFeatures.hiddenHistory.title')}</h3>
                <option value="all">{t('mypage.allLanguages') || '모든 언어'}</option>
                <option value="en">{t('languages.english') || 'English'}</option>
                <option value="es">{t('languages.spanish') || 'Español'}</option>
                <option value="ja">{t('languages.japanese') || '日本語'}</option>
                <option value="ko">{t('languages.korean') || '한국어'}</option>
                <option value="zh">{t('languages.chinese') || '中文'}</option>
                <p className="text-black/60 text-lg">{t('guide.noRecommendedSpots')}</p>
                <p className="text-gray-500 mb-4">{t('mypage.noFavoritesDescription') || '실시간 가이드를 보며 별표 버튼을 클릭하여 즐겨찾기를 추가해보세요!'}</p>
                <p className="text-gray-500 mb-4">{t('mypage.noHistoryDescription') || '새로운 장소를 검색하여 가이드를 생성해보세요!'}</p>
                <p className="text-gray-500 text-center py-8">{String(t('tripPlanner.alerts.savedPlansEmpty'))}</p>
                <p className="text-gray-500 text-sm">{t('mypage.favoritesDescription') || '실시간 가이드에서 즐겨찾기한 가이드들입니다'}</p>
                <p className="text-gray-500 text-sm">{t('mypage.historyDescription') || '조회했던 가이드들의 히스토리입니다'}</p>
                <p className="text-gray-500 text-sm">{t('mypage.offlineDescription') || '오프라인에서도 이용할 수 있도록 다운로드한 가이드들입니다'}</p>
                <p className="text-gray-500">{t('common.loading')}</p>
                <p className="text-gray-700">{t('guide.step1')}</p>
                <p className="text-gray-700">{t('guide.step2')}</p>
                <p className="text-gray-700">{t('guide.step3')}</p>
                <p className="text-gray-700">{t('guide.step4')}</p>
                <p className="text-sm text-[#555555] font-light">{t('destinations.items.2.description')}</p>
                <p className="text-sm text-gray-300">{String(t('tripPlanner.audioGuideIntegration.features.autoStart.description'))}</p>
                <p className="text-sm text-gray-300">{String(t('tripPlanner.audioGuideIntegration.features.personalized.description'))}</p>
                <p className="text-sm text-gray-300">{String(t('tripPlanner.audioGuideIntegration.features.realtimeUpdate.description'))}</p>
                <p className="text-sm text-gray-600 mt-2">{t('destinations.items.0.description')}</p>
                <p className="text-sm text-gray-600 mt-2">{t('destinations.items.1.description')}</p>
                <p className="text-sm text-gray-600 mt-2">{t('destinations.items.3.description')}</p>
                <p className="text-sm text-gray-600">{t('guide.accurateIntroLocation') || '정확한 인트로 위치'}</p>
                <p className="text-sm text-white/70">{t('home.stepDescriptions.aiGenerate') || 'AI가 맞춤형 가이드를 생성합니다'}</p>
                <p className="text-sm text-white/70">{t('home.stepDescriptions.audioPlay') || '생성된 가이드를 음성으로 들어보세요'}</p>
                <p className="text-sm text-white/70">{t('home.stepDescriptions.inputLocation') || '궁금한 곳의 이름을 입력하세요'}</p>
                <span aria-hidden="true">💬</span> {(t('feedback.additionalComments') as string) || '추가 의견이나 제안사항'}
                <span className="block mt-3 font-light">{t('hero.subtitle')}</span>
                <span className="font-medium">{t('home.scrollHint')}</span>
                <span className="text-xs md:text-xs sm:text-xs text-gray-500">{t('footer.copyright')}</span>
                <strong>{t('loading.notifications.noticeTitle')}:</strong> {t('loading.notifications.firstVisitNotice')}
                <strong>{t('location.currentPOI')}:</strong> {routeProgress.currentPOI}
                ← {t('buttons.goBack') || '홈으로'}
                aria-label={(t('feedback.cancelButtonAria') as string) || '평가 취소하기'}
                aria-label={isSubmitting ? ((t('feedback.submittingAria') as string) || '피드백 제출 중') : ((t('feedback.submitButtonAria') as string) || '피드백 제출하기')}
                aria-label={loadingStates.search ? '검색 중...' : String(t('home.searchButton'))}
                aria-label={String(t('header.selectLanguage'))}
                const errorMessage = t('errors.unknownError');
                const errorMessage = t('guide.noLocationName');
                dates[i].date.toISOString().split('T')[0],
                dates[j].date.toISOString().split('T')[0]
                if (regionalContext.country) queryParams.set('country', regionalContext.country);
                if (regionalContext.countryCode) queryParams.set('countryCode', regionalContext.countryCode);
                if (regionalContext.region) queryParams.set('region', regionalContext.region);
                placeholder={(t('feedback.commentsPlaceholder') as string) || '더 좋은 가이드를 위한 의견을 자유롭게 작성해주세요...'}
                placeholder={String(t('history.searchInHistory'))}
                queryParams.set('region', parentRegion);
                queryParams.set('type', 'attraction');
                queryParams.set('type', regionalContext.type || 'attraction');
               req.headers.get('x-real-ip') || 
               request.headers.get('x-real-ip') ||
              .split('')
              : t('auth.welcomeTitle')
              {currentChapter?.title || t('audio.selectChapter')}
              {estimatedDuration}{t('common.minutes')}
              {message || steps[currentStepIndex]?.title || t('loading.messages.generating')}
              {steps[currentStepIndex]?.description || t('loading.descriptions.preparing')}
              {String(t('tripPlanner.aiFeatures.title'))} <span className="font-semibold">{String(t('tripPlanner.aiFeatures.subtitle'))}</span>
              {String(t('tripPlanner.audioGuideIntegration.description'))}
              {String(t('tripPlanner.audioGuideIntegration.title.before'))} <span className="font-semibold">{String(t('tripPlanner.audioGuideIntegration.title.highlight'))}</span>
              {String(t('tripPlanner.audioGuideIntegration.tryButton'))}
              {String(t('tripPlanner.badge'))}
              {String(t('tripPlanner.hero.description'))}
              {String(t('tripPlanner.hero.title'))} <span className="font-semibold">{String(t('tripPlanner.hero.subtitle'))}</span>
              {String(t('tripPlanner.popularDestinations.title'))} <span className="font-semibold">{String(t('tripPlanner.popularDestinations.subtitle'))}</span>
              {String(this.props.t('common.tryAgain'))}
              {t('aiBenefits.title')} 
              {t('audio.addBookmark')}
              {t('audio.chapter')} {currentChapterIndex + 1} / {chapters.length}
              {t('audio.playbackError')}
              {t('badge')}
              {t('challenges.title')} 
              {t('common.pleaseWait') || 'Please wait...'}
              {t('cta.description')}
              {t('cta.startFree')}
              {t('cta.title')}
              {t('destinations.subtitle')}
              {t('destinations.title')}
              {t('destinations.viewMore')}
              {t('features.aiPowered')}
              {t('features.proTipDesc')}
              {t('finalCta.button')}
              {t('finalCta.description')}
              {t('finalCta.title')}
              {t('guide.recommendedStartPoint') || '관람지도'}
              {t('guide.regionTouristMap') || '지역 관광지 지도'}
              {t('header.history')}
              {t('header.language')}: {currentConfig?.name || t('languages.ko')}
              {t('hero.badge')}
              {t('hero.description')}
              {t('hero.startFreeGuide')}
              {t('hero.title')} 
              {t('hero.viewTop100')}
              {t('howItWorks.title')}
              {t('legal.privacy.content')}
              {t('legal.terms.content')}
              {t('location.allowLocation')}
              {t('location.permissionDescription')}
              {t('location.settings')}
              {t('location.startTracking')}
              {t('location.stopTracking')}
              {t('moreDestinations')}
              {t('problems.subtitle')}
              {t('problems.title')}
              {t('searchAllDestinations')}
              {t('solution.subtitle')}
              {t('solution.title')}
              {t('solutions.title')} 
              {t('specialFeatures.title')} 
              {t('tips.title')} 
              {t('topDestinations.title')} 
              {t('whyTop100.title')} 
              <h1 className="text-lg md:text-xl font-semibold text-black whitespace-nowrap">{t('mypage.title') || '마이페이지'}</h1>
              <h2 className="text-2xl font-bold text-black mb-2">{String(this.props.t('errors.generalError'))}</h2>
              <h2 className="text-lg font-semibold text-gray-900">{t('header.history')}</h2>
              <h3 className="text-fluid-xl font-semibold text-black mb-4 leading-snug">{String(t('tripPlanner.steps.selectStyle'))}</h3>
              <h3 className="text-lg font-medium text-gray-900 mb-3">{t('tips.items.0.title')}</h3>
              <h3 className="text-lg font-medium text-gray-900 mb-3">{t('tips.items.1.title')}</h3>
              <h3 className="text-lg font-medium text-gray-900 mb-3">{t('tips.items.2.title')}</h3>
              <h3 className="text-lg font-medium text-gray-900 mb-3">{t('tips.items.3.title')}</h3>
              <h3 className="text-lg font-medium text-gray-900 mb-3">{t('tips.items.4.title')}</h3>
              <h3 className="text-lg font-medium text-gray-900 mb-3">{t('tips.items.5.title')}</h3>
              <h3 className="text-lg font-semibold text-black mb-4">{t('mypage.accountSettings') || '계정 설정'}</h3>
              <h3 className="text-lg font-semibold text-black mb-4">{t('mypage.dataManagement') || '데이터 관리'}</h3>
              <h3 className="text-lg font-semibold text-black mb-4">{t('mypage.notificationSettings') || '알림 설정'}</h3>
              <h3 className="text-lg font-semibold text-black mb-4">{t('problems.items.0.title')}</h3>
              <h3 className="text-lg font-semibold text-black mb-4">{t('problems.items.1.title')}</h3>
              <h3 className="text-lg font-semibold text-black mb-4">{t('problems.items.2.title')}</h3>
              <h3 className="text-lg font-semibold text-black mb-4">{t('solution.features.0.title')}</h3>
              <h3 className="text-lg font-semibold text-black mb-4">{t('solution.features.1.title')}</h3>
              <h3 className="text-lg font-semibold text-black mb-4">{t('solution.features.2.title')}</h3>
              <h3 className="text-lg font-semibold text-black mb-4">{t('solution.features.3.title')}</h3>
              <h3 className="text-lg font-semibold text-black mb-4">{t('solution.features.4.title')}</h3>
              <h3 className="text-lg font-semibold text-black mb-4">{t('solution.features.5.title')}</h3>
              <h3 className="text-lg font-semibold text-gray-700 mb-3">🔧 {(t('feedback.improvementNeeded') as string) || '개선이 필요한 부분'}</h3>
              <h3 className="text-lg font-semibold text-gray-700">📊 {(t('feedback.detailedEvaluation') as string) || '상세 평가 (96% 만족도 목표)'}</h3>
              <h3 className="text-lg md:text-base sm:text-base font-semibold text-black mb-4 md:mb-3 sm:mb-2">{t('footer.companyName')}</h3>
              <h3 className="text-sm font-medium text-gray-700 mb-3">{String(t('tripPlanner.personalization.title'))}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('aiBenefits.alwaysAvailable.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('aiBenefits.completelyFree.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('aiBenefits.customInterests.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('aiBenefits.expertKnowledge.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('aiBenefits.multiLanguage.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('aiBenefits.smartphone.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('challenges.items.0.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('challenges.items.1.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('challenges.items.2.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('challenges.items.3.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('challenges.items.4.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('challenges.items.5.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('howItWorks.steps.0.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('howItWorks.steps.1.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('howItWorks.steps.2.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('howItWorks.steps.3.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('solutions.features.0.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('solutions.features.1.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('solutions.features.2.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('solutions.features.3.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('solutions.features.4.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('solutions.features.5.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('whyTop100.artistic.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('whyTop100.historical.title')}</h3>
              <h3 className="text-xl font-medium text-gray-900 mb-4">{t('whyTop100.natural.title')}</h3>
              <h4 className="text-sm font-medium text-gray-700 text-center">{t('loading.statusText.progressTitle')}</h4>
              <h4 className="text-sm md:text-sm sm:text-xs font-semibold text-black mb-4 md:mb-3 sm:mb-2">{t('footer.legalInfo')}</h4>
              <h4 className="text-sm md:text-sm sm:text-xs font-semibold text-black mb-4 md:mb-3 sm:mb-2">{t('footer.services.title')}</h4>
              <h4 className="text-sm md:text-sm sm:text-xs font-semibold text-black mb-4 md:mb-3 sm:mb-2">{t('footer.support')}</h4>
              <h4 className="text-sm md:text-sm sm:text-xs font-semibold text-black mb-4 md:mb-3 sm:mb-2">{t('footer.tools.title')}</h4>
              <option value="">{t('search.allCategories')}</option>
              <option value="">{t('search.allCountries')}</option>
              <option value="food">{t('search.food')}</option>
              <option value="historic">{t('search.historic')}</option>
              <option value="museum">{t('search.museum')}</option>
              <option value="nature">{t('search.nature')}</option>
              <option value="shopping">{t('search.shopping')}</option>
              <p className="text-[#555555] font-light mb-6">{String(this.props.t('home.alerts.unexpectedError') || this.props.t('errors.generalError'))}</p>
              <p className="text-xs text-[#555555] font-light mt-2">{String(t('tripPlanner.form.completionTime'))}</p>
              <span aria-hidden="true">🎯</span> {(t('feedback.modalTitle') as string) || `"${locationName}" 가이드 평가`}
              <span className="font-semibold block mt-2">{t('aiBenefits.subtitle')}</span>
              <span className="font-semibold block mt-2">{t('challenges.subtitle')}</span>
              <span className="font-semibold block mt-2">{t('hero.subtitle')}</span>
              <span className="font-semibold block mt-2">{t('solutions.subtitle')}</span>
              <span className="font-semibold block mt-2">{t('specialFeatures.subtitle')}</span>
              <span className="font-semibold block mt-2">{t('tips.subtitle')}</span>
              <span className="font-semibold block mt-2">{t('topDestinations.subtitle')}</span>
              <span className="font-semibold block mt-2">{t('whyTop100.subtitle')}</span>
              <span className="text-sm md:text-sm sm:text-xs font-medium text-white/90">{t('home.audioGuidePrefix').split(' | ')[0] || 'AI 오디오가이드'}</span>
              <span className="text-sm md:text-sm sm:text-xs font-medium text-white/90">{t('home.audioGuidePrefix').split(' | ')[1] || '무료 체험'}</span>
              <span className="text-xs sm:text-sm">{currentConfig?.name || t('languages.ko')}</span>
              <span dangerouslySetInnerHTML={{ __html: String(t('tripPlanner.quickPlanner.title')) }} />
              <span>{t('auth.signin')}</span>
              <span>{t('legal.adsensePolicy') || 'AdSense 정책'}</span>
              5-8 {t('features.pois')}
              aria-label={(t('feedback.closeButtonAria') as string) || "평가 상자 닫기"}
              aria-label={`${String(t('header.language'))}: ${currentConfig?.name}. ${String(t('search.pressEnterToSearch'))}`}
              aria-label={isMuted ? String(t('audio.unmute')) : String(t('audio.mute'))}
              aria-label={status === 'playing' ? String(t('audio.pause')) : String(t('audio.play'))}
              aria-label={String(t('audio.forward10'))}
              aria-label={String(t('audio.next'))}
              aria-label={String(t('audio.previous'))}
              aria-label={String(t('audio.repeatMode'))}
              aria-label={String(t('audio.rewind10'))}
              aria-label={String(t('audio.settings'))}
              aria-label={String(t('audio.shuffle'))}
              aria-label={String(t('audio.toggleBookmarks'))}
              aria-label={String(t('audio.togglePlaylist'))}
              aria-label={String(t('location.settings'))}
              aria-label={String(t('search.searchLocation'))}
              aria-label={t('common.goBack') as string}
              const titleDescription = step.title.split(':')[1]?.trim();
              placeholder={String(t('audio.bookmarkTitle'))}
              placeholder={String(t('search.regionFilter'))}
              queryParams.set('country', accurateInfo.country);
              queryParams.set('countryCode', accurateInfo.countryCode);
              queryParams.set('region', accurateInfo.region);
              queryParams.set('type', 'attraction'); // 기본값
              seasonality: t('common.yearRound'),
              title: String(t('errors.configError.title')),
              title: String(t('errors.rateLimit.title')),
              title: String(t('errors.serverResponse.title')),
              💡 {t('features.proTip')}
            .select('id, coordinates')
            {params.location} {t('guide.realTimeGuideTitle')}
            {t('audio.bookmarks')} ({chapterBookmarks.length})
            {t('audio.playlist')}
            {t('audio.settings')}
            {t('common.tryAgain')}
            {t('legal.privacy.description')}
            {t('legal.privacy.title')}
            {t('legal.terms.description')}
            {t('legal.terms.title')}
            <p>• {t('guide.precaution1')}</p>
            <p>• {t('guide.precaution2')}</p>
            <p>• {t('guide.precaution3')}</p>
            <p>• {t('guide.precaution4')}</p>
            <span className="ml-2 text-gray-500">{t('common.loading') || '로딩 중...'}</span>
            <span>{t('loading.statusText.elapsedTime')}: {formatTime(elapsedTime)}</span>
            <span>{t('loading.statusText.estimatedTime')}: {formatTime(estimatedTime)}</span>
            aria-label={`${guide.location_name} ${t('relatedGuides.aria.linkTo') || '가이드로 이동'}`}
            aria-label={isMuted ? String(t('audio.unmute') || '음소거 해제') : String(t('audio.mute') || '음소거')}
            aria-label={isPlaying ? String(t('audio.pause') || '일시정지') : String(t('audio.play') || '재생')}
            aria-label={String(t('audio.nextChapter') || '다음 챕터')}
            aria-label={String(t('audio.previousChapter') || '이전 챕터')}
            aria-label={t('guide.loadMapAriaLabel') as string}
            const { extractAccurateLocationInfo } = await import('@/lib/coordinates/accurate-country-extractor');
            const { MicrosoftTranslator } = await import('@/lib/location/microsoft-translator');
            const errorMessage = t('guide.invalidGuideStructure');
            const errorMessage = t('guide.noGuideData');
            if (country) queryParams.set('country', country);
            if (countryCode) queryParams.set('countryCode', countryCode);
            if (region) queryParams.set('region', region);
            'OAuthAccountNotLinked': String(t('auth.accountNotLinked')) || '이미 다른 방법으로 가입된 이메일',
            'OAuthCallback': String(t('auth.oauthCallbackError')) || 'Google 콜백 처리 실패',
            'OAuthCreateAccount': String(t('auth.accountCreateError')) || '계정 생성 실패',
            'OAuthSignin': String(t('auth.oauthSigninError')) || 'Google 인증 서버 통신 실패',
            queryParams.set('type', locationData.type || 'landmark');
            sendResult('final', {
            sendResult('final', finalResult);
            'SessionRequired': String(t('auth.sessionRequired')) || '세션 필요'
            setErrors({ general: String(t('auth.loginTimeout')) || '로그인 요청이 시간 초과되었습니다.' });
            String(t('errors.aiServiceTemporary')),
            String(t('errors.configError.message')),
            String(t('errors.networkError')),
            String(t('errors.rateLimitExceeded', { seconds: retryAfter })),
            String(t('errors.requestTimeout')),
            String(t('errors.serverResponse')),
            user_agent: request.headers.get('user-agent') || 'Unknown'
          .select('*')
          .select('content, location')
          .select('email')
          .select('id, content, coordinates')
          .select('location, language')
          .select('locationname')
          { name: String(t('navigation.home')), url: '/' },
          { name: String(t('tripPlanner.keyword')), url: '/trip-planner' }
          {currentChapter?.title || t('audio.audioGuide') || '오디오 가이드'}
          {relatedGuides.length}{t('relatedGuides.count') || '개 추천'}
          {t('buttons.goBack')}
          {t('errors.notFound')}
          {t('features.chooseYourExperience')}
          {t('features.experienceDescription')}
          {t('relatedGuides.title') || '관련 여행지 둘러보기'}
          <h2 className="text-lg font-medium text-gray-900 mb-3">{t('guide.overview')}</h2>
          <h2 className="text-lg font-medium text-gray-900 mb-4">{t('guide.mustSeePoints')}</h2>
          <h2 className="text-lg font-medium text-gray-900 mb-4">{t('guide.precautions')}</h2>
          <h2 className="text-lg font-medium text-gray-900 mb-4">{t('guide.viewingOrder')}</h2>
          <h2 className="text-xl font-medium text-gray-900 mb-2">{t('guide.cannotLoadInfo')}</h2>
          <p className="text-xs text-gray-500">{t('features.avgDuration')}</p>
          <p className="text-xs text-gray-500">{t('features.keyLocations')}</p>
          <p className="text-xs text-gray-500">{t('features.personalizedExp')}</p>
          <span aria-hidden="true">⭐</span> {(t('feedback.rateGuide') as string) || '가이드 평가하기'}
          <span>{t('auth.secureConnection')}</span>
          alert(String(t('tripPlanner.alerts.planCopiedToClipboard')));
          aria-label={(t('feedback.openButtonAria') as string) || "가이드 품질 평가 상자 열기"}
          aria-label={isGeneratingTTS ? String(t('audio.generating') || 'TTS 생성 중') : isPlaying ? String(t('audio.pause') || '일시정지') : String(t('audio.play') || '재생')}
          clickedElement.closest('[class*="autocomplete"]')) {
          clickedElement.closest('[class*="suggestion"]') ||
          const [lng, lat] = coordMatch[1].split(' ').map(Number);
          const { classifyLocationDynamic } = await import('@/lib/location/dynamic-location-classifier');
          const { directGoogleCloudTTS } = await import('./google-cloud-tts-direct');
          const { supabase } = await import('@/lib/supabaseClient');
          const chineseModule = await import('./chinese');
          const defaultMessage = errorData.error || `${t('home.alerts.generationFailed')} (${response.status})`;
          const defaultSuggestions = t('home.defaultSuggestions');
          const englishModule = await import('./english');
          const errorMessage = t('home.alerts.networkError');
          const fallbackKeys = key.split('.');
          const japaneseModule = await import('./japanese');
          const koreanModule = await import('./korean');
          const link = document.createElement('link');
          const retryAfter = response.headers.get('retry-after') || '60';
          const spanishModule = await import('./spanish');
          deleteButton: '${String(t('tripPlanner.alerts.deleteButton'))}',
          if (regionalContext.country) queryParams.set('country', regionalContext.country);
          if (regionalContext.countryCode) queryParams.set('countryCode', regionalContext.countryCode);
          if (regionalContext.region) queryParams.set('region', regionalContext.region);
          linkCopied: '${String(t('tripPlanner.alerts.linkCopied'))}'
          loadButton: '${String(t('tripPlanner.alerts.loadButton'))}',
          logger.api.start('background-autocomplete-fallback', { query: query.trim() });
          message={String(t('common.loading'))}
          message={String(t('guide.generatingWithLocation', { location: currentLoadingQuery || query || '' }))}
          message={String(t('guide.loadingGuide'))}
          model.generateContent("Hi"),
          placeholder={placeholder || String(t('search.placeholder'))}
          preview: entry.guideData?.overview?.summary || entry.guideData?.overview?.title || String(t('history.preview'))
          queryParams.set('country', regionalContext.country);
          queryParams.set('countryCode', regionalContext.countryCode);
          queryParams.set('region', parentRegion);
          queryParams.set('region', regionalContext.region);
          queryParams.set('type', 'attraction');
          queryParams.set('type', regionalContext.type || 'attraction');
          retryAfter: response.headers.get('retry-after'),
          return errorMessages[error] || String(t('auth.googleSigninFailed')) || 'Google 로그인 실패';
          savedPlansEmpty: '${String(t('tripPlanner.alerts.savedPlansEmpty'))}',
          sendResult('final', {
          setError(result.error || t('guide.cannotLoadInfo'));
          setErrors({ general: data.error || t('auth.signupFailed') || '회원가입에 실패했습니다.' });
          setErrors({ success: String(t('auth.emailVerificationComplete')) || '이메일 인증이 완료되었습니다!' });
          setErrors({ success: String(t('auth.signupSuccess')) || '🎉 회원가입이 완료되었습니다!' });
          setErrors({ success: String(t('auth.verificationCodeSent')) || '인증 코드가 이메일로 전송되었습니다.' });
          setErrors({ verificationCode: data.error || String(t('auth.verificationFailed')) || '인증에 실패했습니다.' });
          settingsPrompt: '${String(t('tripPlanner.alerts.settingsPrompt'))}',
          String(t('location.leftArea')),
          String(t('location.stayingAt')),
          subMessage={String(t('guide.fetchingGuideData'))}
          subMessage={String(t('guide.generatingSubMessage'))}
          supabase.from('guides').select('locationname').limit(1),
          text: String(t('live.shareText')),
          this.services.get('google_places').searchPlaces(query, coordinates),
          this.services.get('government').searchGovernmentData(query),
          this.services.get('government').searchTourismByLocation(lat, lng, radius)
          this.services.get('unesco').searchByCoordinates(lat, lng, radius / 1000) // km 단위
          this.services.get('unesco').searchSites(query),
          this.services.get('wikidata').searchEntities(query),
          title: String(t('live.shareTitle')),
          wikidataId: binding.item.value.split('/').pop(),
        .lt('created_at', endOfDay.toISOString())
        .lt('created_at', endOfDay.toISOString());
        .lt('regeneration_attempts', maxAttempts);
        .not('location_name', 'is', null);
        .select('*')
        .select('*', { count: 'exact', head: true })
        .select('content')
        .select('id')
        .select('id, locationname, language, content, coordinates, location_region, country_code, created_at, updated_at')
        .select('id, locationname, language, coordinates')
        .select('id, locationname, language, created_at, updated_at')
        .select('language, updated_at')
        .select('location_name')
        .select('locationname')
        {t('home.popularDestinations') || '인기 여행지'}
        <GuideLoading message={t('guide.loadingRegionInfo') as string} />
        alert(t('feedback.submitSuccess') || '🎉 소중한 피드백 감사합니다! 더 나은 가이드로 발전시키겠습니다.');
        cancelText={String(t('guide.no'))}
        confirmText={String(t('guide.yes'))}
        const [lng, lat] = coordMatch[1].split(' ').map(Number);
        const { aiCircuitBreaker } = await import('./circuit-breaker');
        const { extractAccurateLocationInfo } = await import('@/lib/coordinates/accurate-country-extractor');
        const { getUserByEmail } = await import('./user');
        const { supabase } = await import('@/lib/supabaseClient');
        const errorMessage = t('home.alerts.networkError');
        const fs = await import('fs');
        const koreanModule = await import('./korean');
        const link = document.createElement('link');
        const parts = firstSuggestion.location.split(',').map((part: string) => part.trim());
        const parts = suggestion.location.split(',').map(part => part.trim());
        const path = await import('path');
        const testPromise = model.generateContent("Test");
        contentLength: response.headers.get('content-length')
        contentType: response.headers.get('content-type'),
        ctx.fillText('BotDetection', 2, 2);
        date: date.toISOString().split('T')[0],
        description={String(t('tripPlanner.metadata.description'))}
        description={t('meta.description')}
        description={t('metadata.description')}
        features={[String(t('tripPlanner.features.aiGeneration')), String(t('tripPlanner.features.realtime')), String(t('tripPlanner.features.budget')), String(t('tripPlanner.features.customized')), String(t('tripPlanner.features.localInfo')), String(t('tripPlanner.features.free'))]}
        features={[t('features.planning'), t('features.guide'), t('features.safety'), t('features.budget'), t('features.language'), t('features.support')]}
        features={[t('features.worldwide'), t('features.realtime'), t('features.personalized'), t('features.hidden'), t('features.culture'), t('features.free')]}
        features={[t('meta.features.top100'), t('meta.features.aiGuide'), t('meta.features.hiddenStories'), t('meta.features.historyCulture'), t('meta.features.localInfo'), t('meta.features.personalizedRecs')]}
        general: error instanceof Error ? error.message : String(t('auth.networkError')) || '네트워크 오류'
        keyword={String(t('tripPlanner.keyword'))}
        keyword={t('keyword')}
        keyword={t('meta.keyword')}
        message={String(t('guide.bookmarkSuccess'))}
        message={String(t('guide.regenerateConfirm'))}
        origin: request.headers.get('origin')
        preview: entry.guideData?.overview?.summary || entry.guideData?.overview?.title || String(t('history.preview'))
        referer: request.headers.get('referer'),
        safeSetState(() => setErrors({ email: data.error || String(t('auth.emailSendFailed')) || '이메일 전송에 실패했습니다.' }));
        safeSetState(() => setErrors({ email: String(t('auth.networkError')) || '네트워크 오류가 발생했습니다.' }));
        safeSetState(() => setErrors({ email: String(t('auth.requestTimeout')) || '요청 시간이 초과되었습니다.' }));
        safeSetState(() => setErrors({ general: result.error || String(t('auth.loginFailed')) || '로그인 실패' }));
        safeSetState(() => setErrors({ general: String(t('auth.networkError')) || '네트워크 오류가 발생했습니다.' }));
        safeSetState(() => setErrors({ general: String(t('auth.requestTimeout')) || '요청 시간이 초과되었습니다.' }));
        safeSetState(() => setErrors({ verificationCode: String(t('auth.networkError')) || '네트워크 오류가 발생했습니다.' }));
        safeSetState(() => setErrors({ verificationCode: String(t('auth.requestTimeout')) || '요청 시간이 초과되었습니다.' }));
        t('features.audioGuide'),
        t('features.bookmarks')
        t('features.mustVisitSpots')
        t('features.offlineMode'),
        t('features.optimizedPath'),
        t('features.personalizedVoice'),
        t('features.realTimeTracking'),
        t('features.smartAlerts')
        t('features.timeEstimates'),
        this.checkBudget('FCP', fcpEntry.startTime);
        this.checkBudget('FID', this.metrics.FID);
        this.services.get('google_places').searchNearbyPlaces(lat, lng, radius)
        this.services.get('wikidata').searchByCoordinates(lat, lng, radius / 1000) // km 단위
        throw new Error(String(t('auth.browserNotSupported')) || '브라우저가 최신 보안 기능을 지원하지 않습니다.');
        throw new Error(String(t('tripPlanner.alerts.planGenerationFailed')));
        throw new Error(t('relatedGuides.errors.loadFailed') || '관련 가이드를 불러올 수 없습니다');
        title: String(t('errors.inputValidation.title'))
        title={String(t('guide.bookmarkGuide'))}
        title={String(t('guide.regenerateGuide'))}
        title={String(t('tripPlanner.metadata.title'))}
        title={t('meta.title')}
        title={t('metadata.title')}
        user_agent: request.headers.get('user-agent') || 'Unknown'
        userAgent: request.headers.get('user-agent'),
      .lt('created_at', thirtyDaysAgo.toISOString());
      .lt('regeneration_attempts', maxAttempts);
      .lt('retry_count', 'max_retries')
      .map(lang => lang.trim().split(';')[0].split('-')[0])
      .not('coordinates', 'eq', '{}');
      .not('coordinates', 'is', null)
      .not('guide_content', 'is', null)
      .not('language', 'is', null);
      .not('latitude', 'is', null)
      .not('location_name', 'is', null);
      .not('longitude', 'is', null)
      .not('user_id', 'is', null);
      .select('*')
      .select('*');
      .select('*', { count: 'exact', head: true })
      .select('*', { count: 'exact', head: true });
      .select('content')
      .select('count(*)', { count: 'exact', head: true });
      .select('endpoint, response_time, status_code, created_at')
      .select('guide_content')
      .select('id')
      .select('id', { count: 'exact', head: true })
      .select('id', { count: 'exact', head: true });
      .select('id, coordinates, locationname, language')
      .select('id, email, name, email_verified, created_at')
      .select('id, email, name, is_admin')
      .select('id, email, name, is_admin, created_at, updated_at')
      .select('id, guide_id, chapter_index, title, latitude, longitude, coordinate_accuracy, regeneration_attempts, validation_status')
      .select('id, guide_id, chapter_index, title, latitude, longitude, coordinate_accuracy, regeneration_attempts, validation_status, last_validated_at');
      .select('id, guide_id, chapter_index, title, latitude, longitude, coordinate_accuracy, validation_status, last_validated_at')
      .select('id, location_name, quality_score')
      .select('id, locationname, language, content, coordinates, location_region, country_code')
      .select('language')
      .select('location_name, language, quality_score, updated_at')
      .select('location_name, region, category')
      .select('location_name, updated_at')
      .select('locationname')
      .select('locationname, content, updated_at')
      .select('locationname, language')
      .select('locationname, language, content')
      .select('locationname, language, created_at')
      .select('narrative, scene_description, core_narrative, human_stories')
      .select('overall_quality, created_at')
      .select('user_id', { count: 'exact', head: true })
      .select('version')
      // alert('대시보드 데이터를 불러올 수 없습니다. 일부 데이터는 임시 데이터로 표시됩니다.');
      { name: t('films.cloy.locations.beolgok.name'), area: t('films.cloy.locations.beolgok.area'), description: t('films.cloy.locations.beolgok.description') },
      { name: t('films.cloy.locations.bukhan.name'), area: t('films.cloy.locations.bukhan.area'), description: t('films.cloy.locations.bukhan.description') }
      { name: t('films.cloy.locations.sigriswil.name'), area: t('films.cloy.locations.sigriswil.area'), description: t('films.cloy.locations.sigriswil.description') },
      { name: t('films.goblin.locations.chinatown.name'), area: t('films.goblin.locations.chinatown.area'), description: t('films.goblin.locations.chinatown.description') }
      { name: t('films.goblin.locations.deoksugung.name'), area: t('films.goblin.locations.deoksugung.area'), description: t('films.goblin.locations.deoksugung.description') },
      { name: t('films.goblin.locations.jumunjin.name'), area: t('films.goblin.locations.jumunjin.area'), description: t('films.goblin.locations.jumunjin.description') },
      { name: t('films.parasite.locations.jahamun.name'), area: t('films.parasite.locations.jahamun.area'), description: t('films.parasite.locations.jahamun.description') },
      { name: t('films.parasite.locations.seongbuk.name'), area: t('films.parasite.locations.seongbuk.area'), description: t('films.parasite.locations.seongbuk.description') }
      { name: t('films.parasite.locations.snu.name'), area: t('films.parasite.locations.snu.area'), description: t('films.parasite.locations.snu.description') },
      { name: t('films.squidGame.locations.cheongnyangni.name'), area: t('films.squidGame.locations.cheongnyangni.area'), description: t('films.squidGame.locations.cheongnyangni.description') }
      { name: t('films.squidGame.locations.tribowl.name'), area: t('films.squidGame.locations.tribowl.area'), description: t('films.squidGame.locations.tribowl.description') },
      { name: t('films.squidGame.locations.yongyu.name'), area: t('films.squidGame.locations.yongyu.area'), description: t('films.squidGame.locations.yongyu.description') },
      { name: t('films.taegeukgi.locations.auraji.name'), area: t('films.taegeukgi.locations.auraji.area'), description: t('films.taegeukgi.locations.auraji.description') },
      { name: t('films.taegeukgi.locations.seoul.name'), area: t('films.taegeukgi.locations.seoul.area'), description: t('films.taegeukgi.locations.seoul.description') }
      { name: t('films.taegeukgi.locations.taebaek.name'), area: t('films.taegeukgi.locations.taebaek.area'), description: t('films.taegeukgi.locations.taebaek.description') },
      addNotification('location-denied', String(t('location.permissionDenied')), 'warning');
      alert(String(t('tripPlanner.alerts.enterDestination')));
      alert(String(t('tripPlanner.alerts.noPlanToExport')));
      alert(String(t('tripPlanner.alerts.noPlanToSave')));
      alert(String(t('tripPlanner.alerts.noPlanToShare')));
      alert(String(t('tripPlanner.alerts.noSavedSettings')));
      alert(String(t('tripPlanner.alerts.planGenerationError')));
      alert(String(t('tripPlanner.alerts.settingsLoaded')));
      alert(t('feedback.submitFailed') || '피드백 제출에 실패했습니다. 다시 시도해주세요.');
      alert('메트릭이 초기화되었습니다.');
      alert('위치 권한이 거부되었습니다. 브라우저 설정에서 위치 권한을 허용해주세요.');
      badge: hasAudioContent ? t('features.available') : t('features.generating'),
      badge: hasRoute ? `${estimatedDuration}${t('common.minutes')}` : t('features.planning'),
      badge: t('features.recommended'),
      case 'category': return t('relatedGuides.types.category') || '비슷한 유형';
      case 'challenging': return t('common.challenging');
      case 'easy': return t('common.easy');
      case 'moderate': return t('common.moderate');
      case 'popular': return t('relatedGuides.types.popular') || '인기 여행지';
      case 'regional': return t('relatedGuides.types.regional') || '주변 지역';
      case '아메리카': return t('continents.americas');
      case '아시아': return t('continents.asia');
      case '아프리카': return t('continents.africa');
      case '오세아니아': return t('continents.oceania');
      case '유럽': return t('continents.europe');
      console.error(t('history.deleteFailed'), error);
      console.error(t('history.loadFailed'), error);
      const { GoogleAuth } = await import('google-auth-library');
      const { performCompleteLogout, simpleCacheInvalidation } = await import('@/lib/auth-utils');
      const { PrecisionLocationService } = await import('@/lib/location/precision-location-service');
      const { SpatialReasoningAI } = await import('@/lib/location/spatial-reasoning-ai');
      const { SpecificStartingPointGenerator } = await import('@/lib/location/specific-starting-point-generator');
      const { WikipediaLocationSearcher } = await import('@/lib/location/wikipedia-location-searcher');
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const destination = params.get('destination');
      const details = t('attractionDetails');
      const errorMessage = t('home.alerts.enterLocation');
      const film = params.get('film');
      const gl = canvas.getContext('webgl');
      const hashBuffer = await crypto.subtle.digest('SHA-256', data);
      const langCode = targetLang.split('-')[0];
      const nomad = params.get('nomad');
      const purpose = params.get('purpose');
      const response = await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {
      const script = document.createElement('script');
      const titleMessage = t('errors.inputValidation.title');
      const translated = t('home.defaultSuggestions');
      const translationKeywords = normalizeForMapping(translation).split(' ');
      const urlLang = urlParams.get('lang');
      const visa = params.get('visa');
      const words = sentence.trim().split(' ');
      default: return t('common.moderate');
      default: return t('relatedGuides.types.default') || '추천';
      description: t('features.audioGuideDesc'),
      description: t('features.liveTourDesc'),
      description: t('features.routePlannerDesc'),
      if (clickedElement.closest('.dropdown-item')) {
      if (clickedElement.closest('input[type="text"]') || 
      logger.api.start('guide-db-query', { 
      retryStats.recordAttempt('gemini-generate-content');
      retryStats.recordAttempt('supabase-update-final');
      retryStats.recordAttempt('supabase-upsert-initial');
      return `${hours}${t('common.hours') || '시간'} ${mins}${t('common.minutes') || '분'}`;
      return forwarded.split(',')[0].trim();
      safeSetState(() => setErrors({ email: String(t('auth.emailRequired')) || '이메일을 입력해주세요.' }));
      safeSetState(() => setErrors({ email: String(t('auth.invalidEmailFormat')) || '올바른 이메일 형식을 입력해주세요.' }));
      safeSetState(() => setErrors({ general: String(t('auth.loginError')) || '로그인 중 오류가 발생했습니다.' }));
      safeSetState(() => setErrors({ verificationCode: String(t('auth.enter6DigitCode')) || '6자리 인증 코드를 입력해주세요.' }));
      setBudget(String(t('tripPlanner.defaults.budget')));
      setDuration(String(t('tripPlanner.defaults.duration')));
      setError(err instanceof Error ? err.message : t('relatedGuides.errors.unknown') || '알 수 없는 오류');
      setError(t('guide.loadRegionError') as string);
      setTripType(String(t('tripPlanner.defaults.tripType')));
      this.checkBudget('CLS', clsValue);
      this.checkBudget('LCP', lcpEntry.startTime);
      this.checkBudget('TTFB', this.metrics.TTFB);
      title: `${locationName} ${t('guide.tourStart')}`,
      title: t('features.audioGuide'),
      title: t('features.liveTour'),
      title: t('features.routePlanner'),
      validationErrors.confirmPassword = String(t('auth.passwordsNotMatch')) || '비밀번호가 일치하지 않습니다.';
      validationErrors.email = String(t('auth.emailRequired')) || '이메일을 입력해주세요.';
      validationErrors.name = String(t('auth.nameRequired')) || '이름을 입력해주세요.';
      validationErrors.password = String(t('auth.passwordMinLength')) || '비밀번호는 최소 6자리 이상이어야 합니다.';
      window.dispatchEvent(new Event('urlchange'));
    (t('feedback.improvements.culturalBackground') as string) || '문화적 배경 설명 부족', 
    (t('feedback.improvements.explainTerms') as string) || '전문 용어 설명 필요',
    (t('feedback.improvements.moreHistoricalFacts') as string) || '더 구체적인 역사적 사실 필요',
    (t('feedback.improvements.moreStories') as string) || '재미있는 스토리 부족',
    (t('feedback.improvements.personalInterests') as string) || '개인적 관심사 반영 부족',
    (t('feedback.improvements.practicalInfo') as string) || '실용적 정보 부족',
    (t('feedback.improvements.tooLong') as string) || '내용이 너무 길어서 지루함',
    (t('feedback.improvements.tooShort') as string) || '내용이 너무 짧아서 아쉬움'
    .select('id, locationname, location_region, country_code, language, coordinates')
    .select('locationname')
    <section className={`${className}`} aria-label={t('relatedGuides.aria.section') || '관련 여행지 추천'}>
    1: t('feedback.ratings.1') || '매우 불만족',
    2: t('feedback.ratings.2') || '불만족', 
    3: t('feedback.ratings.3') || '보통',
    4: t('feedback.ratings.4') || '만족',
    5: t('feedback.ratings.5') || '매우 만족'
    addNotification('tracking-started', String(t('location.trackingStarted')), 'success');
    addNotification('tracking-stopped', String(t('location.trackingStopped')), 'info');
    alert(String(t('tripPlanner.alerts.compareFeatureComingSoon')));
    alert(String(t('tripPlanner.alerts.planSaved')));
    alert(String(t('tripPlanner.alerts.settingsSaved')));
    awards: t('films.cloy.awards')
    awards: t('films.goblin.awards')
    awards: t('films.parasite.awards')
    awards: t('films.squidGame.awards')
    awards: t('films.taegeukgi.awards')
    chapter?.title?.split(':')[0]?.trim(),
    const [major, minor, patch] = currentVersion.split('.').map(Number);
    const { getUserByEmail } = await import('@/lib/user');
    const { GoogleGenerativeAI } = await import('@google/generative-ai');
    const { smartPlacesSearch } = await import('@/lib/coordinates/google-places-integration');
    const a = document.createElement('a');
    const action = searchParams.get('action') || 'expired';
    const action = searchParams.get('action') || 'info';
    const action = searchParams.get('action') || 'report';
    const action = searchParams.get('action');
    const adaptedParagraphs = adapted.split('\n').filter(p => p.trim()).length;
    const adaptedWords = adapted.split(' ').length;
    const base64Audio = result.audioUrl.split(',')[1] || result.audioUrl;
    const baseLanguage = languageCode.split('-')[0];
    const batchSize = parseInt(searchParams.get('batchSize') || '20');
    const batchSize = parseInt(url.searchParams.get('batchSize') || '5');
    const chars = text.split('');
    const confirmMessage = typeof t('common.confirmDelete') === 'string' ? String(t('common.confirmDelete')) : '이 가이드를 삭제하시겠습니까?';
    const contentType = response.headers.get('content-type') || '';
    const cookieName = cookie.trim().split('=')[0];
    const countries = t('home.countries') as any;
    const currentLocation = searchParams.get('location');
    const detail = searchParams.get('detail') === 'true';
    const detailed = searchParams.get('detailed') === 'true';
    const endMount = measureComponentMount('PerformanceProvider');
    const fieldPath = field.split('.');
    const fingerprint = req.headers.get('x-fingerprint') || undefined;
    const format = searchParams.get('format') || 'json';
    const forwarded = req.headers.get('x-forwarded-for');
    const guideId = searchParams.get('guideId');
    const host = request.headers.get('host') || 'localhost:3000';
    const includeDetails = searchParams.get('includeDetails') === 'true';
    const ip = forwarded ? forwarded.split(',')[0] : 
    const ip = req.headers.get('x-forwarded-for') || 'anonymous';
    const ip = request.headers.get('x-forwarded-for') || 'anonymous';
    const ip = request.headers.get('x-forwarded-for')?.split(',')[0].trim() ||
    const key = searchParams.get('key');
    const keys = key.split('.');
    const koreanModule = await import('./korean');
    const language = (searchParams.get('lang') || 'ko') as Language;
    const language = searchParams.get('lang') || 'ko';
    const language = searchParams.get('language') || 'ko';
    const language = searchParams.get('language');
    const languages = acceptLanguage.split(',')
    const limit = parseInt(searchParams.get('limit') || '6');
    const lines = analysisContent.split('\n').filter(line => line.trim());
    const lines = responseText.split('\n');
    const location = searchParams.get('location') || '경복궁';
    const locationFilter = searchParams.get('location');
    const locationName = guide?.metadata?.originalLocationName || guide?.overview?.title || String(t('guide.thisPlace'));
    const locationName = searchParams.get('locationName');
    const locationName = url.searchParams.get('location');
    const maxAttempts = parseInt(searchParams.get('maxAttempts') || '3');
    const minAccuracy = parseFloat(searchParams.get('minAccuracy') || '0.8');
    const minAccuracy = parseFloat(searchParams.get('minAccuracy') || '0.9'); // 실용적 정확도 기준 상향
    const optimalRate = this.naturalnessBenchmark.get('optimal_speaking_rate') || 0.92;
    const originalParagraphs = original.split('\n').filter(p => p.trim()).length;
    const originalWords = original.split(' ').length;
    const pathParts = urlObj.pathname.split('/');
    const period = url.searchParams.get('period') || '30'; // 기본 30일
    const pitchPrecision = params.pitch.toString().split('.')[1]?.length || 0;
    const placeName = searchParams.get('place') || 'test-location';
    const protocol = request.headers.get('x-forwarded-proto') || 'https';
    const query = searchParams.get('q') || '용궁사';
    const query = searchParams.get('q');
    const response = await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {
    const riskScore = parseInt(searchParams.get('riskScore') || '50');
    const safeBrowserLang = safeLanguageCode(browserLang.split('-')[0]);
    const speakingRatePrecision = params.speakingRate.toString().split('.')[1]?.length || 0;
    const spots = mustVisitSpots.split('#').filter(spot => spot.trim()).slice(0, 3);
    const strategy = searchParams.get('strategy') as CacheKeyStrategy;
    const strategy = url.searchParams.get('strategy') || 'standard';
    const testResponse = await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {
    const testType = searchParams.get('type') || 'full';
    const title = chapter?.title?.split(':')[0]?.trim();
    const titleWords = title.split(' ').filter(word => word.length > 1);
    const type = searchParams.get('type') as 'math' | 'text' | 'image' | 'auto';
    const urlCountryCode = searchParams.get('countryCode');
    const urlRegion = searchParams.get('region');
    const userAgent = req.headers.get('user-agent') || '';
    const words = description.split(' ');
    const words = sentence.split(' ');
    dateCreated: new Date().toISOString().split('T')[0],
    dateModified: new Date().toISOString().split('T')[0],
    description: String(t('tripTypes.couple.description')),
    description: String(t('tripTypes.family.description')),
    description: String(t('tripTypes.friends.description')),
    description: String(t('tripTypes.nomad.description')),
    description: String(t('tripTypes.solo.description')),
    features: [String(t('tripTypes.couple.features.romantic')), String(t('tripTypes.couple.features.activities')), String(t('tripTypes.couple.features.photos'))],
    features: [String(t('tripTypes.family.features.kidFriendly')), String(t('tripTypes.family.features.safety')), String(t('tripTypes.family.features.educational'))],
    features: [String(t('tripTypes.friends.features.activities')), String(t('tripTypes.friends.features.instagramSpots')), String(t('tripTypes.friends.features.nightlife'))],
    features: [String(t('tripTypes.nomad.features.wifi')), String(t('tripTypes.nomad.features.coworking')), String(t('tripTypes.nomad.features.longTerm'))],
    features: [String(t('tripTypes.solo.features.safety')), String(t('tripTypes.solo.features.culture')), String(t('tripTypes.solo.features.budget'))],
    highlights: [t('cities.berlin.highlights.startup'), t('cities.berlin.highlights.culture'), t('cities.berlin.highlights.beer')],
    highlights: [t('cities.canggu.highlights.lowCost'), t('cities.canggu.highlights.beach'), t('cities.canggu.highlights.surfing')],
    highlights: [t('cities.chiangmai.highlights.ultraLowCost'), t('cities.chiangmai.highlights.food'), t('cities.chiangmai.highlights.people')],
    highlights: [t('cities.hcmc.highlights.affordable'), t('cities.hcmc.highlights.vibrant'), t('cities.hcmc.highlights.food')],
    highlights: [t('cities.lisbon.highlights.timezone'), t('cities.lisbon.highlights.community'), t('cities.lisbon.highlights.weather')],
    highlights: [t('cities.mexicocity.highlights.culture'), t('cities.mexicocity.highlights.food'), t('cities.mexicocity.highlights.art')],
    if (!dateString) return t('history.invalidDate');
    if (confirm(String(t('tripPlanner.alerts.confirmRegenerate')))) {
    if (diffDays <= 30) return `${Math.ceil(diffDays / 7)}${t('common.weeksAgo') || '주 전'}`;
    if (diffDays <= 7) return `${diffDays}${t('common.daysAgo') || '일 전'}`;
    if (diffDays === 0) return t('history.today');
    if (diffDays === 1) return t('date.today') || '오늘';
    if (diffDays === 1) return t('history.yesterday');
    if (diffDays === 2) return t('date.yesterday') || '어제';
    if (isNaN(date.getTime())) return t('history.invalidDate');
    if (requestedLang) params.set('lang', requestedLang);
    interests = interests.split(',').map((s: string) => s.trim());
    logger.api.start('country-code-conversion', { countryName });
    logger.api.start('google-places-classification', { locationName });
    logger.api.start('google-places-proxy', { query, language });
    name: String(t('tripTypes.couple.name')),
    name: String(t('tripTypes.family.name')),
    name: String(t('tripTypes.friends.name')),
    name: String(t('tripTypes.nomad.name')),
    name: String(t('tripTypes.solo.name')),
    placesUrl.searchParams.set('key', apiKey);
    placesUrl.searchParams.set('language', language);
    placesUrl.searchParams.set('query', query);
    realityVerifications: Array<import('./hallucination-prevention').RealityVerificationResult>
    request.headers.get('cf-connecting-ip') ||  // CloudFlare
    request.headers.get('x-client-ip') ||
    request.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 
    request.headers.get('x-real-ip') ||
    request.headers.get('x-vercel-forwarded-for') ||  // Vercel 우선
    response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
    response.headers.set('Expires', '0');
    response.headers.set('Pragma', 'no-cache');
    response.headers.set('X-Auth-Cache-Invalidate', timestamp.toString());
    return `${mins}${t('common.minutes') || '분'}`;
    return new Intl.NumberFormat('ko-KR').format(num);
    return path.split('.').reduce((current, key) => current?.[key], obj);
    return req.headers.get('x-real-ip') || 
    this.emit('connectionReleased', connection);
    this.naturalnessBenchmark.set('optimal_formality_level', 0.6);
    this.naturalnessBenchmark.set('optimal_pause_frequency', 0.75);
    this.naturalnessBenchmark.set('optimal_pitch_range', 2.5);
    this.naturalnessBenchmark.set('optimal_speaking_rate', 0.92);
    this.services.set('google_places', GooglePlacesService.getInstance());
    this.services.set('government', GovernmentDataService.getInstance());
    this.services.set('unesco', UNESCOService.getInstance());
    this.services.set('wikidata', WikidataService.getInstance());
    title: t('films.cloy.title'),
    title: t('films.goblin.title'),
    title: t('films.parasite.title'),
    title: t('films.squidGame.title'),
    title: t('films.taegeukgi.title'),
  ): Promise<Array<import('./hallucination-prevention').RealityVerificationResult>> {
  const { extractChaptersFromContent } = await import('@/lib/coordinates/coordinate-utils');
  const { supabase } = await import('@/lib/supabaseClient');
  const acceptEncoding = request.headers.get('accept-encoding') || '';
  const acceptLanguage = request.headers.get('accept-language');
  const adminEmails = (process.env.ADMIN_EMAILS || '').split(',').map(e => e.trim());
  const allCookies = document.cookie.split(';');
  const browserLanguage = navigator.language.split('-')[0];
  const callbackUrl = searchParams.get('callbackUrl') || '/';
  const cfCountry = request.headers.get('cf-ipcountry');
  const contentType = response.headers.get('content-type');
  const continents = [t('continents.europe'), t('continents.asia'), t('continents.americas'), t('continents.africa'), t('continents.oceania')];
  const country = searchParams.get('country') || null;
  const countryCode = searchParams.get('countryCode') || null;
  const encouragingMessages = t('loading.encouragement') as string[];
  const file = formData.get('file') as File;
  const guideId = formData.get('guide_id') as string;
  const hasDescription = hasColon && title.split(':')[1]?.trim().length > 0;
  const keys = key.split('.');
  const keywords = normalized.split(' ');
  const lang = searchParams.get('lang') || 'ko';
  const langCode = browserLang.split('-')[0];
  const langParam = searchParams?.get('lang');
  const language = searchParams.get('language') || 'ko';
  const location = searchParams.get('location') || '';
  const parts = address.split(', ');
  const parts = address.split(',').map(part => part.trim());
  const parts = formattedAddress.split(',').map(part => part.trim());
  const placeholders = t('home.searchPlaceholders') || [];
  const query = searchParams.get('query');
  const region = searchParams.get('region') || null;
  const sentences = description.split('. ');
  const title = searchParams.get('title') || 'TripRadio.AI';
  const type = (searchParams.get('type') as 'location' | 'attraction') || 'attraction';
  const type = searchParams.get('type') || 'guide';
  const vercelRegion = request.headers.get('x-vercel-ip-country');
{t('guide.startRealtimeGuide')}
const BreadcrumbSchema = dynamic(() => import('@/components/seo/BreadcrumbSchema'), {
const ChapterAudioPlayer = dynamic(() => import('@/components/audio/ChapterAudioPlayer'), {
const ErrorModal = dynamic(() => import('@/components/errors/ErrorModal'), {
const FAQSchema = dynamic(() => import('@/components/seo/FAQSchema'), {
const ImagePreloader = dynamic(() => import('@/components/optimization/ImagePreloader'), {
const LiveLocationTracker = dynamic(() => import('@/components/location/LiveLocationTracker'), {
const MapWithRoute = dynamic(() => import('./MapWithRoute'), {
const MapWithRoute = dynamic(() => import('@/components/guide/MapWithRoute'), {
const MinimalTourContent = dynamic(() => import("../../guide/[location]/tour/components/TourContent"), { 
const MinimalTourContent = dynamic(() => import('./components/TourContent'), {
const MinimalTourContent = dynamic(() => import('./tour/components/TourContent'), {
const OptimalAdSense = dynamic(() => import('@/components/ads/OptimalAdSense'), {
const PerformanceProvider = dynamic(() => import('@/components/providers/PerformanceProvider'), {
const RegionExploreHub = dynamic(() => import('./RegionExploreHub'), {
const RegionTouristMap = dynamic(() => import('@/components/guide/RegionTouristMap'), {
const SimpleAudioPlayer = dynamic(() => import('@/components/audio/SimpleAudioPlayer'), {
const TourContentTest = dynamic(() => import('../guide/[location]/tour/components/TourContent'), {
